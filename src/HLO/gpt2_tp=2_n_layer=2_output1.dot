digraph HloModule { 
	"iota.48" [label="iota.48 \n s32[128]"];
	"broadcast.49" [label="broadcast.49 \n s32[1,128]"];
	"p1.2" [label="p1.2 \n s32[1]"];
	"broadcast.50" [label="broadcast.50 \n s32[1,128]"];
	"compare.51" [label="compare.51 \n pred[1,128]"];
	"broadcast.55" [label="broadcast.55 \n pred[4,1,128]"];
	"broadcast.52" [label="broadcast.52 \n s32[4,128]"];
	"p2.3" [label="p2.3 \n s32[4]"];
	"broadcast.53" [label="broadcast.53 \n s32[4,128]"];
	"compare.54" [label="compare.54 \n pred[4,128]"];
	"broadcast.56" [label="broadcast.56 \n pred[4,1,128]"];
	"and.57" [label="and.57 \n pred[4,1,128]"];
	"reshape.278" [label="reshape.278 \n pred[4,128]"];
	"broadcast.279" [label="broadcast.279 \n pred[4,6,1,128]"];
	"reshape.115" [label="reshape.115 \n pred[4,128]"];
	"p0.1" [label="p0.1 \n f32[768,1,4]"];
	"reshape.79" [label="reshape.79 \n f32[768,4]"];
	"broadcast.59" [label="broadcast.59 \n s32[4,1]"];
	"broadcast.58" [label="broadcast.58 \n s32[4,1]"];
	"compare.60" [label="compare.60 \n pred[4,1]"];
	"reshape.121" [label="reshape.121 \n pred[4]"];
	"reshape.177" [label="reshape.177 \n f32[4,384]"];
	"p17.18" [label="p17.18 \n f32[768,384]"];
	"dot.178" [label="dot.178 \n f32[4,768]"];
	"p18.19" [label="p18.19 \n f32[768]"];
	"reshape.179" [label="reshape.179 \n f32[768]"];
	"broadcast.180" [label="broadcast.180 \n f32[4,768]"];
	"add.181" [label="add.181 \n f32[4,768]"];
	"transpose.182" [label="transpose.182 \n f32[768,4]"];
	"reshape.183" [label="reshape.183 \n f32[768,1,4]"];
	"add.190" [label="add.190 \n f32[768,1,4]"];
	"reshape.191" [label="reshape.191 \n f32[768,4]"];
	"convert.192" [label="convert.192 \n f32[768,4]"];
	"broadcast.194" [label="broadcast.194 \n f32[4]"];
	"broadcast.196" [label="broadcast.196 \n f32[4]"];
	"p19.20" [label="p19.20 \n f32[768]"];
	"broadcast.199" [label="broadcast.199 \n f32[768,4]"];
	"multiply.200" [label="multiply.200 \n f32[768,4]"];
	"p20.21" [label="p20.21 \n f32[768]"];
	"broadcast.201" [label="broadcast.201 \n f32[768,4]"];
	"add.202" [label="add.202 \n f32[768,4]"];
	"convert.203" [label="convert.203 \n f32[768,4]"];
	"reshape.204" [label="reshape.204 \n f32[768,1,4]"];
	"reshape.205" [label="reshape.205 \n f32[768,4]"];
	"p21.22" [label="p21.22 \n f32[768,1536]"];
	"dot.206" [label="dot.206 \n f32[4,1536]"];
	"p22.23" [label="p22.23 \n f32[1536]"];
	"reshape.207" [label="reshape.207 \n f32[1536]"];
	"broadcast.208" [label="broadcast.208 \n f32[4,1536]"];
	"add.209" [label="add.209 \n f32[4,1536]"];
	"p23.24" [label="p23.24 \n f32[768,1536]"];
	"dot.211" [label="dot.211 \n f32[4,768]"];
	"p24.25" [label="p24.25 \n f32[768]"];
	"reshape.212" [label="reshape.212 \n f32[768]"];
	"broadcast.213" [label="broadcast.213 \n f32[4,768]"];
	"add.214" [label="add.214 \n f32[4,768]"];
	"transpose.215" [label="transpose.215 \n f32[768,4]"];
	"reshape.216" [label="reshape.216 \n f32[768,1,4]"];
	"add.223" [label="add.223 \n f32[768,1,4]"];
	"reshape.242" [label="reshape.242 \n f32[768,4]"];
	"convert.243" [label="convert.243 \n f32[768,4]"];
	"broadcast.245" [label="broadcast.245 \n f32[4]"];
	"broadcast.247" [label="broadcast.247 \n f32[4]"];
	"p25.26" [label="p25.26 \n f32[768]"];
	"broadcast.250" [label="broadcast.250 \n f32[768,4]"];
	"multiply.251" [label="multiply.251 \n f32[768,4]"];
	"p26.27" [label="p26.27 \n f32[768]"];
	"broadcast.252" [label="broadcast.252 \n f32[768,4]"];
	"add.253" [label="add.253 \n f32[768,4]"];
	"convert.254" [label="convert.254 \n f32[768,4]"];
	"reshape.255" [label="reshape.255 \n f32[768,1,4]"];
	"reshape.256" [label="reshape.256 \n f32[768,4]"];
	"p27.28" [label="p27.28 \n f32[768,384]"];
	"dot.257" [label="dot.257 \n f32[4,384]"];
	"p28.29" [label="p28.29 \n f32[384]"];
	"reshape.258" [label="reshape.258 \n f32[384]"];
	"broadcast.259" [label="broadcast.259 \n f32[4,384]"];
	"add.260" [label="add.260 \n f32[4,384]"];
	"reshape.269" [label="reshape.269 \n f32[1,4,6,64]"];
	"broadcast.273" [label="broadcast.273 \n f32[1,4,6,64]"];
	"divide.274" [label="divide.274 \n f32[1,4,6,64]"];
	"p7.8" [label="p7.8 \n f32[128,4,6,64]"];
	"dot.275" [label="dot.275 \n f32[4,6,1,128]"];
	"broadcast.277" [label="broadcast.277 \n f32[4,6,1,128]"];
	"select.280" [label="select.280 \n f32[4,6,1,128]"];
	"reduce.288" [label="reduce.288 \n f32[4,6,1]"];
	"reshape.284" [label="reshape.284 \n pred[4]"];
	"broadcast.285" [label="broadcast.285 \n pred[4,6,1,1]"];
	"p29.30" [label="p29.30 \n f32[768,384]"];
	"dot.261" [label="dot.261 \n f32[4,384]"];
	"p30.31" [label="p30.31 \n f32[384]"];
	"reshape.262" [label="reshape.262 \n f32[384]"];
	"broadcast.263" [label="broadcast.263 \n f32[4,384]"];
	"add.264" [label="add.264 \n f32[4,384]"];
	"reshape.270" [label="reshape.270 \n f32[1,4,6,64]"];
	"dot.281" [label="dot.281 \n f32[4,6,1,1]"];
	"broadcast.283" [label="broadcast.283 \n f32[4,6,1,1]"];
	"select.286" [label="select.286 \n f32[4,6,1,1]"];
	"reduce.294" [label="reduce.294 \n f32[4,6,1]"];
	"maximum.300" [label="maximum.300 \n f32[4,6,1]"];
	"broadcast.301" [label="broadcast.301 \n f32[4,6,1,128]"];
	"subtract.302" [label="subtract.302 \n f32[4,6,1,128]"];
	"exponential.303" [label="exponential.303 \n f32[4,6,1,128]"];
	"convert.311" [label="convert.311 \n f32[4,6,1,128]"];
	"p8.9" [label="p8.9 \n f32[128,4,6,64]"];
	"dot.324" [label="dot.324 \n f32[4,6,1,64]"];
	"broadcast.312" [label="broadcast.312 \n f32[4,6,1,1]"];
	"subtract.313" [label="subtract.313 \n f32[4,6,1,1]"];
	"exponential.314" [label="exponential.314 \n f32[4,6,1,1]"];
	"convert.322" [label="convert.322 \n f32[4,6,1,1]"];
	"p31.32" [label="p31.32 \n f32[768,384]"];
	"dot.265" [label="dot.265 \n f32[4,384]"];
	"p32.33" [label="p32.33 \n f32[384]"];
	"reshape.266" [label="reshape.266 \n f32[384]"];
	"broadcast.267" [label="broadcast.267 \n f32[4,384]"];
	"add.268" [label="add.268 \n f32[4,384]"];
	"reshape.271" [label="reshape.271 \n f32[1,4,6,64]"];
	"dot.325" [label="dot.325 \n f32[4,6,1,64]"];
	"add.326" [label="add.326 \n f32[4,6,1,64]"];
	"reduce.305" [label="reduce.305 \n f32[4,6,1]"];
	"reduce.315" [label="reduce.315 \n f32[4,6,1]"];
	"add.321" [label="add.321 \n f32[4,6,1]"];
	"convert.323" [label="convert.323 \n f32[4,6,1]"];
	"broadcast.327" [label="broadcast.327 \n f32[4,6,1,64]"];
	"divide.328" [label="divide.328 \n f32[4,6,1,64]"];
	"transpose.329" [label="transpose.329 \n f32[1,4,6,64]"]; 
 	"iota.48" -> "broadcast.49";
	"p1.2" -> "broadcast.50";
	"broadcast.49" -> "compare.51";
	"broadcast.50" -> "compare.51";
	"compare.51" -> "broadcast.55";
	"iota.48" -> "broadcast.52";
	"p2.3" -> "broadcast.53";
	"broadcast.52" -> "compare.54";
	"broadcast.53" -> "compare.54";
	"compare.54" -> "broadcast.56";
	"broadcast.55" -> "and.57";
	"broadcast.56" -> "and.57";
	"and.57" -> "reshape.278";
	"reshape.278" -> "broadcast.279";
	"and.57" -> "reshape.115";
	"p0.1" -> "reshape.79";
	"p1.2" -> "broadcast.59";
	"p2.3" -> "broadcast.58";
	"broadcast.59" -> "compare.60";
	"broadcast.58" -> "compare.60";
	"compare.60" -> "reshape.121";
	"transpose.166" -> "reshape.177";
	"p17.18" -> "custom-call.71";
	"reshape.177" -> "dot.178";
	"custom-call.71" -> "dot.178";
	"p18.19" -> "custom-call.72";
	"custom-call.72" -> "reshape.179";
	"reshape.179" -> "broadcast.180";
	"dot.178" -> "add.181";
	"broadcast.180" -> "add.181";
	"add.181" -> "transpose.182";
	"transpose.182" -> "reshape.183";
	"reshape.183" -> "all-reduce.184";
	"all-reduce.184.Reducer.189" -> "all-reduce.184";
	"all-reduce.184" -> "add.190";
	"p0.1" -> "add.190";
	"add.190" -> "reshape.191";
	"reshape.191" -> "convert.192";
	"constant.193" -> "broadcast.194";
	"constant.195" -> "broadcast.196";
	"convert.192" -> "batch-norm-training.197";
	"broadcast.194" -> "batch-norm-training.197";
	"broadcast.196" -> "batch-norm-training.197";
	"batch-norm-training.197" -> "get-tuple-element.198";
	"p19.20" -> "custom-call.73";
	"custom-call.73" -> "broadcast.199";
	"get-tuple-element.198" -> "multiply.200";
	"broadcast.199" -> "multiply.200";
	"p20.21" -> "custom-call.74";
	"custom-call.74" -> "broadcast.201";
	"multiply.200" -> "add.202";
	"broadcast.201" -> "add.202";
	"add.202" -> "convert.203";
	"convert.203" -> "reshape.204";
	"reshape.204" -> "reshape.205";
	"p21.22" -> "custom-call.75";
	"reshape.205" -> "dot.206";
	"custom-call.75" -> "dot.206";
	"p22.23" -> "custom-call.76";
	"custom-call.76" -> "reshape.207";
	"reshape.207" -> "broadcast.208";
	"dot.206" -> "add.209";
	"broadcast.208" -> "add.209";
	"add.209" -> "custom-call.210";
	"p23.24" -> "custom-call.77";
	"custom-call.210" -> "dot.211";
	"custom-call.77" -> "dot.211";
	"p24.25" -> "custom-call.78";
	"custom-call.78" -> "reshape.212";
	"reshape.212" -> "broadcast.213";
	"dot.211" -> "add.214";
	"broadcast.213" -> "add.214";
	"add.214" -> "transpose.215";
	"transpose.215" -> "reshape.216";
	"reshape.216" -> "all-reduce.217";
	"all-reduce.217.Reducer.222" -> "all-reduce.217";
	"all-reduce.217" -> "add.223";
	"add.190" -> "add.223";
	"add.223" -> "reshape.242";
	"reshape.242" -> "convert.243";
	"constant.244" -> "broadcast.245";
	"constant.246" -> "broadcast.247";
	"convert.243" -> "batch-norm-training.248";
	"broadcast.245" -> "batch-norm-training.248";
	"broadcast.247" -> "batch-norm-training.248";
	"batch-norm-training.248" -> "get-tuple-element.249";
	"p25.26" -> "custom-call.226";
	"custom-call.226" -> "broadcast.250";
	"get-tuple-element.249" -> "multiply.251";
	"broadcast.250" -> "multiply.251";
	"p26.27" -> "custom-call.227";
	"custom-call.227" -> "broadcast.252";
	"multiply.251" -> "add.253";
	"broadcast.252" -> "add.253";
	"add.253" -> "convert.254";
	"convert.254" -> "reshape.255";
	"reshape.255" -> "reshape.256";
	"p27.28" -> "custom-call.228";
	"reshape.256" -> "dot.257";
	"custom-call.228" -> "dot.257";
	"p28.29" -> "custom-call.229";
	"custom-call.229" -> "reshape.258";
	"reshape.258" -> "broadcast.259";
	"dot.257" -> "add.260";
	"broadcast.259" -> "add.260";
	"add.260" -> "reshape.269";
	"constant.272" -> "broadcast.273";
	"reshape.269" -> "divide.274";
	"broadcast.273" -> "divide.274";
	"p7.8" -> "custom-call.224";
	"divide.274" -> "dot.275";
	"custom-call.224" -> "dot.275";
	"constant.276" -> "broadcast.277";
	"broadcast.279" -> "select.280";
	"dot.275" -> "select.280";
	"broadcast.277" -> "select.280";
	"select.280" -> "reduce.288";
	"constant.287" -> "reduce.288";
	"reduce.288.MaxFunc.293" -> "reduce.288";
	"compare.60" -> "reshape.284";
	"reshape.284" -> "broadcast.285";
	"p29.30" -> "custom-call.230";
	"reshape.256" -> "dot.261";
	"custom-call.230" -> "dot.261";
	"p30.31" -> "custom-call.231";
	"custom-call.231" -> "reshape.262";
	"reshape.262" -> "broadcast.263";
	"dot.261" -> "add.264";
	"broadcast.263" -> "add.264";
	"add.264" -> "reshape.270";
	"divide.274" -> "dot.281";
	"reshape.270" -> "dot.281";
	"constant.282" -> "broadcast.283";
	"broadcast.285" -> "select.286";
	"dot.281" -> "select.286";
	"broadcast.283" -> "select.286";
	"select.286" -> "reduce.294";
	"constant.287" -> "reduce.294";
	"reduce.294.MaxFunc.299" -> "reduce.294";
	"reduce.288" -> "maximum.300";
	"reduce.294" -> "maximum.300";
	"maximum.300" -> "broadcast.301";
	"select.280" -> "subtract.302";
	"broadcast.301" -> "subtract.302";
	"subtract.302" -> "exponential.303";
	"exponential.303" -> "convert.311";
	"p8.9" -> "custom-call.225";
	"convert.311" -> "dot.324";
	"custom-call.225" -> "dot.324";
	"maximum.300" -> "broadcast.312";
	"select.286" -> "subtract.313";
	"broadcast.312" -> "subtract.313";
	"subtract.313" -> "exponential.314";
	"exponential.314" -> "convert.322";
	"p31.32" -> "custom-call.232";
	"reshape.256" -> "dot.265";
	"custom-call.232" -> "dot.265";
	"p32.33" -> "custom-call.233";
	"custom-call.233" -> "reshape.266";
	"reshape.266" -> "broadcast.267";
	"dot.265" -> "add.268";
	"broadcast.267" -> "add.268";
	"add.268" -> "reshape.271";
	"convert.322" -> "dot.325";
	"reshape.271" -> "dot.325";
	"dot.324" -> "add.326";
	"dot.325" -> "add.326";
	"exponential.303" -> "reduce.305";
	"constant.304" -> "reduce.305";
	"reduce.305.AddFunc.310" -> "reduce.305";
	"exponential.314" -> "reduce.315";
	"constant.304" -> "reduce.315";
	"reduce.315.AddFunc.320" -> "reduce.315";
	"reduce.305" -> "add.321";
	"reduce.315" -> "add.321";
	"add.321" -> "convert.323";
	"convert.323" -> "broadcast.327";
	"add.326" -> "divide.328";
	"broadcast.327" -> "divide.328";
	"divide.328" -> "transpose.329";
 }