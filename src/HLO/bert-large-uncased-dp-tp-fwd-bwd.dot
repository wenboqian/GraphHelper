digraph HloModule { 
	"p42.752" [label="p42.752 \n f32[1]"];
	"p36.605" [label="p36.605 \n s64[16,128]"];
	"broadcast.196" [label="broadcast.196 \n s64[16,128]"];
	"compare.8" [label="compare.8 \n pred[16,128]"];
	"reshape.530" [label="reshape.530 \n pred[2048]"];
	"p41.670" [label="p41.670 \n f32[16]"];
	"broadcast.676" [label="broadcast.676 \n f32[16,128,16]"];
	"p35.517" [label="p35.517 \n f32[16]"];
	"broadcast.523" [label="broadcast.523 \n f32[16,128,16]"];
	"p30.423" [label="p30.423 \n f32[16]"];
	"broadcast.429" [label="broadcast.429 \n f32[16,128,16]"];
	"p17.191" [label="p17.191 \n f32[16]"];
	"broadcast.197" [label="broadcast.197 \n f32[16,128,16]"];
	"p16.165" [label="p16.165 \n f32[30522,16]"];
	"p15.163" [label="p15.163 \n s64[16,128]"];
	"convert.6" [label="convert.6 \n u32[16,128]"];
	"reshape.384" [label="reshape.384 \n u32[2048]"];
	"gather.174" [label="gather.174 \n f32[2048,16]"];
	"p14.151" [label="p14.151 \n f32[2,16]"];
	"p13.149" [label="p13.149 \n s64[16,128]"];
	"convert.5" [label="convert.5 \n u32[16,128]"];
	"reshape.383" [label="reshape.383 \n u32[2048]"];
	"gather.160" [label="gather.160 \n f32[2048,16]"];
	"add.12" [label="add.12 \n f32[2048,16]"];
	"reshape.519" [label="reshape.519 \n f32[16,128,16]"];
	"p12.132" [label="p12.132 \n f32[512,16]"];
	"p11.128" [label="p11.128 \n s64[1,512]"];
	"convert.4" [label="convert.4 \n u32[1,512]"];
	"slice.0" [label="slice.0 \n u32[1,128]"];
	"reshape.382" [label="reshape.382 \n u32[128]"];
	"gather.141" [label="gather.141 \n f32[128,16]"];
	"broadcast.179" [label="broadcast.179 \n f32[16,128,16]"];
	"add.180" [label="add.180 \n f32[16,128,16]"];
	"reshape.181" [label="reshape.181 \n f32[1,2048,16]"];
	"constant.118" [label="constant.118 \n f32[] constant(1), metadata="];
	"broadcast.122" [label="broadcast.122 \n f32[2048]"];
	"constant.113" [label="constant.113 \n f32[] constant(0), metadata="];
	"broadcast.117" [label="broadcast.117 \n f32[2048]"];
	"reshape.190" [label="reshape.190 \n f32[16,128,16]"];
	"p10.102" [label="p10.102 \n f32[16]"];
	"broadcast.193" [label="broadcast.193 \n f32[16,128,16]"];
	"multiply.196" [label="multiply.196 \n f32[16,128,16]"];
	"add.198" [label="add.198 \n f32[16,128,16]"];
	"constant.67" [label="constant.67 \n s64[] constant(214013), metadata="];
	"p9.66" [label="p9.66 \n s64[] parameter(9), frontend_attributes="];
	"multiply.68" [label="multiply.68 \n s64[] multiply(s64[] %constant.67, s64[] %p9.66), metadata="];
	"constant.69" [label="constant.69 \n s64[] constant(2531011), metadata="];
	"add.70" [label="add.70 \n s64[] add(s64[] %multiply.68, s64[] %constant.69), metadata="];
	"convert.77" [label="convert.77 \n u64[] convert(s64[] %add.70), metadata="];
	"reshape.79" [label="reshape.79 \n u64[1]"];
	"constant.43" [label="constant.43 \n u64[1]"];
	"concatenate.81" [label="concatenate.81 \n u64[2]"];
	"constant.85" [label="constant.85 \n u32[] constant(9), metadata="];
	"broadcast.86" [label="broadcast.86 \n u32[16,128,16]"];
	"convert.88" [label="convert.88 \n f32[16,128,16]"];
	"constant.89" [label="constant.89 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.90" [label="broadcast.90 \n f32[16,128,16]"];
	"multiply.94" [label="multiply.94 \n f32[16,128,16]"];
	"p8.65" [label="p8.65 \n f32[] parameter(8), frontend_attributes="];
	"broadcast.74" [label="broadcast.74 \n f32[16,128,16]"];
	"compare.97" [label="compare.97 \n pred[16,128,16]"];
	"constant.26" [label="constant.26 \n f32[] constant(1), metadata="];
	"broadcast.58" [label="broadcast.58 \n f32[16,128,16]"];
	"broadcast.85" [label="broadcast.85 \n f32[16,128,16]"];
	"select.13" [label="select.13 \n f32[16,128,16]"];
	"multiply.200" [label="multiply.200 \n f32[16,128,16]"];
	"reshape.353" [label="reshape.353 \n f32[2048,16]"];
	"p29.351" [label="p29.351 \n f32[8,16]"];
	"transpose.352" [label="transpose.352 \n f32[16,8]"];
	"dot.354" [label="dot.354 \n f32[2048,8]"];
	"reshape.355" [label="reshape.355 \n f32[16,128,8]"];
	"p28.349" [label="p28.349 \n f32[8]"];
	"broadcast.356" [label="broadcast.356 \n f32[16,128,8]"];
	"add.357" [label="add.357 \n f32[16,128,8]"];
	"reshape.334" [label="reshape.334 \n f32[2048,16]"];
	"p27.332" [label="p27.332 \n f32[8,16]"];
	"transpose.333" [label="transpose.333 \n f32[16,8]"];
	"dot.335" [label="dot.335 \n f32[2048,8]"];
	"reshape.336" [label="reshape.336 \n f32[16,128,8]"];
	"p26.330" [label="p26.330 \n f32[8]"];
	"broadcast.337" [label="broadcast.337 \n f32[16,128,8]"];
	"add.338" [label="add.338 \n f32[16,128,8]"];
	"reshape.54" [label="reshape.54 \n f32[16,1,128,8]"];
	"transpose.341" [label="transpose.341 \n f32[16,1,8,128]"];
	"reshape.343" [label="reshape.343 \n f32[16,8,128]"];
	"dot.362" [label="dot.362 \n f32[16,128,128]"];
	"p25.324" [label="p25.324 \n f32[] parameter(25), frontend_attributes="];
	"broadcast.199" [label="broadcast.199 \n f32[16,128,128]"];
	"divide.10" [label="divide.10 \n f32[16,128,128]"];
	"reshape.525" [label="reshape.525 \n f32[16,1,128,128]"];
	"constant.315" [label="constant.315 \n f32[] constant(1), metadata="];
	"broadcast.201" [label="broadcast.201 \n f32[16,128]"];
	"p24.303" [label="p24.303 \n s64[16,128]"];
	"convert.2" [label="convert.2 \n f32[16,128]"];
	"subtract.4" [label="subtract.4 \n f32[16,128]"];
	"p23.302" [label="p23.302 \n f32[] parameter(23), frontend_attributes="];
	"broadcast.203" [label="broadcast.203 \n f32[16,128]"];
	"multiply.23" [label="multiply.23 \n f32[16,128]"];
	"broadcast.368" [label="broadcast.368 \n f32[16,1,128,128]"];
	"add.369" [label="add.369 \n f32[16,1,128,128]"];
	"constant.370" [label="constant.370 \n f32[] constant(-inf), metadata="];
	"reduce.375" [label="reduce.375 \n f32[16,1,128]"];
	"reshape.76" [label="reshape.76 \n f32[16,128]"];
	"broadcast.376" [label="broadcast.376 \n f32[16,1,128,128]"];
	"subtract.377" [label="subtract.377 \n f32[16,1,128,128]"];
	"exponential.378" [label="exponential.378 \n f32[16,1,128,128]"];
	"constant.379" [label="constant.379 \n f32[] constant(0), metadata="];
	"reduce.384" [label="reduce.384 \n f32[16,1,128]"];
	"reshape.77" [label="reshape.77 \n f32[16,128]"];
	"broadcast.385" [label="broadcast.385 \n f32[16,1,128,128]"];
	"divide.386" [label="divide.386 \n f32[16,1,128,128]"];
	"constant.201" [label="constant.201 \n s64[] constant(214013), metadata="];
	"multiply.202" [label="multiply.202 \n s64[] multiply(s64[] %constant.201, s64[] %add.70), metadata="];
	"constant.203" [label="constant.203 \n s64[] constant(2531011), metadata="];
	"add.204" [label="add.204 \n s64[] add(s64[] %multiply.202, s64[] %constant.203), metadata="];
	"convert.273" [label="convert.273 \n u64[] convert(s64[] %add.204), metadata="];
	"reshape.275" [label="reshape.275 \n u64[1]"];
	"constant.44" [label="constant.44 \n u64[1]"];
	"concatenate.277" [label="concatenate.277 \n u64[2]"];
	"constant.281" [label="constant.281 \n u32[] constant(9), metadata="];
	"broadcast.282" [label="broadcast.282 \n u32[16,1,128,128]"];
	"convert.284" [label="convert.284 \n f32[16,1,128,128]"];
	"constant.285" [label="constant.285 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.286" [label="broadcast.286 \n f32[16,1,128,128]"];
	"multiply.290" [label="multiply.290 \n f32[16,1,128,128]"];
	"broadcast.270" [label="broadcast.270 \n f32[16,1,128,128]"];
	"compare.293" [label="compare.293 \n pred[16,1,128,128]"];
	"constant.27" [label="constant.27 \n f32[] constant(1), metadata="];
	"broadcast.69" [label="broadcast.69 \n f32[16,1,128,128]"];
	"broadcast.83" [label="broadcast.83 \n f32[16,1,128,128]"];
	"select.12" [label="select.12 \n f32[16,1,128,128]"];
	"multiply.387" [label="multiply.387 \n f32[16,1,128,128]"];
	"reshape.389" [label="reshape.389 \n f32[16,128,128]"];
	"reshape.258" [label="reshape.258 \n f32[2048,16]"];
	"p22.256" [label="p22.256 \n f32[8,16]"];
	"transpose.257" [label="transpose.257 \n f32[16,8]"];
	"dot.259" [label="dot.259 \n f32[2048,8]"];
	"reshape.260" [label="reshape.260 \n f32[16,128,8]"];
	"p21.254" [label="p21.254 \n f32[8]"];
	"broadcast.261" [label="broadcast.261 \n f32[16,128,8]"];
	"add.262" [label="add.262 \n f32[16,128,8]"];
	"dot.390" [label="dot.390 \n f32[16,128,8]"];
	"reshape.394" [label="reshape.394 \n f32[2048,8]"];
	"p20.247" [label="p20.247 \n f32[16,8]"];
	"transpose.248" [label="transpose.248 \n f32[8,16]"];
	"dot.395" [label="dot.395 \n f32[2048,16]"];
	"reshape.396" [label="reshape.396 \n f32[16,128,16]"];
	"p19.246" [label="p19.246 \n f32[] parameter(19), frontend_attributes="];
	"p18.244" [label="p18.244 \n f32[16]"];
	"broadcast.409" [label="broadcast.409 \n f32[16,128,16]"];
	"add.410" [label="add.410 \n f32[16,128,16]"];
	"constant.205" [label="constant.205 \n s64[] constant(214013), metadata="];
	"multiply.206" [label="multiply.206 \n s64[] multiply(s64[] %constant.205, s64[] %add.204), metadata="];
	"constant.207" [label="constant.207 \n s64[] constant(2531011), metadata="];
	"add.208" [label="add.208 \n s64[] add(s64[] %multiply.206, s64[] %constant.207), metadata="];
	"convert.215" [label="convert.215 \n u64[] convert(s64[] %add.208), metadata="];
	"reshape.217" [label="reshape.217 \n u64[1]"];
	"constant.46" [label="constant.46 \n u64[1]"];
	"concatenate.219" [label="concatenate.219 \n u64[2]"];
	"constant.223" [label="constant.223 \n u32[] constant(9), metadata="];
	"broadcast.224" [label="broadcast.224 \n u32[16,128,16]"];
	"convert.226" [label="convert.226 \n f32[16,128,16]"];
	"constant.227" [label="constant.227 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.228" [label="broadcast.228 \n f32[16,128,16]"];
	"multiply.232" [label="multiply.232 \n f32[16,128,16]"];
	"broadcast.212" [label="broadcast.212 \n f32[16,128,16]"];
	"compare.235" [label="compare.235 \n pred[16,128,16]"];
	"constant.29" [label="constant.29 \n f32[] constant(1), metadata="];
	"broadcast.70" [label="broadcast.70 \n f32[16,128,16]"];
	"broadcast.82" [label="broadcast.82 \n f32[16,128,16]"];
	"select.11" [label="select.11 \n f32[16,128,16]"];
	"multiply.411" [label="multiply.411 \n f32[16,128,16]"];
	"add.412" [label="add.412 \n f32[16,128,16]"];
	"reshape.413" [label="reshape.413 \n f32[1,2048,16]"];
	"constant.55" [label="constant.55 \n f32[] constant(1), metadata="];
	"broadcast.59" [label="broadcast.59 \n f32[2048]"];
	"constant.50" [label="constant.50 \n f32[] constant(0), metadata="];
	"broadcast.54" [label="broadcast.54 \n f32[2048]"];
	"reshape.422" [label="reshape.422 \n f32[16,128,16]"];
	"p7.39" [label="p7.39 \n f32[16]"];
	"broadcast.425" [label="broadcast.425 \n f32[16,128,16]"];
	"multiply.428" [label="multiply.428 \n f32[16,128,16]"];
	"add.430" [label="add.430 \n f32[16,128,16]"];
	"reshape.484" [label="reshape.484 \n f32[2048,16]"];
	"p34.482" [label="p34.482 \n f32[4096,16]"];
	"transpose.483" [label="transpose.483 \n f32[16,4096]"];
	"dot.485" [label="dot.485 \n f32[2048,4096]"];
	"reshape.486" [label="reshape.486 \n f32[16,128,4096]"];
	"p33.480" [label="p33.480 \n f32[4096]"];
	"broadcast.487" [label="broadcast.487 \n f32[16,128,4096]"];
	"add.488" [label="add.488 \n f32[16,128,4096]"];
	"reshape.498" [label="reshape.498 \n f32[2048,4096]"];
	"p32.473" [label="p32.473 \n f32[16,4096]"];
	"transpose.474" [label="transpose.474 \n f32[4096,16]"];
	"dot.499" [label="dot.499 \n f32[2048,16]"];
	"reshape.500" [label="reshape.500 \n f32[16,128,16]"];
	"p31.471" [label="p31.471 \n f32[16]"];
	"broadcast.501" [label="broadcast.501 \n f32[16,128,16]"];
	"add.502" [label="add.502 \n f32[16,128,16]"];
	"constant.432" [label="constant.432 \n s64[] constant(214013), metadata="];
	"multiply.433" [label="multiply.433 \n s64[] multiply(s64[] %constant.432, s64[] %add.208), metadata="];
	"constant.434" [label="constant.434 \n s64[] constant(2531011), metadata="];
	"add.435" [label="add.435 \n s64[] add(s64[] %multiply.433, s64[] %constant.434), metadata="];
	"convert.442" [label="convert.442 \n u64[] convert(s64[] %add.435), metadata="];
	"reshape.444" [label="reshape.444 \n u64[1]"];
	"constant.48" [label="constant.48 \n u64[1]"];
	"concatenate.446" [label="concatenate.446 \n u64[2]"];
	"constant.450" [label="constant.450 \n u32[] constant(9), metadata="];
	"broadcast.451" [label="broadcast.451 \n u32[16,128,16]"];
	"convert.453" [label="convert.453 \n f32[16,128,16]"];
	"constant.454" [label="constant.454 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.455" [label="broadcast.455 \n f32[16,128,16]"];
	"multiply.459" [label="multiply.459 \n f32[16,128,16]"];
	"broadcast.439" [label="broadcast.439 \n f32[16,128,16]"];
	"compare.462" [label="compare.462 \n pred[16,128,16]"];
	"constant.30" [label="constant.30 \n f32[] constant(1), metadata="];
	"broadcast.71" [label="broadcast.71 \n f32[16,128,16]"];
	"broadcast.80" [label="broadcast.80 \n f32[16,128,16]"];
	"select.10" [label="select.10 \n f32[16,128,16]"];
	"multiply.505" [label="multiply.505 \n f32[16,128,16]"];
	"add.506" [label="add.506 \n f32[16,128,16]"];
	"reshape.507" [label="reshape.507 \n f32[1,2048,16]"];
	"constant.28" [label="constant.28 \n f32[] constant(1), metadata="];
	"broadcast.32" [label="broadcast.32 \n f32[2048]"];
	"constant.23" [label="constant.23 \n f32[] constant(0), metadata="];
	"broadcast.27" [label="broadcast.27 \n f32[2048]"];
	"reshape.516" [label="reshape.516 \n f32[16,128,16]"];
	"p6.12" [label="p6.12 \n f32[16]"];
	"broadcast.519" [label="broadcast.519 \n f32[16,128,16]"];
	"multiply.522" [label="multiply.522 \n f32[16,128,16]"];
	"add.524" [label="add.524 \n f32[16,128,16]"];
	"reshape.646" [label="reshape.646 \n f32[2048,16]"];
	"p40.644" [label="p40.644 \n f32[16,16]"];
	"transpose.645" [label="transpose.645 \n f32[16,16]"];
	"dot.647" [label="dot.647 \n f32[2048,16]"];
	"reshape.648" [label="reshape.648 \n f32[16,128,16]"];
	"p39.642" [label="p39.642 \n f32[16]"];
	"broadcast.649" [label="broadcast.649 \n f32[16,128,16]"];
	"add.650" [label="add.650 \n f32[16,128,16]"];
	"reshape.660" [label="reshape.660 \n f32[1,2048,16]"];
	"constant.632" [label="constant.632 \n f32[] constant(1), metadata="];
	"broadcast.636" [label="broadcast.636 \n f32[2048]"];
	"constant.627" [label="constant.627 \n f32[] constant(0), metadata="];
	"broadcast.631" [label="broadcast.631 \n f32[2048]"];
	"reshape.669" [label="reshape.669 \n f32[16,128,16]"];
	"p38.616" [label="p38.616 \n f32[16]"];
	"broadcast.672" [label="broadcast.672 \n f32[16,128,16]"];
	"multiply.675" [label="multiply.675 \n f32[16,128,16]"];
	"add.677" [label="add.677 \n f32[16,128,16]"];
	"reshape.678" [label="reshape.678 \n f32[2048,16]"];
	"transpose.614" [label="transpose.614 \n f32[16,30522]"];
	"dot.679" [label="dot.679 \n f32[2048,30522]"];
	"reshape.680" [label="reshape.680 \n f32[16,128,30522]"];
	"p37.612" [label="p37.612 \n f32[30522]"];
	"broadcast.681" [label="broadcast.681 \n f32[16,128,30522]"];
	"add.682" [label="add.682 \n f32[16,128,30522]"];
	"reshape.685" [label="reshape.685 \n f32[2048,30522]"];
	"reduce.0" [label="reduce.0 \n f32[2048]"];
	"broadcast.0" [label="broadcast.0 \n f32[2048,30522]"];
	"subtract.0" [label="subtract.0 \n f32[2048,30522]"];
	"exponential.0" [label="exponential.0 \n f32[2048,30522]"];
	"reduce.1" [label="reduce.1 \n f32[2048]"];
	"log.0" [label="log.0 \n f32[2048]"];
	"broadcast.1" [label="broadcast.1 \n f32[2048,30522]"];
	"subtract.1" [label="subtract.1 \n f32[2048,30522]"];
	"reshape.1" [label="reshape.1 \n s64[2048]"];
	"broadcast.3" [label="broadcast.3 \n s64[2048,30522]"];
	"iota.5" [label="iota.5 \n s64[2048,30522]"];
	"compare.0" [label="compare.0 \n pred[2048,30522]"];
	"broadcast.6" [label="broadcast.6 \n f32[2048,30522]"];
	"broadcast.7" [label="broadcast.7 \n f32[2048,30522]"];
	"select.0" [label="select.0 \n f32[2048,30522]"];
	"multiply.2" [label="multiply.2 \n f32[2048,30522]"];
	"reduce.2" [label="reduce.2 \n f32[2048]"];
	"broadcast.73" [label="broadcast.73 \n f32[2048]"];
	"select.6" [label="select.6 \n f32[2048]"];
	"reduce.3" [label="reduce.3 \n f32[] reduce(f32[2048]"];
	"convert.0" [label="convert.0 \n f32[2048]"];
	"reduce.4" [label="reduce.4 \n f32[] reduce(f32[2048]"];
	"negate.0" [label="negate.0 \n f32[] negate(f32[] %divide.0), metadata="];
	"p1.4" [label="p1.4 \n s64[16]"];
	"broadcast.33" [label="broadcast.33 \n s64[16]"];
	"compare.4" [label="compare.4 \n pred[16]"];
	"slice.526" [label="slice.526 \n f32[16,1,16]"];
	"reshape.527" [label="reshape.527 \n f32[16,16]"];
	"p5.9" [label="p5.9 \n f32[16,16]"];
	"transpose.10" [label="transpose.10 \n f32[16,16]"];
	"dot.528" [label="dot.528 \n f32[16,16]"];
	"p4.8" [label="p4.8 \n f32[16]"];
	"broadcast.532" [label="broadcast.532 \n f32[16,16]"];
	"add.533" [label="add.533 \n f32[16,16]"];
	"tanh.534" [label="tanh.534 \n f32[16,16]"];
	"p3.6" [label="p3.6 \n f32[2,16]"];
	"transpose.7" [label="transpose.7 \n f32[16,2]"];
	"dot.535" [label="dot.535 \n f32[16,2]"];
	"p2.5" [label="p2.5 \n f32[2]"];
	"broadcast.539" [label="broadcast.539 \n f32[16,2]"];
	"add.540" [label="add.540 \n f32[16,2]"];
	"reduce.6" [label="reduce.6 \n f32[16]"];
	"broadcast.19" [label="broadcast.19 \n f32[16,2]"];
	"subtract.2" [label="subtract.2 \n f32[16,2]"];
	"exponential.2" [label="exponential.2 \n f32[16,2]"];
	"reduce.7" [label="reduce.7 \n f32[16]"];
	"log.1" [label="log.1 \n f32[16]"];
	"broadcast.21" [label="broadcast.21 \n f32[16,2]"];
	"subtract.3" [label="subtract.3 \n f32[16,2]"];
	"broadcast.24" [label="broadcast.24 \n s64[16,2]"];
	"iota.7" [label="iota.7 \n s64[16,2]"];
	"compare.3" [label="compare.3 \n pred[16,2]"];
	"broadcast.29" [label="broadcast.29 \n f32[16,2]"];
	"broadcast.31" [label="broadcast.31 \n f32[16,2]"];
	"select.2" [label="select.2 \n f32[16,2]"];
	"multiply.7" [label="multiply.7 \n f32[16,2]"];
	"reduce.8" [label="reduce.8 \n f32[16]"];
	"broadcast.75" [label="broadcast.75 \n f32[16]"];
	"select.7" [label="select.7 \n f32[16]"];
	"reduce.9" [label="reduce.9 \n f32[] reduce(f32[16]"];
	"convert.1" [label="convert.1 \n f32[16]"];
	"reduce.10" [label="reduce.10 \n f32[] reduce(f32[16]"];
	"negate.2" [label="negate.2 \n f32[] negate(f32[] %divide.2), metadata="];
	"add.749" [label="add.749 \n f32[] add(f32[] %negate.0, f32[] %negate.2), metadata="];
	"p0.2" [label="p0.2 \n f32[] parameter(0), frontend_attributes="];
	"divide.750" [label="divide.750 \n f32[] divide(f32[] %add.749, f32[] %p0.2), metadata="];
	"reshape.157" [label="reshape.157 \n f32[1]"];
	"add.754" [label="add.754 \n f32[1]"];
	"p43.806" [label="p43.806 \n f32[2]"];
	"exponential.3" [label="exponential.3 \n f32[16,2]"];
	"constant.760" [label="constant.760 \n f32[] constant(1), metadata="];
	"reduce.11" [label="reduce.11 \n f32[] reduce(f32[16]"];
	"broadcast.34" [label="broadcast.34 \n f32[16]"];
	"broadcast.76" [label="broadcast.76 \n f32[16]"];
	"select.8" [label="select.8 \n f32[16]"];
	"broadcast.36" [label="broadcast.36 \n f32[16,2]"];
	"multiply.10" [label="multiply.10 \n f32[16,2]"];
	"broadcast.39" [label="broadcast.39 \n s64[16,2]"];
	"iota.9" [label="iota.9 \n s64[16,2]"];
	"compare.5" [label="compare.5 \n pred[16,2]"];
	"broadcast.43" [label="broadcast.43 \n f32[16,2]"];
	"broadcast.45" [label="broadcast.45 \n f32[16,2]"];
	"select.3" [label="select.3 \n f32[16,2]"];
	"add.1" [label="add.1 \n f32[16,2]"];
	"constant.796" [label="constant.796 \n f32[] constant(0), metadata="];
	"reduce.802" [label="reduce.802 \n f32[2]"];
	"add.807" [label="add.807 \n f32[2]"];
	"p44.817" [label="p44.817 \n f32[2,16]"];
	"transpose.813" [label="transpose.813 \n f32[16,16]"];
	"add.818" [label="add.818 \n f32[2,16]"];
	"p45.868" [label="p45.868 \n f32[30522]"];
	"exponential.1" [label="exponential.1 \n f32[2048,30522]"];
	"reduce.5" [label="reduce.5 \n f32[] reduce(f32[2048]"];
	"broadcast.9" [label="broadcast.9 \n f32[2048]"];
	"broadcast.77" [label="broadcast.77 \n f32[2048]"];
	"select.9" [label="select.9 \n f32[2048]"];
	"broadcast.10" [label="broadcast.10 \n f32[2048,30522]"];
	"multiply.5" [label="multiply.5 \n f32[2048,30522]"];
	"reshape.4" [label="reshape.4 \n s64[2048]"];
	"broadcast.12" [label="broadcast.12 \n s64[2048,30522]"];
	"iota.11" [label="iota.11 \n s64[2048,30522]"];
	"compare.2" [label="compare.2 \n pred[2048,30522]"];
	"broadcast.16" [label="broadcast.16 \n f32[2048,30522]"];
	"broadcast.18" [label="broadcast.18 \n f32[2048,30522]"];
	"select.1" [label="select.1 \n f32[2048,30522]"];
	"add.0" [label="add.0 \n f32[2048,30522]"];
	"constant.858" [label="constant.858 \n f32[] constant(0), metadata="];
	"reduce.864" [label="reduce.864 \n f32[30522]"];
	"add.869" [label="add.869 \n f32[30522]"];
	"p46.891" [label="p46.891 \n f32[16]"];
	"dot.879" [label="dot.879 \n f32[2048,16]"];
	"constant.881" [label="constant.881 \n f32[] constant(0), metadata="];
	"reduce.887" [label="reduce.887 \n f32[16]"];
	"add.892" [label="add.892 \n f32[16]"];
	"p47.915" [label="p47.915 \n f32[16]"];
	"reshape.880" [label="reshape.880 \n f32[16,128,16]"];
	"multiply.904" [label="multiply.904 \n f32[16,128,16]"];
	"constant.905" [label="constant.905 \n f32[] constant(0), metadata="];
	"reduce.911" [label="reduce.911 \n f32[16]"];
	"add.916" [label="add.916 \n f32[16]"];
	"p48.968" [label="p48.968 \n f32[16]"];
	"constant.922" [label="constant.922 \n f32[] constant(1), metadata="];
	"broadcast.926" [label="broadcast.926 \n f32[2048]"];
	"constant.665" [label="constant.665 \n f32[] constant(1e-12), metadata="];
	"broadcast.666" [label="broadcast.666 \n f32[2048]"];
	"add.667" [label="add.667 \n f32[2048]"];
	"multiply.940" [label="multiply.940 \n f32[2048]"];
	"constant.52" [label="constant.52 \n f32[] constant(-1e-12), metadata="];
	"broadcast.78" [label="broadcast.78 \n f32[2048]"];
	"add.8" [label="add.8 \n f32[2048]"];
	"broadcast.933" [label="broadcast.933 \n f32[16,128,16]"];
	"multiply.934" [label="multiply.934 \n f32[16,128,16]"];
	"reshape.935" [label="reshape.935 \n f32[1,2048,16]"];
	"reshape.947" [label="reshape.947 \n f32[16,128,16]"];
	"multiply.6" [label="multiply.6 \n f32[16,128,16]"];
	"constant.958" [label="constant.958 \n f32[] constant(0), metadata="];
	"reduce.964" [label="reduce.964 \n f32[16]"];
	"add.969" [label="add.969 \n f32[16]"];
	"p49.981" [label="p49.981 \n f32[16,16]"];
	"reshape.975" [label="reshape.975 \n f32[2048,16]"];
	"reshape.976" [label="reshape.976 \n f32[2048,16]"];
	"transpose.977" [label="transpose.977 \n f32[16,2048]"];
	"dot.1" [label="dot.1 \n f32[16,16]"];
	"add.982" [label="add.982 \n f32[16,16]"];
	"p50.1020" [label="p50.1020 \n f32[16]"];
	"dot.1008" [label="dot.1008 \n f32[16,16]"];
	"constant.1000" [label="constant.1000 \n f32[] constant(1), metadata="];
	"broadcast.1004" [label="broadcast.1004 \n f32[16,16]"];
	"multiply.999" [label="multiply.999 \n f32[16,16]"];
	"subtract.1005" [label="subtract.1005 \n f32[16,16]"];
	"multiply.1009" [label="multiply.1009 \n f32[16,16]"];
	"constant.1010" [label="constant.1010 \n f32[] constant(0), metadata="];
	"reduce.1016" [label="reduce.1016 \n f32[16]"];
	"add.1021" [label="add.1021 \n f32[16]"];
	"p51.1034" [label="p51.1034 \n f32[16,16]"];
	"slice.1028" [label="slice.1028 \n f32[16,1,16]"];
	"reshape.1029" [label="reshape.1029 \n f32[16,16]"];
	"transpose.1030" [label="transpose.1030 \n f32[16,16]"];
	"dot.2" [label="dot.2 \n f32[16,16]"];
	"add.1035" [label="add.1035 \n f32[16,16]"];
	"p52.1080" [label="p52.1080 \n f32[16]"];
	"dot.1067" [label="dot.1067 \n f32[2048,16]"];
	"reshape.1068" [label="reshape.1068 \n f32[16,128,16]"];
	"dot.1048" [label="dot.1048 \n f32[16,16]"];
	"reshape.1049" [label="reshape.1049 \n f32[16,1,16]"];
	"constant.53" [label="constant.53 \n f32[] constant(0), metadata="];
	"add.1069" [label="add.1069 \n f32[16,128,16]"];
	"constant.1070" [label="constant.1070 \n f32[] constant(0), metadata="];
	"reduce.1076" [label="reduce.1076 \n f32[16]"];
	"add.1081" [label="add.1081 \n f32[16]"];
	"p53.1104" [label="p53.1104 \n f32[16]"];
	"multiply.1093" [label="multiply.1093 \n f32[16,128,16]"];
	"constant.1094" [label="constant.1094 \n f32[] constant(0), metadata="];
	"reduce.1100" [label="reduce.1100 \n f32[16]"];
	"add.1105" [label="add.1105 \n f32[16]"];
	"p54.1148" [label="p54.1148 \n f32[16]"];
	"constant.1111" [label="constant.1111 \n f32[] constant(1), metadata="];
	"broadcast.1115" [label="broadcast.1115 \n f32[2048]"];
	"constant.512" [label="constant.512 \n f32[] constant(1e-12), metadata="];
	"broadcast.513" [label="broadcast.513 \n f32[2048]"];
	"add.514" [label="add.514 \n f32[2048]"];
	"sqrt.1" [label="sqrt.1 \n f32[2048]"];
	"multiply.1129" [label="multiply.1129 \n f32[2048]"];
	"constant.54" [label="constant.54 \n f32[] constant(-1e-12), metadata="];
	"broadcast.79" [label="broadcast.79 \n f32[2048]"];
	"add.9" [label="add.9 \n f32[2048]"];
	"broadcast.1122" [label="broadcast.1122 \n f32[16,128,16]"];
	"multiply.1123" [label="multiply.1123 \n f32[16,128,16]"];
	"reshape.1124" [label="reshape.1124 \n f32[1,2048,16]"];
	"reshape.1136" [label="reshape.1136 \n f32[16,128,16]"];
	"multiply.1137" [label="multiply.1137 \n f32[16,128,16]"];
	"constant.1138" [label="constant.1138 \n f32[] constant(0), metadata="];
	"reduce.1144" [label="reduce.1144 \n f32[16]"];
	"add.1149" [label="add.1149 \n f32[16]"];
	"p55.1161" [label="p55.1161 \n f32[16,4096]"];
	"reshape.1155" [label="reshape.1155 \n f32[2048,16]"];
	"reshape.1156" [label="reshape.1156 \n f32[2048,4096]"];
	"transpose.1157" [label="transpose.1157 \n f32[4096,2048]"];
	"dot.3" [label="dot.3 \n f32[16,4096]"];
	"add.1162" [label="add.1162 \n f32[16,4096]"];
	"p56.1192" [label="p56.1192 \n f32[4096]"];
	"dot.1170" [label="dot.1170 \n f32[2048,4096]"];
	"reshape.1171" [label="reshape.1171 \n f32[16,128,4096]"];
	"multiply.11" [label="multiply.11 \n f32[16,128,4096]"];
	"constant.1182" [label="constant.1182 \n f32[] constant(0), metadata="];
	"reduce.1188" [label="reduce.1188 \n f32[4096]"];
	"add.1193" [label="add.1193 \n f32[4096]"];
	"p57.1205" [label="p57.1205 \n f32[4096,16]"];
	"reshape.1199" [label="reshape.1199 \n f32[2048,4096]"];
	"reshape.1200" [label="reshape.1200 \n f32[2048,16]"];
	"transpose.1201" [label="transpose.1201 \n f32[16,2048]"];
	"dot.4" [label="dot.4 \n f32[4096,16]"];
	"add.1206" [label="add.1206 \n f32[4096,16]"];
	"p58.1233" [label="p58.1233 \n f32[16]"];
	"dot.1219" [label="dot.1219 \n f32[2048,16]"];
	"reshape.1220" [label="reshape.1220 \n f32[16,128,16]"];
	"add.1222" [label="add.1222 \n f32[16,128,16]"];
	"constant.1223" [label="constant.1223 \n f32[] constant(0), metadata="];
	"reduce.1229" [label="reduce.1229 \n f32[16]"];
	"add.1234" [label="add.1234 \n f32[16]"];
	"p59.1257" [label="p59.1257 \n f32[16]"];
	"multiply.1246" [label="multiply.1246 \n f32[16,128,16]"];
	"constant.1247" [label="constant.1247 \n f32[] constant(0), metadata="];
	"reduce.1253" [label="reduce.1253 \n f32[16]"];
	"add.1258" [label="add.1258 \n f32[16]"];
	"p60.1301" [label="p60.1301 \n f32[16]"];
	"constant.1264" [label="constant.1264 \n f32[] constant(1), metadata="];
	"broadcast.1268" [label="broadcast.1268 \n f32[2048]"];
	"constant.418" [label="constant.418 \n f32[] constant(1e-12), metadata="];
	"broadcast.419" [label="broadcast.419 \n f32[2048]"];
	"add.420" [label="add.420 \n f32[2048]"];
	"sqrt.2" [label="sqrt.2 \n f32[2048]"];
	"multiply.1282" [label="multiply.1282 \n f32[2048]"];
	"constant.56" [label="constant.56 \n f32[] constant(-1e-12), metadata="];
	"broadcast.81" [label="broadcast.81 \n f32[2048]"];
	"add.10" [label="add.10 \n f32[2048]"];
	"broadcast.1275" [label="broadcast.1275 \n f32[16,128,16]"];
	"multiply.1276" [label="multiply.1276 \n f32[16,128,16]"];
	"reshape.1277" [label="reshape.1277 \n f32[1,2048,16]"];
	"reshape.1289" [label="reshape.1289 \n f32[16,128,16]"];
	"multiply.1290" [label="multiply.1290 \n f32[16,128,16]"];
	"constant.1291" [label="constant.1291 \n f32[] constant(0), metadata="];
	"reduce.1297" [label="reduce.1297 \n f32[16]"];
	"add.1302" [label="add.1302 \n f32[16]"];
	"p61.1316" [label="p61.1316 \n f32[16,8]"];
	"reshape.1312" [label="reshape.1312 \n f32[2048,16]"];
	"transpose.1313" [label="transpose.1313 \n f32[16,2048]"];
	"reshape.1311" [label="reshape.1311 \n f32[2048,8]"];
	"dot.1314" [label="dot.1314 \n f32[16,8]"];
	"add.1317" [label="add.1317 \n f32[16,8]"];
	"p62.1345" [label="p62.1345 \n f32[8]"];
	"reshape.1329" [label="reshape.1329 \n f32[16,128,128]"];
	"transpose.1330" [label="transpose.1330 \n f32[16,128,128]"];
	"reshape.1323" [label="reshape.1323 \n f32[2048,16]"];
	"dot.1324" [label="dot.1324 \n f32[2048,8]"];
	"reshape.1328" [label="reshape.1328 \n f32[16,128,8]"];
	"dot.1331" [label="dot.1331 \n f32[16,128,8]"];
	"constant.1335" [label="constant.1335 \n f32[] constant(0), metadata="];
	"reduce.1341" [label="reduce.1341 \n f32[8]"];
	"add.1346" [label="add.1346 \n f32[8]"];
	"p63.1360" [label="p63.1360 \n f32[8,16]"];
	"reshape.1356" [label="reshape.1356 \n f32[2048,8]"];
	"transpose.1357" [label="transpose.1357 \n f32[8,2048]"];
	"reshape.1352" [label="reshape.1352 \n f32[2048,16]"];
	"dot.1358" [label="dot.1358 \n f32[8,16]"];
	"add.1361" [label="add.1361 \n f32[8,16]"];
	"p64.1402" [label="p64.1402 \n f32[8]"];
	"transpose.1386" [label="transpose.1386 \n f32[16,8,128]"];
	"transpose.1368" [label="transpose.1368 \n f32[16,8,128]"];
	"dot.1369" [label="dot.1369 \n f32[16,128,128]"];
	"reshape.1370" [label="reshape.1370 \n f32[16,1,128,128]"];
	"multiply.1371" [label="multiply.1371 \n f32[16,1,128,128]"];
	"multiply.1372" [label="multiply.1372 \n f32[16,1,128,128]"];
	"constant.1373" [label="constant.1373 \n f32[] constant(0), metadata="];
	"reduce.1378" [label="reduce.1378 \n f32[16,1,128]"];
	"reshape.293" [label="reshape.293 \n f32[16,128]"];
	"broadcast.1379" [label="broadcast.1379 \n f32[16,1,128,128]"];
	"subtract.1380" [label="subtract.1380 \n f32[16,1,128,128]"];
	"multiply.1381" [label="multiply.1381 \n f32[16,1,128,128]"];
	"broadcast.1382" [label="broadcast.1382 \n f32[16,1,128,128]"];
	"divide.1383" [label="divide.1383 \n f32[16,1,128,128]"];
	"reshape.1384" [label="reshape.1384 \n f32[16,128,128]"];
	"dot.1387" [label="dot.1387 \n f32[16,8,128]"];
	"constant.1392" [label="constant.1392 \n f32[] constant(0), metadata="];
	"reduce.1398" [label="reduce.1398 \n f32[8]"];
	"add.1403" [label="add.1403 \n f32[8]"];
	"p65.1418" [label="p65.1418 \n f32[8,16]"];
	"reshape.1410" [label="reshape.1410 \n f32[16,1,8,128]"];
	"transpose.1412" [label="transpose.1412 \n f32[16,128,1,8]"];
	"reshape.1414" [label="reshape.1414 \n f32[2048,8]"];
	"transpose.1415" [label="transpose.1415 \n f32[8,2048]"];
	"reshape.1409" [label="reshape.1409 \n f32[2048,16]"];
	"dot.1416" [label="dot.1416 \n f32[8,16]"];
	"add.1419" [label="add.1419 \n f32[8,16]"];
	"p66.1441" [label="p66.1441 \n f32[8]"];
	"reshape.1425" [label="reshape.1425 \n f32[16,8,128]"];
	"transpose.1426" [label="transpose.1426 \n f32[16,128,8]"];
	"dot.1427" [label="dot.1427 \n f32[16,128,8]"];
	"constant.1431" [label="constant.1431 \n f32[] constant(0), metadata="];
	"reduce.1437" [label="reduce.1437 \n f32[8]"];
	"add.1442" [label="add.1442 \n f32[8]"];
	"p67.1456" [label="p67.1456 \n f32[8,16]"];
	"reshape.1452" [label="reshape.1452 \n f32[2048,8]"];
	"transpose.1453" [label="transpose.1453 \n f32[8,2048]"];
	"reshape.1448" [label="reshape.1448 \n f32[2048,16]"];
	"dot.1454" [label="dot.1454 \n f32[8,16]"];
	"add.1457" [label="add.1457 \n f32[8,16]"];
	"p68.1550" [label="p68.1550 \n f32[16]"];
	"reshape.1471" [label="reshape.1471 \n f32[2048,8]"];
	"dot.1472" [label="dot.1472 \n f32[2048,16]"];
	"reshape.1473" [label="reshape.1473 \n f32[16,128,16]"];
	"add.1536" [label="add.1536 \n f32[16,128,16]"];
	"reshape.1484" [label="reshape.1484 \n f32[16,1,8,128]"];
	"transpose.1486" [label="transpose.1486 \n f32[16,128,1,8]"];
	"reshape.1488" [label="reshape.1488 \n f32[2048,8]"];
	"dot.1489" [label="dot.1489 \n f32[2048,16]"];
	"reshape.1490" [label="reshape.1490 \n f32[16,128,16]"];
	"add.1537" [label="add.1537 \n f32[16,128,16]"];
	"reshape.1504" [label="reshape.1504 \n f32[2048,8]"];
	"dot.1505" [label="dot.1505 \n f32[2048,16]"];
	"reshape.1506" [label="reshape.1506 \n f32[16,128,16]"];
	"add.1538" [label="add.1538 \n f32[16,128,16]"];
	"multiply.1539" [label="multiply.1539 \n f32[16,128,16]"];
	"constant.1540" [label="constant.1540 \n f32[] constant(0), metadata="];
	"reduce.1546" [label="reduce.1546 \n f32[16]"];
	"add.1551" [label="add.1551 \n f32[16]"];
	"p69.1574" [label="p69.1574 \n f32[16]"];
	"multiply.1563" [label="multiply.1563 \n f32[16,128,16]"];
	"constant.1564" [label="constant.1564 \n f32[] constant(0), metadata="];
	"reduce.1570" [label="reduce.1570 \n f32[16]"];
	"add.1575" [label="add.1575 \n f32[16]"];
	"p70.1647" [label="p70.1647 \n f32[512,16]"];
	"broadcast.46" [label="broadcast.46 \n f32[512,16]"];
	"slice.1582" [label="slice.1582 \n s64[1,128]"];
	"reshape.12" [label="reshape.12 \n s64[128]"];
	"broadcast.48" [label="broadcast.48 \n s64[128]"];
	"compare.6" [label="compare.6 \n pred[128]"];
	"broadcast.50" [label="broadcast.50 \n s64[128]"];
	"add.2" [label="add.2 \n s64[128]"];
	"select.4" [label="select.4 \n s64[128]"];
	"reshape.13" [label="reshape.13 \n s64[128,1]"];
	"constant.1583" [label="constant.1583 \n f32[] constant(1), metadata="];
	"broadcast.1587" [label="broadcast.1587 \n f32[2048]"];
	"constant.186" [label="constant.186 \n f32[] constant(1e-12), metadata="];
	"broadcast.187" [label="broadcast.187 \n f32[2048]"];
	"add.188" [label="add.188 \n f32[2048]"];
	"sqrt.3" [label="sqrt.3 \n f32[2048]"];
	"multiply.1601" [label="multiply.1601 \n f32[2048]"];
	"constant.57" [label="constant.57 \n f32[] constant(-1e-12), metadata="];
	"broadcast.87" [label="broadcast.87 \n f32[2048]"];
	"add.11" [label="add.11 \n f32[2048]"];
	"broadcast.1594" [label="broadcast.1594 \n f32[16,128,16]"];
	"multiply.1595" [label="multiply.1595 \n f32[16,128,16]"];
	"reshape.1596" [label="reshape.1596 \n f32[1,2048,16]"];
	"reshape.1608" [label="reshape.1608 \n f32[16,128,16]"];
	"constant.1609" [label="constant.1609 \n f32[] constant(0), metadata="];
	"reduce.1615" [label="reduce.1615 \n f32[128,16]"];
	"scatter.0" [label="scatter.0 \n f32[512,16]"];
	"add.1648" [label="add.1648 \n f32[512,16]"];
	"p71.1684" [label="p71.1684 \n f32[2,16]"];
	"broadcast.51" [label="broadcast.51 \n f32[2,16]"];
	"reshape.17" [label="reshape.17 \n s64[2048]"];
	"broadcast.53" [label="broadcast.53 \n s64[2048]"];
	"compare.7" [label="compare.7 \n pred[2048]"];
	"broadcast.55" [label="broadcast.55 \n s64[2048]"];
	"add.3" [label="add.3 \n s64[2048]"];
	"select.5" [label="select.5 \n s64[2048]"];
	"reshape.18" [label="reshape.18 \n s64[2048,1]"];
	"reshape.20" [label="reshape.20 \n f32[2048,16]"];
	"scatter.1" [label="scatter.1 \n f32[2,16]"];
	"add.1685" [label="add.1685 \n f32[2,16]"];
	"p73.1751" [label="p73.1751 \n f32[30522,16]"];
	"reshape.1745" [label="reshape.1745 \n f32[2048,16]"];
	"transpose.1746" [label="transpose.1746 \n f32[16,2048]"];
	"dot.5" [label="dot.5 \n f32[30522,16]"];
	"constant.1725" [label="constant.1725 \n f32[] constant(0), metadata="];
	"broadcast.1729" [label="broadcast.1729 \n f32[30522,16]"];
	"reshape.1704" [label="reshape.1704 \n s64[2048]"];
	"constant.1719" [label="constant.1719 \n s64[] constant(0), metadata="];
	"broadcast.1720" [label="broadcast.1720 \n s64[2048]"];
	"compare.1721" [label="compare.1721 \n pred[2048]"];
	"p72.1713" [label="p72.1713 \n s64[] parameter(72), frontend_attributes="];
	"broadcast.1717" [label="broadcast.1717 \n s64[2048]"];
	"add.1718" [label="add.1718 \n s64[2048]"];
	"select.1722" [label="select.1722 \n s64[2048]"];
	"reshape.1723" [label="reshape.1723 \n s64[2048,1]"];
	"convert.1705" [label="convert.1705 \n f32[2048]"];
	"constant.1703" [label="constant.1703 \n f32[] constant(0), metadata="];
	"broadcast.1706" [label="broadcast.1706 \n f32[2048]"];
	"compare.1707" [label="compare.1707 \n pred[2048]"];
	"broadcast.1711" [label="broadcast.1711 \n pred[2048,16]"];
	"reshape.1702" [label="reshape.1702 \n f32[2048,16]"];
	"constant.1696" [label="constant.1696 \n f32[] constant(0), metadata="];
	"broadcast.1700" [label="broadcast.1700 \n f32[2048,16]"];
	"select.1712" [label="select.1712 \n f32[2048,16]"];
	"scatter.1735" [label="scatter.1735 \n f32[30522,16]"];
	"add.1749" [label="add.1749 \n f32[30522,16]"];
	"add.1752" [label="add.1752 \n f32[30522,16]"];
	"tuple.1754" [label="tuple.1754 \n (f32[1]"]; 
 	"constant.6" -> "broadcast.196";
	"p36.605" -> "compare.8";
	"broadcast.196" -> "compare.8";
	"compare.8" -> "reshape.530";
	"p41.670" -> "broadcast.676";
	"p35.517" -> "broadcast.523";
	"p30.423" -> "broadcast.429";
	"p17.191" -> "broadcast.197";
	"p16.165" -> "custom-call.10";
	"p15.163" -> "convert.6";
	"convert.6" -> "reshape.384";
	"custom-call.10" -> "gather.174";
	"reshape.384" -> "gather.174";
	"p14.151" -> "custom-call.11";
	"p13.149" -> "convert.5";
	"convert.5" -> "reshape.383";
	"custom-call.11" -> "gather.160";
	"reshape.383" -> "gather.160";
	"gather.174" -> "add.12";
	"gather.160" -> "add.12";
	"add.12" -> "reshape.519";
	"p12.132" -> "custom-call.12";
	"p11.128" -> "convert.4";
	"convert.4" -> "slice.0";
	"slice.0" -> "reshape.382";
	"custom-call.12" -> "gather.141";
	"reshape.382" -> "gather.141";
	"gather.141" -> "broadcast.179";
	"reshape.519" -> "add.180";
	"broadcast.179" -> "add.180";
	"add.180" -> "reshape.181";
	"constant.118" -> "broadcast.122";
	"constant.113" -> "broadcast.117";
	"reshape.181" -> "batch-norm-training.182";
	"broadcast.122" -> "batch-norm-training.182";
	"broadcast.117" -> "batch-norm-training.182";
	"batch-norm-training.182" -> "get-tuple-element.183";
	"get-tuple-element.183" -> "reshape.190";
	"p10.102" -> "broadcast.193";
	"reshape.190" -> "multiply.196";
	"broadcast.193" -> "multiply.196";
	"broadcast.197" -> "add.198";
	"multiply.196" -> "add.198";
	"constant.67" -> "multiply.68";
	"p9.66" -> "multiply.68";
	"multiply.68" -> "add.70";
	"constant.69" -> "add.70";
	"add.70" -> "convert.77";
	"convert.77" -> "reshape.79";
	"reshape.79" -> "concatenate.81";
	"constant.43" -> "concatenate.81";
	"concatenate.81" -> "rng-bit-generator.82";
	"rng-bit-generator.82" -> "get-tuple-element.83";
	"constant.85" -> "broadcast.86";
	"get-tuple-element.83" -> "shift-right-logical.87";
	"broadcast.86" -> "shift-right-logical.87";
	"shift-right-logical.87" -> "convert.88";
	"constant.89" -> "broadcast.90";
	"convert.88" -> "multiply.94";
	"broadcast.90" -> "multiply.94";
	"p8.65" -> "broadcast.74";
	"multiply.94" -> "compare.97";
	"broadcast.74" -> "compare.97";
	"constant.26" -> "divide.4";
	"p8.65" -> "divide.4";
	"divide.4" -> "broadcast.58";
	"constant.41" -> "broadcast.85";
	"compare.97" -> "select.13";
	"broadcast.58" -> "select.13";
	"broadcast.85" -> "select.13";
	"add.198" -> "multiply.200";
	"select.13" -> "multiply.200";
	"multiply.200" -> "reshape.353";
	"p29.351" -> "transpose.352";
	"reshape.353" -> "dot.354";
	"transpose.352" -> "dot.354";
	"dot.354" -> "reshape.355";
	"p28.349" -> "broadcast.356";
	"reshape.355" -> "add.357";
	"broadcast.356" -> "add.357";
	"multiply.200" -> "reshape.334";
	"p27.332" -> "transpose.333";
	"reshape.334" -> "dot.335";
	"transpose.333" -> "dot.335";
	"dot.335" -> "reshape.336";
	"p26.330" -> "broadcast.337";
	"reshape.336" -> "add.338";
	"broadcast.337" -> "add.338";
	"add.338" -> "reshape.54";
	"reshape.54" -> "transpose.341";
	"transpose.341" -> "reshape.343";
	"add.357" -> "dot.362";
	"reshape.343" -> "dot.362";
	"p25.324" -> "broadcast.199";
	"dot.362" -> "divide.10";
	"broadcast.199" -> "divide.10";
	"divide.10" -> "reshape.525";
	"constant.315" -> "broadcast.201";
	"p24.303" -> "convert.2";
	"broadcast.201" -> "subtract.4";
	"convert.2" -> "subtract.4";
	"p23.302" -> "broadcast.203";
	"subtract.4" -> "multiply.23";
	"broadcast.203" -> "multiply.23";
	"multiply.23" -> "broadcast.368";
	"reshape.525" -> "add.369";
	"broadcast.368" -> "add.369";
	"add.369" -> "reduce.375";
	"constant.370" -> "reduce.375";
	"MaxComputation.371" -> "reduce.375";
	"reduce.375" -> "reshape.76";
	"reshape.76" -> "broadcast.376";
	"add.369" -> "subtract.377";
	"broadcast.376" -> "subtract.377";
	"subtract.377" -> "exponential.378";
	"exponential.378" -> "reduce.384";
	"constant.379" -> "reduce.384";
	"AddComputation.380" -> "reduce.384";
	"reduce.384" -> "reshape.77";
	"reshape.77" -> "broadcast.385";
	"exponential.378" -> "divide.386";
	"broadcast.385" -> "divide.386";
	"constant.201" -> "multiply.202";
	"add.70" -> "multiply.202";
	"multiply.202" -> "add.204";
	"constant.203" -> "add.204";
	"add.204" -> "convert.273";
	"convert.273" -> "reshape.275";
	"reshape.275" -> "concatenate.277";
	"constant.44" -> "concatenate.277";
	"concatenate.277" -> "rng-bit-generator.278";
	"rng-bit-generator.278" -> "get-tuple-element.279";
	"constant.281" -> "broadcast.282";
	"get-tuple-element.279" -> "shift-right-logical.283";
	"broadcast.282" -> "shift-right-logical.283";
	"shift-right-logical.283" -> "convert.284";
	"constant.285" -> "broadcast.286";
	"convert.284" -> "multiply.290";
	"broadcast.286" -> "multiply.290";
	"p8.65" -> "broadcast.270";
	"multiply.290" -> "compare.293";
	"broadcast.270" -> "compare.293";
	"constant.27" -> "divide.5";
	"p8.65" -> "divide.5";
	"divide.5" -> "broadcast.69";
	"constant.39" -> "broadcast.83";
	"compare.293" -> "select.12";
	"broadcast.69" -> "select.12";
	"broadcast.83" -> "select.12";
	"divide.386" -> "multiply.387";
	"select.12" -> "multiply.387";
	"multiply.387" -> "reshape.389";
	"multiply.200" -> "reshape.258";
	"p22.256" -> "transpose.257";
	"reshape.258" -> "dot.259";
	"transpose.257" -> "dot.259";
	"dot.259" -> "reshape.260";
	"p21.254" -> "broadcast.261";
	"reshape.260" -> "add.262";
	"broadcast.261" -> "add.262";
	"reshape.389" -> "dot.390";
	"add.262" -> "dot.390";
	"dot.390" -> "reshape.394";
	"p20.247" -> "transpose.248";
	"reshape.394" -> "dot.395";
	"transpose.248" -> "dot.395";
	"dot.395" -> "reshape.396";
	"reshape.396" -> "all-reduce.404";
	"p19.246" -> "all-reduce.404";
	"AddComputation.400" -> "all-reduce.404";
	"all-reduce.404" -> "get-tuple-element.405";
	"p18.244" -> "broadcast.409";
	"get-tuple-element.405" -> "add.410";
	"broadcast.409" -> "add.410";
	"constant.205" -> "multiply.206";
	"add.204" -> "multiply.206";
	"multiply.206" -> "add.208";
	"constant.207" -> "add.208";
	"add.208" -> "convert.215";
	"convert.215" -> "reshape.217";
	"reshape.217" -> "concatenate.219";
	"constant.46" -> "concatenate.219";
	"concatenate.219" -> "rng-bit-generator.220";
	"rng-bit-generator.220" -> "get-tuple-element.221";
	"constant.223" -> "broadcast.224";
	"get-tuple-element.221" -> "shift-right-logical.225";
	"broadcast.224" -> "shift-right-logical.225";
	"shift-right-logical.225" -> "convert.226";
	"constant.227" -> "broadcast.228";
	"convert.226" -> "multiply.232";
	"broadcast.228" -> "multiply.232";
	"p8.65" -> "broadcast.212";
	"multiply.232" -> "compare.235";
	"broadcast.212" -> "compare.235";
	"constant.29" -> "divide.6";
	"p8.65" -> "divide.6";
	"divide.6" -> "broadcast.70";
	"constant.37" -> "broadcast.82";
	"compare.235" -> "select.11";
	"broadcast.70" -> "select.11";
	"broadcast.82" -> "select.11";
	"add.410" -> "multiply.411";
	"select.11" -> "multiply.411";
	"multiply.411" -> "add.412";
	"multiply.200" -> "add.412";
	"add.412" -> "reshape.413";
	"constant.55" -> "broadcast.59";
	"constant.50" -> "broadcast.54";
	"reshape.413" -> "batch-norm-training.414";
	"broadcast.59" -> "batch-norm-training.414";
	"broadcast.54" -> "batch-norm-training.414";
	"batch-norm-training.414" -> "get-tuple-element.415";
	"get-tuple-element.415" -> "reshape.422";
	"p7.39" -> "broadcast.425";
	"reshape.422" -> "multiply.428";
	"broadcast.425" -> "multiply.428";
	"broadcast.429" -> "add.430";
	"multiply.428" -> "add.430";
	"add.430" -> "reshape.484";
	"p34.482" -> "transpose.483";
	"reshape.484" -> "dot.485";
	"transpose.483" -> "dot.485";
	"dot.485" -> "reshape.486";
	"p33.480" -> "broadcast.487";
	"reshape.486" -> "add.488";
	"broadcast.487" -> "add.488";
	"add.488" -> "custom-call.13";
	"custom-call.13" -> "reshape.498";
	"p32.473" -> "transpose.474";
	"reshape.498" -> "dot.499";
	"transpose.474" -> "dot.499";
	"dot.499" -> "reshape.500";
	"p31.471" -> "broadcast.501";
	"reshape.500" -> "add.502";
	"broadcast.501" -> "add.502";
	"constant.432" -> "multiply.433";
	"add.208" -> "multiply.433";
	"multiply.433" -> "add.435";
	"constant.434" -> "add.435";
	"add.435" -> "convert.442";
	"convert.442" -> "reshape.444";
	"reshape.444" -> "concatenate.446";
	"constant.48" -> "concatenate.446";
	"concatenate.446" -> "rng-bit-generator.447";
	"rng-bit-generator.447" -> "get-tuple-element.448";
	"constant.450" -> "broadcast.451";
	"get-tuple-element.448" -> "shift-right-logical.452";
	"broadcast.451" -> "shift-right-logical.452";
	"shift-right-logical.452" -> "convert.453";
	"constant.454" -> "broadcast.455";
	"convert.453" -> "multiply.459";
	"broadcast.455" -> "multiply.459";
	"p8.65" -> "broadcast.439";
	"multiply.459" -> "compare.462";
	"broadcast.439" -> "compare.462";
	"constant.30" -> "divide.7";
	"p8.65" -> "divide.7";
	"divide.7" -> "broadcast.71";
	"constant.36" -> "broadcast.80";
	"compare.462" -> "select.10";
	"broadcast.71" -> "select.10";
	"broadcast.80" -> "select.10";
	"add.502" -> "multiply.505";
	"select.10" -> "multiply.505";
	"multiply.505" -> "add.506";
	"add.430" -> "add.506";
	"add.506" -> "reshape.507";
	"constant.28" -> "broadcast.32";
	"constant.23" -> "broadcast.27";
	"reshape.507" -> "batch-norm-training.508";
	"broadcast.32" -> "batch-norm-training.508";
	"broadcast.27" -> "batch-norm-training.508";
	"batch-norm-training.508" -> "get-tuple-element.509";
	"get-tuple-element.509" -> "reshape.516";
	"p6.12" -> "broadcast.519";
	"reshape.516" -> "multiply.522";
	"broadcast.519" -> "multiply.522";
	"broadcast.523" -> "add.524";
	"multiply.522" -> "add.524";
	"add.524" -> "reshape.646";
	"p40.644" -> "transpose.645";
	"reshape.646" -> "dot.647";
	"transpose.645" -> "dot.647";
	"dot.647" -> "reshape.648";
	"p39.642" -> "broadcast.649";
	"reshape.648" -> "add.650";
	"broadcast.649" -> "add.650";
	"add.650" -> "custom-call.14";
	"custom-call.14" -> "reshape.660";
	"constant.632" -> "broadcast.636";
	"constant.627" -> "broadcast.631";
	"reshape.660" -> "batch-norm-training.661";
	"broadcast.636" -> "batch-norm-training.661";
	"broadcast.631" -> "batch-norm-training.661";
	"batch-norm-training.661" -> "get-tuple-element.662";
	"get-tuple-element.662" -> "reshape.669";
	"p38.616" -> "broadcast.672";
	"reshape.669" -> "multiply.675";
	"broadcast.672" -> "multiply.675";
	"broadcast.676" -> "add.677";
	"multiply.675" -> "add.677";
	"add.677" -> "reshape.678";
	"p16.165" -> "transpose.614";
	"reshape.678" -> "dot.679";
	"transpose.614" -> "dot.679";
	"dot.679" -> "reshape.680";
	"p37.612" -> "broadcast.681";
	"reshape.680" -> "add.682";
	"broadcast.681" -> "add.682";
	"add.682" -> "reshape.685";
	"reshape.685" -> "reduce.0";
	"constant.0" -> "reduce.0";
	"SimpleCrossEntropyLossForwardMax.686" -> "reduce.0";
	"reduce.0" -> "broadcast.0";
	"reshape.685" -> "subtract.0";
	"broadcast.0" -> "subtract.0";
	"subtract.0" -> "exponential.0";
	"exponential.0" -> "reduce.1";
	"constant.2" -> "reduce.1";
	"SimpleCrossEntropyLossForwardAdd.690" -> "reduce.1";
	"reduce.1" -> "log.0";
	"log.0" -> "broadcast.1";
	"subtract.0" -> "subtract.1";
	"broadcast.1" -> "subtract.1";
	"p36.605" -> "reshape.1";
	"reshape.1" -> "broadcast.3";
	"broadcast.3" -> "compare.0";
	"iota.5" -> "compare.0";
	"constant.4" -> "broadcast.6";
	"constant.5" -> "broadcast.7";
	"compare.0" -> "select.0";
	"broadcast.6" -> "select.0";
	"broadcast.7" -> "select.0";
	"subtract.1" -> "multiply.2";
	"select.0" -> "multiply.2";
	"multiply.2" -> "reduce.2";
	"constant.2" -> "reduce.2";
	"SimpleCrossEntropyLossForwardAdd.694" -> "reduce.2";
	"constant.31" -> "broadcast.73";
	"reshape.530" -> "select.6";
	"reduce.2" -> "select.6";
	"broadcast.73" -> "select.6";
	"select.6" -> "reduce.3";
	"constant.2" -> "reduce.3";
	"SimpleCrossEntropyLossForwardAdd.698" -> "reduce.3";
	"reshape.530" -> "convert.0";
	"convert.0" -> "reduce.4";
	"constant.2" -> "reduce.4";
	"SimpleCrossEntropyLossForwardAdd.702" -> "reduce.4";
	"reduce.3" -> "divide.0";
	"reduce.4" -> "divide.0";
	"divide.0" -> "negate.0";
	"constant.15" -> "broadcast.33";
	"p1.4" -> "compare.4";
	"broadcast.33" -> "compare.4";
	"add.524" -> "slice.526";
	"slice.526" -> "reshape.527";
	"p5.9" -> "transpose.10";
	"reshape.527" -> "dot.528";
	"transpose.10" -> "dot.528";
	"p4.8" -> "broadcast.532";
	"dot.528" -> "add.533";
	"broadcast.532" -> "add.533";
	"add.533" -> "tanh.534";
	"p3.6" -> "transpose.7";
	"tanh.534" -> "dot.535";
	"transpose.7" -> "dot.535";
	"p2.5" -> "broadcast.539";
	"dot.535" -> "add.540";
	"broadcast.539" -> "add.540";
	"add.540" -> "reduce.6";
	"constant.9" -> "reduce.6";
	"SimpleCrossEntropyLossForwardMax.541" -> "reduce.6";
	"reduce.6" -> "broadcast.19";
	"add.540" -> "subtract.2";
	"broadcast.19" -> "subtract.2";
	"subtract.2" -> "exponential.2";
	"exponential.2" -> "reduce.7";
	"constant.10" -> "reduce.7";
	"SimpleCrossEntropyLossForwardAdd.545" -> "reduce.7";
	"reduce.7" -> "log.1";
	"log.1" -> "broadcast.21";
	"subtract.2" -> "subtract.3";
	"broadcast.21" -> "subtract.3";
	"p1.4" -> "broadcast.24";
	"broadcast.24" -> "compare.3";
	"iota.7" -> "compare.3";
	"constant.12" -> "broadcast.29";
	"constant.14" -> "broadcast.31";
	"compare.3" -> "select.2";
	"broadcast.29" -> "select.2";
	"broadcast.31" -> "select.2";
	"subtract.3" -> "multiply.7";
	"select.2" -> "multiply.7";
	"multiply.7" -> "reduce.8";
	"constant.10" -> "reduce.8";
	"SimpleCrossEntropyLossForwardAdd.549" -> "reduce.8";
	"constant.32" -> "broadcast.75";
	"compare.4" -> "select.7";
	"reduce.8" -> "select.7";
	"broadcast.75" -> "select.7";
	"select.7" -> "reduce.9";
	"constant.10" -> "reduce.9";
	"SimpleCrossEntropyLossForwardAdd.553" -> "reduce.9";
	"compare.4" -> "convert.1";
	"convert.1" -> "reduce.10";
	"constant.10" -> "reduce.10";
	"SimpleCrossEntropyLossForwardAdd.557" -> "reduce.10";
	"reduce.9" -> "divide.2";
	"reduce.10" -> "divide.2";
	"divide.2" -> "negate.2";
	"negate.0" -> "add.749";
	"negate.2" -> "add.749";
	"add.749" -> "divide.750";
	"p0.2" -> "divide.750";
	"divide.750" -> "reshape.157";
	"p42.752" -> "add.754";
	"reshape.157" -> "add.754";
	"subtract.3" -> "exponential.3";
	"convert.1" -> "reduce.11";
	"constant.16" -> "reduce.11";
	"SimpleCrossEntropyLossBackwardAdd.763" -> "reduce.11";
	"p0.2" -> "multiply.16";
	"reduce.11" -> "multiply.16";
	"constant.760" -> "divide.3";
	"multiply.16" -> "divide.3";
	"divide.3" -> "broadcast.34";
	"constant.34" -> "broadcast.76";
	"compare.4" -> "select.8";
	"broadcast.34" -> "select.8";
	"broadcast.76" -> "select.8";
	"select.8" -> "broadcast.36";
	"exponential.3" -> "multiply.10";
	"broadcast.36" -> "multiply.10";
	"p1.4" -> "broadcast.39";
	"broadcast.39" -> "compare.5";
	"iota.9" -> "compare.5";
	"divide.3" -> "negate.3";
	"negate.3" -> "broadcast.43";
	"constant.17" -> "broadcast.45";
	"compare.5" -> "select.3";
	"broadcast.43" -> "select.3";
	"broadcast.45" -> "select.3";
	"multiply.10" -> "add.1";
	"select.3" -> "add.1";
	"add.1" -> "reduce.802";
	"constant.796" -> "reduce.802";
	"AddComputation.798" -> "reduce.802";
	"p43.806" -> "add.807";
	"reduce.802" -> "add.807";
	"tanh.534" -> "transpose.813";
	"add.1" -> "dot";
	"transpose.813" -> "dot";
	"p44.817" -> "add.818";
	"dot" -> "add.818";
	"subtract.1" -> "exponential.1";
	"convert.0" -> "reduce.5";
	"constant.7" -> "reduce.5";
	"SimpleCrossEntropyLossBackwardAdd.824" -> "reduce.5";
	"p0.2" -> "multiply.17";
	"reduce.5" -> "multiply.17";
	"constant.760" -> "divide.1";
	"multiply.17" -> "divide.1";
	"divide.1" -> "broadcast.9";
	"constant.35" -> "broadcast.77";
	"reshape.530" -> "select.9";
	"broadcast.9" -> "select.9";
	"broadcast.77" -> "select.9";
	"select.9" -> "broadcast.10";
	"exponential.1" -> "multiply.5";
	"broadcast.10" -> "multiply.5";
	"p36.605" -> "reshape.4";
	"reshape.4" -> "broadcast.12";
	"broadcast.12" -> "compare.2";
	"iota.11" -> "compare.2";
	"divide.1" -> "negate.1";
	"negate.1" -> "broadcast.16";
	"constant.8" -> "broadcast.18";
	"compare.2" -> "select.1";
	"broadcast.16" -> "select.1";
	"broadcast.18" -> "select.1";
	"multiply.5" -> "add.0";
	"select.1" -> "add.0";
	"add.0" -> "reduce.864";
	"constant.858" -> "reduce.864";
	"AddComputation.860" -> "reduce.864";
	"p45.868" -> "add.869";
	"reduce.864" -> "add.869";
	"add.0" -> "dot.879";
	"p16.165" -> "dot.879";
	"dot.879" -> "reduce.887";
	"constant.881" -> "reduce.887";
	"AddComputation.883" -> "reduce.887";
	"p46.891" -> "add.892";
	"reduce.887" -> "add.892";
	"dot.879" -> "reshape.880";
	"reshape.880" -> "multiply.904";
	"reshape.669" -> "multiply.904";
	"multiply.904" -> "reduce.911";
	"constant.905" -> "reduce.911";
	"AddComputation.907" -> "reduce.911";
	"p47.915" -> "add.916";
	"reduce.911" -> "add.916";
	"constant.922" -> "broadcast.926";
	"batch-norm-training.661" -> "get-tuple-element.663";
	"batch-norm-training.661" -> "get-tuple-element.664";
	"constant.665" -> "broadcast.666";
	"get-tuple-element.664" -> "add.667";
	"broadcast.666" -> "add.667";
	"add.667" -> "sqrt";
	"sqrt" -> "multiply.940";
	"sqrt" -> "multiply.940";
	"constant.52" -> "broadcast.78";
	"multiply.940" -> "add.8";
	"broadcast.78" -> "add.8";
	"p38.616" -> "broadcast.933";
	"reshape.880" -> "multiply.934";
	"broadcast.933" -> "multiply.934";
	"multiply.934" -> "reshape.935";
	"reshape.660" -> "batch-norm-grad.943";
	"broadcast.926" -> "batch-norm-grad.943";
	"get-tuple-element.663" -> "batch-norm-grad.943";
	"add.8" -> "batch-norm-grad.943";
	"reshape.935" -> "batch-norm-grad.943";
	"batch-norm-grad.943" -> "get-tuple-element.944";
	"get-tuple-element.944" -> "reshape.947";
	"add.650" -> "custom-call.15";
	"reshape.947" -> "multiply.6";
	"custom-call.15" -> "multiply.6";
	"multiply.6" -> "reduce.964";
	"constant.958" -> "reduce.964";
	"AddComputation.960" -> "reduce.964";
	"p48.968" -> "add.969";
	"reduce.964" -> "add.969";
	"multiply.6" -> "reshape.975";
	"add.524" -> "reshape.976";
	"reshape.976" -> "transpose.977";
	"reshape.975" -> "dot.1";
	"transpose.977" -> "dot.1";
	"p49.981" -> "add.982";
	"dot.1" -> "add.982";
	"add.1" -> "dot.1008";
	"p3.6" -> "dot.1008";
	"constant.1000" -> "broadcast.1004";
	"tanh.534" -> "multiply.999";
	"tanh.534" -> "multiply.999";
	"broadcast.1004" -> "subtract.1005";
	"multiply.999" -> "subtract.1005";
	"dot.1008" -> "multiply.1009";
	"subtract.1005" -> "multiply.1009";
	"multiply.1009" -> "reduce.1016";
	"constant.1010" -> "reduce.1016";
	"AddComputation.1012" -> "reduce.1016";
	"p50.1020" -> "add.1021";
	"reduce.1016" -> "add.1021";
	"add.524" -> "slice.1028";
	"slice.1028" -> "reshape.1029";
	"reshape.1029" -> "transpose.1030";
	"multiply.1009" -> "dot.2";
	"transpose.1030" -> "dot.2";
	"p51.1034" -> "add.1035";
	"dot.2" -> "add.1035";
	"reshape.975" -> "dot.1067";
	"p40.644" -> "dot.1067";
	"dot.1067" -> "reshape.1068";
	"multiply.1009" -> "dot.1048";
	"p5.9" -> "dot.1048";
	"dot.1048" -> "reshape.1049";
	"reshape.1049" -> "pad";
	"constant.53" -> "pad";
	"reshape.1068" -> "add.1069";
	"pad" -> "add.1069";
	"add.1069" -> "reduce.1076";
	"constant.1070" -> "reduce.1076";
	"AddComputation.1072" -> "reduce.1076";
	"p52.1080" -> "add.1081";
	"reduce.1076" -> "add.1081";
	"add.1069" -> "multiply.1093";
	"reshape.516" -> "multiply.1093";
	"multiply.1093" -> "reduce.1100";
	"constant.1094" -> "reduce.1100";
	"AddComputation.1096" -> "reduce.1100";
	"p53.1104" -> "add.1105";
	"reduce.1100" -> "add.1105";
	"constant.1111" -> "broadcast.1115";
	"batch-norm-training.508" -> "get-tuple-element.510";
	"batch-norm-training.508" -> "get-tuple-element.511";
	"constant.512" -> "broadcast.513";
	"get-tuple-element.511" -> "add.514";
	"broadcast.513" -> "add.514";
	"add.514" -> "sqrt.1";
	"sqrt.1" -> "multiply.1129";
	"sqrt.1" -> "multiply.1129";
	"constant.54" -> "broadcast.79";
	"multiply.1129" -> "add.9";
	"broadcast.79" -> "add.9";
	"p6.12" -> "broadcast.1122";
	"add.1069" -> "multiply.1123";
	"broadcast.1122" -> "multiply.1123";
	"multiply.1123" -> "reshape.1124";
	"reshape.507" -> "batch-norm-grad.1132";
	"broadcast.1115" -> "batch-norm-grad.1132";
	"get-tuple-element.510" -> "batch-norm-grad.1132";
	"add.9" -> "batch-norm-grad.1132";
	"reshape.1124" -> "batch-norm-grad.1132";
	"batch-norm-grad.1132" -> "get-tuple-element.1133";
	"get-tuple-element.1133" -> "reshape.1136";
	"reshape.1136" -> "multiply.1137";
	"select.10" -> "multiply.1137";
	"multiply.1137" -> "reduce.1144";
	"constant.1138" -> "reduce.1144";
	"AddComputation.1140" -> "reduce.1144";
	"p54.1148" -> "add.1149";
	"reduce.1144" -> "add.1149";
	"multiply.1137" -> "reshape.1155";
	"custom-call.13" -> "reshape.1156";
	"reshape.1156" -> "transpose.1157";
	"reshape.1155" -> "dot.3";
	"transpose.1157" -> "dot.3";
	"p55.1161" -> "add.1162";
	"dot.3" -> "add.1162";
	"reshape.1155" -> "dot.1170";
	"p32.473" -> "dot.1170";
	"dot.1170" -> "reshape.1171";
	"add.488" -> "custom-call.16";
	"reshape.1171" -> "multiply.11";
	"custom-call.16" -> "multiply.11";
	"multiply.11" -> "reduce.1188";
	"constant.1182" -> "reduce.1188";
	"AddComputation.1184" -> "reduce.1188";
	"p56.1192" -> "add.1193";
	"reduce.1188" -> "add.1193";
	"multiply.11" -> "reshape.1199";
	"add.430" -> "reshape.1200";
	"reshape.1200" -> "transpose.1201";
	"reshape.1199" -> "dot.4";
	"transpose.1201" -> "dot.4";
	"p57.1205" -> "add.1206";
	"dot.4" -> "add.1206";
	"reshape.1199" -> "dot.1219";
	"p34.482" -> "dot.1219";
	"dot.1219" -> "reshape.1220";
	"reshape.1136" -> "add.1222";
	"reshape.1220" -> "add.1222";
	"add.1222" -> "reduce.1229";
	"constant.1223" -> "reduce.1229";
	"AddComputation.1225" -> "reduce.1229";
	"p58.1233" -> "add.1234";
	"reduce.1229" -> "add.1234";
	"add.1222" -> "multiply.1246";
	"reshape.422" -> "multiply.1246";
	"multiply.1246" -> "reduce.1253";
	"constant.1247" -> "reduce.1253";
	"AddComputation.1249" -> "reduce.1253";
	"p59.1257" -> "add.1258";
	"reduce.1253" -> "add.1258";
	"constant.1264" -> "broadcast.1268";
	"batch-norm-training.414" -> "get-tuple-element.416";
	"batch-norm-training.414" -> "get-tuple-element.417";
	"constant.418" -> "broadcast.419";
	"get-tuple-element.417" -> "add.420";
	"broadcast.419" -> "add.420";
	"add.420" -> "sqrt.2";
	"sqrt.2" -> "multiply.1282";
	"sqrt.2" -> "multiply.1282";
	"constant.56" -> "broadcast.81";
	"multiply.1282" -> "add.10";
	"broadcast.81" -> "add.10";
	"p7.39" -> "broadcast.1275";
	"add.1222" -> "multiply.1276";
	"broadcast.1275" -> "multiply.1276";
	"multiply.1276" -> "reshape.1277";
	"reshape.413" -> "batch-norm-grad.1285";
	"broadcast.1268" -> "batch-norm-grad.1285";
	"get-tuple-element.416" -> "batch-norm-grad.1285";
	"add.10" -> "batch-norm-grad.1285";
	"reshape.1277" -> "batch-norm-grad.1285";
	"batch-norm-grad.1285" -> "get-tuple-element.1286";
	"get-tuple-element.1286" -> "reshape.1289";
	"reshape.1289" -> "multiply.1290";
	"select.11" -> "multiply.1290";
	"multiply.1290" -> "reduce.1297";
	"constant.1291" -> "reduce.1297";
	"AddComputation.1293" -> "reduce.1297";
	"p60.1301" -> "add.1302";
	"reduce.1297" -> "add.1302";
	"multiply.1290" -> "reshape.1312";
	"reshape.1312" -> "transpose.1313";
	"dot.390" -> "reshape.1311";
	"transpose.1313" -> "dot.1314";
	"reshape.1311" -> "dot.1314";
	"p61.1316" -> "add.1317";
	"dot.1314" -> "add.1317";
	"multiply.387" -> "reshape.1329";
	"reshape.1329" -> "transpose.1330";
	"multiply.1290" -> "reshape.1323";
	"reshape.1323" -> "dot.1324";
	"p20.247" -> "dot.1324";
	"dot.1324" -> "reshape.1328";
	"transpose.1330" -> "dot.1331";
	"reshape.1328" -> "dot.1331";
	"dot.1331" -> "reduce.1341";
	"constant.1335" -> "reduce.1341";
	"AddComputation.1337" -> "reduce.1341";
	"p62.1345" -> "add.1346";
	"reduce.1341" -> "add.1346";
	"dot.1331" -> "reshape.1356";
	"reshape.1356" -> "transpose.1357";
	"multiply.200" -> "reshape.1352";
	"transpose.1357" -> "dot.1358";
	"reshape.1352" -> "dot.1358";
	"p63.1360" -> "add.1361";
	"dot.1358" -> "add.1361";
	"add.357" -> "transpose.1386";
	"add.262" -> "transpose.1368";
	"reshape.1328" -> "dot.1369";
	"transpose.1368" -> "dot.1369";
	"dot.1369" -> "reshape.1370";
	"reshape.1370" -> "multiply.1371";
	"select.12" -> "multiply.1371";
	"multiply.1371" -> "multiply.1372";
	"divide.386" -> "multiply.1372";
	"multiply.1372" -> "reduce.1378";
	"constant.1373" -> "reduce.1378";
	"AddComputation.1374" -> "reduce.1378";
	"reduce.1378" -> "reshape.293";
	"reshape.293" -> "broadcast.1379";
	"multiply.1371" -> "subtract.1380";
	"broadcast.1379" -> "subtract.1380";
	"divide.386" -> "multiply.1381";
	"subtract.1380" -> "multiply.1381";
	"p25.324" -> "broadcast.1382";
	"multiply.1381" -> "divide.1383";
	"broadcast.1382" -> "divide.1383";
	"divide.1383" -> "reshape.1384";
	"transpose.1386" -> "dot.1387";
	"reshape.1384" -> "dot.1387";
	"dot.1387" -> "reduce.1398";
	"constant.1392" -> "reduce.1398";
	"AddComputation.1394" -> "reduce.1398";
	"p64.1402" -> "add.1403";
	"reduce.1398" -> "add.1403";
	"dot.1387" -> "reshape.1410";
	"reshape.1410" -> "transpose.1412";
	"transpose.1412" -> "reshape.1414";
	"reshape.1414" -> "transpose.1415";
	"multiply.200" -> "reshape.1409";
	"transpose.1415" -> "dot.1416";
	"reshape.1409" -> "dot.1416";
	"p65.1418" -> "add.1419";
	"dot.1416" -> "add.1419";
	"transpose.341" -> "reshape.1425";
	"reshape.1425" -> "transpose.1426";
	"reshape.1384" -> "dot.1427";
	"transpose.1426" -> "dot.1427";
	"dot.1427" -> "reduce.1437";
	"constant.1431" -> "reduce.1437";
	"AddComputation.1433" -> "reduce.1437";
	"p66.1441" -> "add.1442";
	"reduce.1437" -> "add.1442";
	"dot.1427" -> "reshape.1452";
	"reshape.1452" -> "transpose.1453";
	"multiply.200" -> "reshape.1448";
	"transpose.1453" -> "dot.1454";
	"reshape.1448" -> "dot.1454";
	"p67.1456" -> "add.1457";
	"dot.1454" -> "add.1457";
	"dot.1331" -> "reshape.1471";
	"reshape.1471" -> "dot.1472";
	"p22.256" -> "dot.1472";
	"dot.1472" -> "reshape.1473";
	"all-reduce.404" -> "get-tuple-element.1476";
	"reshape.1473" -> "all-reduce.1481";
	"get-tuple-element.1476" -> "all-reduce.1481";
	"AddComputation.1477" -> "all-reduce.1481";
	"all-reduce.1481" -> "get-tuple-element.1482";
	"reshape.1289" -> "add.1536";
	"get-tuple-element.1482" -> "add.1536";
	"dot.1387" -> "reshape.1484";
	"reshape.1484" -> "transpose.1486";
	"transpose.1486" -> "reshape.1488";
	"reshape.1488" -> "dot.1489";
	"p27.332" -> "dot.1489";
	"dot.1489" -> "reshape.1490";
	"all-reduce.1481" -> "get-tuple-element.1493";
	"reshape.1490" -> "all-reduce.1498";
	"get-tuple-element.1493" -> "all-reduce.1498";
	"AddComputation.1494" -> "all-reduce.1498";
	"all-reduce.1498" -> "get-tuple-element.1499";
	"add.1536" -> "add.1537";
	"get-tuple-element.1499" -> "add.1537";
	"dot.1427" -> "reshape.1504";
	"reshape.1504" -> "dot.1505";
	"p29.351" -> "dot.1505";
	"dot.1505" -> "reshape.1506";
	"all-reduce.1498" -> "get-tuple-element.1509";
	"reshape.1506" -> "all-reduce.1514";
	"get-tuple-element.1509" -> "all-reduce.1514";
	"AddComputation.1510" -> "all-reduce.1514";
	"all-reduce.1514" -> "get-tuple-element.1515";
	"add.1537" -> "add.1538";
	"get-tuple-element.1515" -> "add.1538";
	"add.1538" -> "multiply.1539";
	"select.13" -> "multiply.1539";
	"multiply.1539" -> "reduce.1546";
	"constant.1540" -> "reduce.1546";
	"AddComputation.1542" -> "reduce.1546";
	"p68.1550" -> "add.1551";
	"reduce.1546" -> "add.1551";
	"multiply.1539" -> "multiply.1563";
	"reshape.190" -> "multiply.1563";
	"multiply.1563" -> "reduce.1570";
	"constant.1564" -> "reduce.1570";
	"AddComputation.1566" -> "reduce.1570";
	"p69.1574" -> "add.1575";
	"reduce.1570" -> "add.1575";
	"constant.19" -> "broadcast.46";
	"p11.128" -> "slice.1582";
	"slice.1582" -> "reshape.12";
	"constant.20" -> "broadcast.48";
	"reshape.12" -> "compare.6";
	"broadcast.48" -> "compare.6";
	"constant.21" -> "broadcast.50";
	"reshape.12" -> "add.2";
	"broadcast.50" -> "add.2";
	"compare.6" -> "select.4";
	"reshape.12" -> "select.4";
	"add.2" -> "select.4";
	"select.4" -> "reshape.13";
	"constant.1583" -> "broadcast.1587";
	"batch-norm-training.182" -> "get-tuple-element.184";
	"batch-norm-training.182" -> "get-tuple-element.185";
	"constant.186" -> "broadcast.187";
	"get-tuple-element.185" -> "add.188";
	"broadcast.187" -> "add.188";
	"add.188" -> "sqrt.3";
	"sqrt.3" -> "multiply.1601";
	"sqrt.3" -> "multiply.1601";
	"constant.57" -> "broadcast.87";
	"multiply.1601" -> "add.11";
	"broadcast.87" -> "add.11";
	"p10.102" -> "broadcast.1594";
	"multiply.1539" -> "multiply.1595";
	"broadcast.1594" -> "multiply.1595";
	"multiply.1595" -> "reshape.1596";
	"reshape.181" -> "batch-norm-grad.1604";
	"broadcast.1587" -> "batch-norm-grad.1604";
	"get-tuple-element.184" -> "batch-norm-grad.1604";
	"add.11" -> "batch-norm-grad.1604";
	"reshape.1596" -> "batch-norm-grad.1604";
	"batch-norm-grad.1604" -> "get-tuple-element.1605";
	"get-tuple-element.1605" -> "reshape.1608";
	"reshape.1608" -> "reduce.1615";
	"constant.1609" -> "reduce.1615";
	"AddComputation.1611" -> "reduce.1615";
	"broadcast.46" -> "scatter.0";
	"reshape.13" -> "scatter.0";
	"reduce.1615" -> "scatter.0";
	"Int32PermissiveEmbeddingScatterCombiner.1617" -> "scatter.0";
	"scatter.0" -> "custom-call.17";
	"p70.1647" -> "add.1648";
	"custom-call.17" -> "add.1648";
	"constant.22" -> "broadcast.51";
	"p13.149" -> "reshape.17";
	"constant.24" -> "broadcast.53";
	"reshape.17" -> "compare.7";
	"broadcast.53" -> "compare.7";
	"constant.25" -> "broadcast.55";
	"reshape.17" -> "add.3";
	"broadcast.55" -> "add.3";
	"compare.7" -> "select.5";
	"reshape.17" -> "select.5";
	"add.3" -> "select.5";
	"select.5" -> "reshape.18";
	"get-tuple-element.1605" -> "reshape.20";
	"broadcast.51" -> "scatter.1";
	"reshape.18" -> "scatter.1";
	"reshape.20" -> "scatter.1";
	"Int32PermissiveEmbeddingScatterCombiner.1654" -> "scatter.1";
	"scatter.1" -> "custom-call.18";
	"p71.1684" -> "add.1685";
	"custom-call.18" -> "add.1685";
	"add.677" -> "reshape.1745";
	"reshape.1745" -> "transpose.1746";
	"add.0" -> "dot.5";
	"transpose.1746" -> "dot.5";
	"constant.1725" -> "broadcast.1729";
	"p15.163" -> "reshape.1704";
	"constant.1719" -> "broadcast.1720";
	"reshape.1704" -> "compare.1721";
	"broadcast.1720" -> "compare.1721";
	"p72.1713" -> "broadcast.1717";
	"reshape.1704" -> "add.1718";
	"broadcast.1717" -> "add.1718";
	"compare.1721" -> "select.1722";
	"add.1718" -> "select.1722";
	"reshape.1704" -> "select.1722";
	"select.1722" -> "reshape.1723";
	"reshape.1704" -> "convert.1705";
	"constant.1703" -> "broadcast.1706";
	"convert.1705" -> "compare.1707";
	"broadcast.1706" -> "compare.1707";
	"compare.1707" -> "broadcast.1711";
	"get-tuple-element.1605" -> "reshape.1702";
	"constant.1696" -> "broadcast.1700";
	"broadcast.1711" -> "select.1712";
	"reshape.1702" -> "select.1712";
	"broadcast.1700" -> "select.1712";
	"broadcast.1729" -> "scatter.1735";
	"reshape.1723" -> "scatter.1735";
	"select.1712" -> "scatter.1735";
	"ScatterCombiner.1731" -> "scatter.1735";
	"scatter.1735" -> "custom-call.19";
	"dot.5" -> "add.1749";
	"custom-call.19" -> "add.1749";
	"p73.1751" -> "add.1752";
	"add.1749" -> "add.1752";
	"add.754" -> "tuple.1754";
	"add.807" -> "tuple.1754";
	"add.818" -> "tuple.1754";
	"add.869" -> "tuple.1754";
	"add.892" -> "tuple.1754";
	"add.916" -> "tuple.1754";
	"add.969" -> "tuple.1754";
	"add.982" -> "tuple.1754";
	"add.1021" -> "tuple.1754";
	"add.1035" -> "tuple.1754";
	"add.1081" -> "tuple.1754";
	"add.1105" -> "tuple.1754";
	"add.1149" -> "tuple.1754";
	"add.1162" -> "tuple.1754";
	"add.1193" -> "tuple.1754";
	"add.1206" -> "tuple.1754";
	"add.1234" -> "tuple.1754";
	"add.1258" -> "tuple.1754";
	"add.1302" -> "tuple.1754";
	"add.1317" -> "tuple.1754";
	"add.1346" -> "tuple.1754";
	"add.1361" -> "tuple.1754";
	"add.1403" -> "tuple.1754";
	"add.1419" -> "tuple.1754";
	"add.1442" -> "tuple.1754";
	"add.1457" -> "tuple.1754";
	"add.1551" -> "tuple.1754";
	"add.1575" -> "tuple.1754";
	"add.1648" -> "tuple.1754";
	"add.1685" -> "tuple.1754";
	"add.1752" -> "tuple.1754";
	"add.682" -> "tuple.1754";
	"add.540" -> "tuple.1754";
	"add.749" -> "tuple.1754";
	"divide.750" -> "tuple.1754";
 }