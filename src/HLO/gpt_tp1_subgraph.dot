digraph HloModule { 
	"iota.30" [label="iota.30 \n s32[128]"];
	"broadcast.31" [label="broadcast.31 \n s32[1,128]"];
	"p1.2" [label="p1.2 \n s32[1]"];
	"broadcast.32" [label="broadcast.32 \n s32[1,128]"];
	"compare.33" [label="compare.33 \n pred[1,128]"];
	"broadcast.37" [label="broadcast.37 \n pred[4,1,128]"];
	"broadcast.34" [label="broadcast.34 \n s32[4,128]"];
	"p2.3" [label="p2.3 \n s32[4]"];
	"broadcast.35" [label="broadcast.35 \n s32[4,128]"];
	"compare.36" [label="compare.36 \n pred[4,128]"];
	"broadcast.38" [label="broadcast.38 \n pred[4,1,128]"];
	"and.39" [label="and.39 \n pred[4,1,128]"];
	"reshape.98" [label="reshape.98 \n pred[4,128]"];
	"broadcast.99" [label="broadcast.99 \n pred[4,12,1,128]"];
	"p0.1" [label="p0.1 \n f32[4,1,768]"];
	"reshape.61" [label="reshape.61 \n f32[4,768]"];
	"convert.62" [label="convert.62 \n f32[4,768]"];
	"broadcast.64" [label="broadcast.64 \n f32[4]"];
	"broadcast.66" [label="broadcast.66 \n f32[4]"];
	"p7.8" [label="p7.8 \n f32[768]"];
	"broadcast.69" [label="broadcast.69 \n f32[4,768]"];
	"multiply.70" [label="multiply.70 \n f32[4,768]"];
	"p8.9" [label="p8.9 \n f32[768]"];
	"broadcast.71" [label="broadcast.71 \n f32[4,768]"];
	"add.72" [label="add.72 \n f32[4,768]"];
	"convert.73" [label="convert.73 \n f32[4,768]"];
	"reshape.74" [label="reshape.74 \n f32[4,1,768]"];
	"transpose.75" [label="transpose.75 \n f32[768,1,4]"];
	"reshape.76" [label="reshape.76 \n f32[768,4]"];
	"p9.10" [label="p9.10 \n f32[768,768]"];
	"dot.77" [label="dot.77 \n f32[4,768]"];
	"p10.11" [label="p10.11 \n f32[768]"];
	"reshape.78" [label="reshape.78 \n f32[768]"];
	"broadcast.79" [label="broadcast.79 \n f32[4,768]"];
	"add.80" [label="add.80 \n f32[4,768]"];
	"reshape.89" [label="reshape.89 \n f32[1,4,12,64]"];
	"broadcast.93" [label="broadcast.93 \n f32[1,4,12,64]"];
	"divide.94" [label="divide.94 \n f32[1,4,12,64]"];
	"p5.6" [label="p5.6 \n f32[128,4,12,64]"];
	"dot.95" [label="dot.95 \n f32[4,12,1,128]"];
	"broadcast.97" [label="broadcast.97 \n f32[4,12,1,128]"];
	"select.100" [label="select.100 \n f32[4,12,1,128]"];
	"reduce.108" [label="reduce.108 \n f32[4,12,1]"];
	"broadcast.41" [label="broadcast.41 \n s32[4,1]"];
	"broadcast.40" [label="broadcast.40 \n s32[4,1]"];
	"compare.42" [label="compare.42 \n pred[4,1]"];
	"reshape.104" [label="reshape.104 \n pred[4]"];
	"broadcast.105" [label="broadcast.105 \n pred[4,12,1,1]"];
	"p11.12" [label="p11.12 \n f32[768,768]"];
	"dot.81" [label="dot.81 \n f32[4,768]"];
	"p12.13" [label="p12.13 \n f32[768]"];
	"reshape.82" [label="reshape.82 \n f32[768]"];
	"broadcast.83" [label="broadcast.83 \n f32[4,768]"];
	"add.84" [label="add.84 \n f32[4,768]"];
	"reshape.90" [label="reshape.90 \n f32[1,4,12,64]"];
	"dot.101" [label="dot.101 \n f32[4,12,1,1]"];
	"broadcast.103" [label="broadcast.103 \n f32[4,12,1,1]"];
	"select.106" [label="select.106 \n f32[4,12,1,1]"];
	"reduce.114" [label="reduce.114 \n f32[4,12,1]"];
	"maximum.120" [label="maximum.120 \n f32[4,12,1]"];
	"broadcast.121" [label="broadcast.121 \n f32[4,12,1,128]"];
	"subtract.122" [label="subtract.122 \n f32[4,12,1,128]"];
	"exponential.123" [label="exponential.123 \n f32[4,12,1,128]"];
	"convert.131" [label="convert.131 \n f32[4,12,1,128]"];
	"p6.7" [label="p6.7 \n f32[128,4,12,64]"];
	"dot.144" [label="dot.144 \n f32[4,12,1,64]"];
	"broadcast.132" [label="broadcast.132 \n f32[4,12,1,1]"];
	"subtract.133" [label="subtract.133 \n f32[4,12,1,1]"];
	"exponential.134" [label="exponential.134 \n f32[4,12,1,1]"];
	"convert.142" [label="convert.142 \n f32[4,12,1,1]"];
	"p13.14" [label="p13.14 \n f32[768,768]"];
	"dot.85" [label="dot.85 \n f32[4,768]"];
	"p14.15" [label="p14.15 \n f32[768]"];
	"reshape.86" [label="reshape.86 \n f32[768]"];
	"broadcast.87" [label="broadcast.87 \n f32[4,768]"];
	"add.88" [label="add.88 \n f32[4,768]"];
	"reshape.91" [label="reshape.91 \n f32[1,4,12,64]"];
	"dot.145" [label="dot.145 \n f32[4,12,1,64]"];
	"add.146" [label="add.146 \n f32[4,12,1,64]"];
	"reduce.125" [label="reduce.125 \n f32[4,12,1]"];
	"reduce.135" [label="reduce.135 \n f32[4,12,1]"];
	"add.141" [label="add.141 \n f32[4,12,1]"];
	"convert.143" [label="convert.143 \n f32[4,12,1]"];
	"broadcast.147" [label="broadcast.147 \n f32[4,12,1,64]"];
	"divide.148" [label="divide.148 \n f32[4,12,1,64]"];
	"transpose.149" [label="transpose.149 \n f32[1,4,12,64]"]; 
 	"iota.30" -> "broadcast.31";
	"p1.2" -> "broadcast.32";
	"broadcast.31" -> "compare.33";
	"broadcast.32" -> "compare.33";
	"compare.33" -> "broadcast.37";
	"iota.30" -> "broadcast.34";
	"p2.3" -> "broadcast.35";
	"broadcast.34" -> "compare.36";
	"broadcast.35" -> "compare.36";
	"compare.36" -> "broadcast.38";
	"broadcast.37" -> "and.39";
	"broadcast.38" -> "and.39";
	"and.39" -> "reshape.98";
	"reshape.98" -> "broadcast.99";
	"p0.1" -> "reshape.61";
	"reshape.61" -> "convert.62";
	"constant.63" -> "broadcast.64";
	"constant.65" -> "broadcast.66";
	"convert.62" -> "batch-norm-training.67";
	"broadcast.64" -> "batch-norm-training.67";
	"broadcast.66" -> "batch-norm-training.67";
	"batch-norm-training.67" -> "get-tuple-element.68";
	"p7.8" -> "custom-call.45";
	"custom-call.45" -> "broadcast.69";
	"get-tuple-element.68" -> "multiply.70";
	"broadcast.69" -> "multiply.70";
	"p8.9" -> "custom-call.46";
	"custom-call.46" -> "broadcast.71";
	"multiply.70" -> "add.72";
	"broadcast.71" -> "add.72";
	"add.72" -> "convert.73";
	"convert.73" -> "reshape.74";
	"reshape.74" -> "transpose.75";
	"transpose.75" -> "reshape.76";
	"p9.10" -> "custom-call.47";
	"reshape.76" -> "dot.77";
	"custom-call.47" -> "dot.77";
	"p10.11" -> "custom-call.48";
	"custom-call.48" -> "reshape.78";
	"reshape.78" -> "broadcast.79";
	"dot.77" -> "add.80";
	"broadcast.79" -> "add.80";
	"add.80" -> "reshape.89";
	"constant.92" -> "broadcast.93";
	"reshape.89" -> "divide.94";
	"broadcast.93" -> "divide.94";
	"p5.6" -> "custom-call.43";
	"divide.94" -> "dot.95";
	"custom-call.43" -> "dot.95";
	"constant.96" -> "broadcast.97";
	"broadcast.99" -> "select.100";
	"dot.95" -> "select.100";
	"broadcast.97" -> "select.100";
	"select.100" -> "reduce.108";
	"constant.107" -> "reduce.108";
	"reduce.108.MaxFunc.113" -> "reduce.108";
	"p1.2" -> "broadcast.41";
	"p2.3" -> "broadcast.40";
	"broadcast.41" -> "compare.42";
	"broadcast.40" -> "compare.42";
	"compare.42" -> "reshape.104";
	"reshape.104" -> "broadcast.105";
	"p11.12" -> "custom-call.49";
	"reshape.76" -> "dot.81";
	"custom-call.49" -> "dot.81";
	"p12.13" -> "custom-call.50";
	"custom-call.50" -> "reshape.82";
	"reshape.82" -> "broadcast.83";
	"dot.81" -> "add.84";
	"broadcast.83" -> "add.84";
	"add.84" -> "reshape.90";
	"divide.94" -> "dot.101";
	"reshape.90" -> "dot.101";
	"constant.102" -> "broadcast.103";
	"broadcast.105" -> "select.106";
	"dot.101" -> "select.106";
	"broadcast.103" -> "select.106";
	"select.106" -> "reduce.114";
	"constant.107" -> "reduce.114";
	"reduce.114.MaxFunc.119" -> "reduce.114";
	"reduce.108" -> "maximum.120";
	"reduce.114" -> "maximum.120";
	"maximum.120" -> "broadcast.121";
	"select.100" -> "subtract.122";
	"broadcast.121" -> "subtract.122";
	"subtract.122" -> "exponential.123";
	"exponential.123" -> "convert.131";
	"p6.7" -> "custom-call.44";
	"convert.131" -> "dot.144";
	"custom-call.44" -> "dot.144";
	"maximum.120" -> "broadcast.132";
	"select.106" -> "subtract.133";
	"broadcast.132" -> "subtract.133";
	"subtract.133" -> "exponential.134";
	"exponential.134" -> "convert.142";
	"p13.14" -> "custom-call.51";
	"reshape.76" -> "dot.85";
	"custom-call.51" -> "dot.85";
	"p14.15" -> "custom-call.52";
	"custom-call.52" -> "reshape.86";
	"reshape.86" -> "broadcast.87";
	"dot.85" -> "add.88";
	"broadcast.87" -> "add.88";
	"add.88" -> "reshape.91";
	"convert.142" -> "dot.145";
	"reshape.91" -> "dot.145";
	"dot.144" -> "add.146";
	"dot.145" -> "add.146";
	"exponential.123" -> "reduce.125";
	"constant.124" -> "reduce.125";
	"reduce.125.AddFunc.130" -> "reduce.125";
	"exponential.134" -> "reduce.135";
	"constant.124" -> "reduce.135";
	"reduce.135.AddFunc.140" -> "reduce.135";
	"reduce.125" -> "add.141";
	"reduce.135" -> "add.141";
	"add.141" -> "convert.143";
	"convert.143" -> "broadcast.147";
	"add.146" -> "divide.148";
	"broadcast.147" -> "divide.148";
	"divide.148" -> "transpose.149";
 }