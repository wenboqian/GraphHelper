digraph HloModule {
	"p6.16" [label="p6.16 \n f32[3,4]"];
	"p12.130" [label="p12.130 \n f32[] parameter(12), frontend_attributes="];
	"broadcast.131" [label="broadcast.131 \n f32[3,4]"];
	"multiply.132" [label="multiply.132 \n f32[3,4]"];
	"p11.129" [label="p11.129 \n f32[] parameter(11), frontend_attributes="];
	"broadcast.133" [label="broadcast.133 \n f32[3,4]"];
	"multiply.135" [label="multiply.135 \n f32[3,4]"];
	"subtract.136" [label="subtract.136 \n f32[3,4]"];
	"p10.115" [label="p10.115 \n f32[] parameter(10), frontend_attributes="];
	"multiply.0" [label="multiply.0 \n f32[] multiply(f32[] %constant.1, f32[] %p10.115), metadata="];
	"broadcast.2" [label="broadcast.2 \n f32[3,4]"];
	"constant.36" [label="constant.36 \n f32[] constant(0), metadata="];
	"broadcast.40" [label="broadcast.40 \n f32[1,3]"];
	"p7.25" [label="p7.25 \n f32[1,4]"];
	"reshape.7" [label="reshape.7 \n f32[4]"];
	"broadcast.26" [label="broadcast.26 \n f32[3,4]"];
	"multiply.10" [label="multiply.10 \n f32[3,4]"];
	"p5.8" [label="p5.8 \n f32[3]"];
	"add.1" [label="add.1 \n f32[3]"];
	"reshape.52" [label="reshape.52 \n f32[1,3]"];
	"p4.7" [label="p4.7 \n f32[] parameter(4), frontend_attributes="];
	"slice.48" [label="slice.48 \n f32[1,3]"];
	"reshape.70" [label="reshape.70 \n f32[3]"];
	"reshape.15" [label="reshape.15 \n f32[3]"];
	"broadcast.21" [label="broadcast.21 \n f32[3,4]"];
	"reshape.14" [label="reshape.14 \n f32[4]"];
	"broadcast.22" [label="broadcast.22 \n f32[3,4]"];
	"multiply.8" [label="multiply.8 \n f32[3,4]"];
	"p9.109" [label="p9.109 \n f32[] parameter(9), frontend_attributes="];
	"broadcast.113" [label="broadcast.113 \n f32[3,4]"];
	"multiply.114" [label="multiply.114 \n f32[3,4]"];
	"add.123" [label="add.123 \n f32[3,4]"];
	"p8.92" [label="p8.92 \n f32[] parameter(8), frontend_attributes="];
	"multiply.1" [label="multiply.1 \n f32[] multiply(f32[] %constant.3, f32[] %p8.92), metadata="];
	"broadcast.6" [label="broadcast.6 \n f32[3,4]"];
	"multiply.100" [label="multiply.100 \n f32[3,4]"];
	"p3.6" [label="p3.6 \n f32[] parameter(3), frontend_attributes="];
	"broadcast.101" [label="broadcast.101 \n f32[3,4]"];
	"multiply.102" [label="multiply.102 \n f32[3,4]"];
	"add.103" [label="add.103 \n f32[3,4]"];
	"sqrt.104" [label="sqrt.104 \n f32[3,4]"];
	"p2.5" [label="p2.5 \n f32[] parameter(2), frontend_attributes="];
	"broadcast.105" [label="broadcast.105 \n f32[3,4]"];
	"divide.106" [label="divide.106 \n f32[3,4]"];
	"p1.3" [label="p1.3 \n f32[] parameter(1), frontend_attributes="];
	"broadcast.107" [label="broadcast.107 \n f32[3,4]"];
	"add.108" [label="add.108 \n f32[3,4]"];
	"divide.137" [label="divide.137 \n f32[3,4]"];
	"p0.1" [label="p0.1 \n f32[] parameter(0), frontend_attributes="];
	"broadcast.138" [label="broadcast.138 \n f32[3,4]"];
	"multiply.139" [label="multiply.139 \n f32[3,4]"];
	"add.140" [label="add.140 \n f32[3,4]"];
	"broadcast.178" [label="broadcast.178 \n f32[3]"];
	"multiply.179" [label="multiply.179 \n f32[3]"];
	"broadcast.7" [label="broadcast.7 \n f32[3]"];
	"multiply.182" [label="multiply.182 \n f32[3]"];
	"subtract.183" [label="subtract.183 \n f32[3]"];
	"multiply.5" [label="multiply.5 \n f32[] multiply(f32[] %constant.6, f32[] %p10.115), metadata="];
	"broadcast.10" [label="broadcast.10 \n f32[3]"];
	"broadcast.162" [label="broadcast.162 \n f32[3]"];
	"multiply.163" [label="multiply.163 \n f32[3]"];
	"add.171" [label="add.171 \n f32[3]"];
	"multiply.6" [label="multiply.6 \n f32[] multiply(f32[] %constant.7, f32[] %p8.92), metadata="];
	"broadcast.13" [label="broadcast.13 \n f32[3]"];
	"multiply.150" [label="multiply.150 \n f32[3]"];
	"broadcast.151" [label="broadcast.151 \n f32[3]"];
	"multiply.152" [label="multiply.152 \n f32[3]"];
	"add.153" [label="add.153 \n f32[3]"];
	"sqrt.154" [label="sqrt.154 \n f32[3]"];
	"broadcast.155" [label="broadcast.155 \n f32[3]"];
	"divide.156" [label="divide.156 \n f32[3]"];
	"broadcast.157" [label="broadcast.157 \n f32[3]"];
	"add.158" [label="add.158 \n f32[3]"];
	"divide.184" [label="divide.184 \n f32[3]"];
	"broadcast.185" [label="broadcast.185 \n f32[3]"];
	"multiply.186" [label="multiply.186 \n f32[3]"];
	"add.187" [label="add.187 \n f32[3]"];
	"tuple.188" [label="tuple.188 \n (f32[3,4]"]; 
 	"p12.130" -> "broadcast.131";
	"p6.16" -> "multiply.132";
	"broadcast.131" -> "multiply.132";
	"p11.129" -> "broadcast.133";
	"multiply.132" -> "multiply.135";
	"broadcast.133" -> "multiply.135";
	"p6.16" -> "subtract.136";
	"multiply.135" -> "subtract.136";
	"constant.1" -> "multiply.0";
	"p10.115" -> "multiply.0";
	"multiply.0" -> "broadcast.2";
	"constant.36" -> "broadcast.40";
	"p7.25" -> "reshape.7";
	"reshape.7" -> "broadcast.26";
	"p6.16" -> "custom-call.4";
	"broadcast.26" -> "multiply.10";
	"custom-call.4" -> "multiply.10";
	"multiply.10" -> "reduce";
	"constant" -> "reduce";
	"scalar_add_computation" -> "reduce";
	"p5.8" -> "custom-call.5";
	"reduce" -> "add.1";
	"custom-call.5" -> "add.1";
	"add.1" -> "reshape.52";
	"reshape.52" -> "all-gather.33";
	"p4.7" -> "all-gather.33";
	"all-gather.33" -> "get-tuple-element.43";
	"broadcast.40" -> "all-gather.44";
	"get-tuple-element.43" -> "all-gather.44";
	"all-gather.44" -> "get-tuple-element.45";
	"get-tuple-element.45" -> "slice.48";
	"slice.48" -> "reshape.70";
	"reshape.70" -> "custom-call.6";
	"slice.48" -> "reshape.15";
	"reshape.15" -> "broadcast.21";
	"p7.25" -> "reshape.14";
	"reshape.14" -> "broadcast.22";
	"broadcast.21" -> "multiply.8";
	"broadcast.22" -> "multiply.8";
	"multiply.8" -> "custom-call.7";
	"all-gather.44" -> "get-tuple-element.83";
	"custom-call.6" -> "all-reduce.88";
	"custom-call.7" -> "all-reduce.88";
	"get-tuple-element.83" -> "all-reduce.88";
	"AddComputation.84" -> "all-reduce.88";
	"all-reduce.88" -> "get-tuple-element.90";
	"p9.109" -> "broadcast.113";
	"get-tuple-element.90" -> "multiply.114";
	"broadcast.113" -> "multiply.114";
	"broadcast.2" -> "add.123";
	"multiply.114" -> "add.123";
	"constant.3" -> "multiply.1";
	"p8.92" -> "multiply.1";
	"multiply.1" -> "broadcast.6";
	"get-tuple-element.90" -> "multiply.100";
	"get-tuple-element.90" -> "multiply.100";
	"p3.6" -> "broadcast.101";
	"multiply.100" -> "multiply.102";
	"broadcast.101" -> "multiply.102";
	"broadcast.6" -> "add.103";
	"multiply.102" -> "add.103";
	"add.103" -> "sqrt.104";
	"p2.5" -> "broadcast.105";
	"sqrt.104" -> "divide.106";
	"broadcast.105" -> "divide.106";
	"p1.3" -> "broadcast.107";
	"divide.106" -> "add.108";
	"broadcast.107" -> "add.108";
	"add.123" -> "divide.137";
	"add.108" -> "divide.137";
	"p0.1" -> "broadcast.138";
	"divide.137" -> "multiply.139";
	"broadcast.138" -> "multiply.139";
	"subtract.136" -> "add.140";
	"multiply.139" -> "add.140";
	"p12.130" -> "broadcast.178";
	"p5.8" -> "multiply.179";
	"broadcast.178" -> "multiply.179";
	"constant.5" -> "broadcast.7";
	"multiply.179" -> "multiply.182";
	"broadcast.7" -> "multiply.182";
	"p5.8" -> "subtract.183";
	"multiply.182" -> "subtract.183";
	"constant.6" -> "multiply.5";
	"p10.115" -> "multiply.5";
	"multiply.5" -> "broadcast.10";
	"all-reduce.88" -> "get-tuple-element.89";
	"p9.109" -> "broadcast.162";
	"get-tuple-element.89" -> "multiply.163";
	"broadcast.162" -> "multiply.163";
	"broadcast.10" -> "add.171";
	"multiply.163" -> "add.171";
	"constant.7" -> "multiply.6";
	"p8.92" -> "multiply.6";
	"multiply.6" -> "broadcast.13";
	"get-tuple-element.89" -> "multiply.150";
	"get-tuple-element.89" -> "multiply.150";
	"p3.6" -> "broadcast.151";
	"multiply.150" -> "multiply.152";
	"broadcast.151" -> "multiply.152";
	"broadcast.13" -> "add.153";
	"multiply.152" -> "add.153";
	"add.153" -> "sqrt.154";
	"p2.5" -> "broadcast.155";
	"sqrt.154" -> "divide.156";
	"broadcast.155" -> "divide.156";
	"p1.3" -> "broadcast.157";
	"divide.156" -> "add.158";
	"broadcast.157" -> "add.158";
	"add.171" -> "divide.184";
	"add.158" -> "divide.184";
	"p0.1" -> "broadcast.185";
	"divide.184" -> "multiply.186";
	"broadcast.185" -> "multiply.186";
	"subtract.183" -> "add.187";
	"multiply.186" -> "add.187";
	"add.140" -> "tuple.188";
	"add.187" -> "tuple.188";
	"get-tuple-element.89" -> "tuple.188";
	"get-tuple-element.90" -> "tuple.188";
	"add.123" -> "tuple.188";
	"add.103" -> "tuple.188";
	"add.171" -> "tuple.188";
	"add.153" -> "tuple.188";
}