digraph HloModule { 
	"p41.875" [label="p41.875 \n f32[1]"];
	"p35.688" [label="p35.688 \n s64[1,128]"];
	"broadcast.184" [label="broadcast.184 \n s64[1,128]"];
	"compare.8" [label="compare.8 \n pred[1,128]"];
	"reshape.527" [label="reshape.527 \n pred[128]"];
	"p40.786" [label="p40.786 \n f32[16]"];
	"broadcast.799" [label="broadcast.799 \n f32[1,128,16]"];
	"p34.599" [label="p34.599 \n f32[16]"];
	"broadcast.612" [label="broadcast.612 \n f32[1,128,16]"];
	"p29.472" [label="p29.472 \n f32[16]"];
	"broadcast.485" [label="broadcast.485 \n f32[1,128,16]"];
	"p16.235" [label="p16.235 \n f32[16]"];
	"broadcast.248" [label="broadcast.248 \n f32[1,128,16]"];
	"p15.214" [label="p15.214 \n f32[30522,16]"];
	"p14.212" [label="p14.212 \n s64[1,128]"];
	"convert.6" [label="convert.6 \n u32[1,128]"];
	"reshape.383" [label="reshape.383 \n u32[128]"];
	"gather.223" [label="gather.223 \n f32[128,16]"];
	"p13.200" [label="p13.200 \n f32[2,16]"];
	"p12.198" [label="p12.198 \n s64[1,128]"];
	"convert.5" [label="convert.5 \n u32[1,128]"];
	"reshape.382" [label="reshape.382 \n u32[128]"];
	"gather.209" [label="gather.209 \n f32[128,16]"];
	"add.13" [label="add.13 \n f32[128,16]"];
	"p11.181" [label="p11.181 \n f32[512,16]"];
	"p10.177" [label="p10.177 \n s64[1,512]"];
	"convert.4" [label="convert.4 \n u32[1,512]"];
	"slice.0" [label="slice.0 \n u32[1,128]"];
	"reshape.381" [label="reshape.381 \n u32[128]"];
	"gather.190" [label="gather.190 \n f32[128,16]"];
	"add.16" [label="add.16 \n f32[128,16]"];
	"reshape.551" [label="reshape.551 \n f32[1,128,16]"];
	"constant.167" [label="constant.167 \n f32[] constant(1), metadata="];
	"broadcast.171" [label="broadcast.171 \n f32[128]"];
	"constant.162" [label="constant.162 \n f32[] constant(0), metadata="];
	"broadcast.166" [label="broadcast.166 \n f32[128]"];
	"p9.144" [label="p9.144 \n f32[16]"];
	"broadcast.244" [label="broadcast.244 \n f32[1,128,16]"];
	"multiply.247" [label="multiply.247 \n f32[1,128,16]"];
	"add.249" [label="add.249 \n f32[1,128,16]"];
	"constant.109" [label="constant.109 \n s64[] constant(214013), metadata="];
	"p8.108" [label="p8.108 \n s64[] parameter(8), frontend_attributes="];
	"multiply.110" [label="multiply.110 \n s64[] multiply(s64[] %constant.109, s64[] %p8.108), metadata="];
	"constant.111" [label="constant.111 \n s64[] constant(2531011), metadata="];
	"add.112" [label="add.112 \n s64[] add(s64[] %multiply.110, s64[] %constant.111), metadata="];
	"convert.119" [label="convert.119 \n u64[] convert(s64[] %add.112), metadata="];
	"reshape.121" [label="reshape.121 \n u64[1]"];
	"constant.41" [label="constant.41 \n u64[1]"];
	"concatenate.123" [label="concatenate.123 \n u64[2]"];
	"constant.127" [label="constant.127 \n u32[] constant(9), metadata="];
	"broadcast.128" [label="broadcast.128 \n u32[1,128,16]"];
	"convert.130" [label="convert.130 \n f32[1,128,16]"];
	"constant.131" [label="constant.131 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.132" [label="broadcast.132 \n f32[1,128,16]"];
	"multiply.136" [label="multiply.136 \n f32[1,128,16]"];
	"p7.107" [label="p7.107 \n f32[] parameter(7), frontend_attributes="];
	"broadcast.116" [label="broadcast.116 \n f32[1,128,16]"];
	"compare.139" [label="compare.139 \n pred[1,128,16]"];
	"constant.23" [label="constant.23 \n f32[] constant(1), metadata="];
	"broadcast.41" [label="broadcast.41 \n f32[1,128,16]"];
	"broadcast.98" [label="broadcast.98 \n f32[1,128,16]"];
	"select.13" [label="select.13 \n f32[1,128,16]"];
	"multiply.251" [label="multiply.251 \n f32[1,128,16]"];
	"reshape.404" [label="reshape.404 \n f32[128,16]"];
	"p28.402" [label="p28.402 \n f32[8,16]"];
	"transpose.403" [label="transpose.403 \n f32[16,8]"];
	"dot.405" [label="dot.405 \n f32[128,8]"];
	"reshape.406" [label="reshape.406 \n f32[1,128,8]"];
	"p27.400" [label="p27.400 \n f32[8]"];
	"broadcast.407" [label="broadcast.407 \n f32[1,128,8]"];
	"add.408" [label="add.408 \n f32[1,128,8]"];
	"reshape.39" [label="reshape.39 \n f32[128,8]"];
	"reshape.385" [label="reshape.385 \n f32[128,16]"];
	"p26.383" [label="p26.383 \n f32[8,16]"];
	"transpose.384" [label="transpose.384 \n f32[16,8]"];
	"dot.386" [label="dot.386 \n f32[128,8]"];
	"reshape.387" [label="reshape.387 \n f32[1,128,8]"];
	"p25.381" [label="p25.381 \n f32[8]"];
	"broadcast.388" [label="broadcast.388 \n f32[1,128,8]"];
	"add.389" [label="add.389 \n f32[1,128,8]"];
	"reshape.36" [label="reshape.36 \n f32[1,1,128,8]"];
	"transpose.392" [label="transpose.392 \n f32[1,1,8,128]"];
	"reshape.40" [label="reshape.40 \n f32[8,128]"];
	"p24.375" [label="p24.375 \n f32[] parameter(24), frontend_attributes="];
	"broadcast.186" [label="broadcast.186 \n f32[128,128]"];
	"divide.8" [label="divide.8 \n f32[128,128]"];
	"reshape.516" [label="reshape.516 \n f32[1,1,128,128]"];
	"constant.366" [label="constant.366 \n f32[] constant(1), metadata="];
	"broadcast.188" [label="broadcast.188 \n f32[1,128]"];
	"p23.354" [label="p23.354 \n s64[1,128]"];
	"convert.2" [label="convert.2 \n f32[1,128]"];
	"subtract.4" [label="subtract.4 \n f32[1,128]"];
	"p22.353" [label="p22.353 \n f32[] parameter(22), frontend_attributes="];
	"broadcast.194" [label="broadcast.194 \n f32[1,128]"];
	"multiply.31" [label="multiply.31 \n f32[1,128]"];
	"reshape.60" [label="reshape.60 \n f32[128]"];
	"broadcast.419" [label="broadcast.419 \n f32[1,1,128,128]"];
	"add.420" [label="add.420 \n f32[1,1,128,128]"];
	"constant.421" [label="constant.421 \n f32[] constant(-inf), metadata="];
	"reduce.426" [label="reduce.426 \n f32[1,1,128]"];
	"reshape.62" [label="reshape.62 \n f32[128]"];
	"broadcast.427" [label="broadcast.427 \n f32[1,1,128,128]"];
	"subtract.428" [label="subtract.428 \n f32[1,1,128,128]"];
	"exponential.429" [label="exponential.429 \n f32[1,1,128,128]"];
	"constant.430" [label="constant.430 \n f32[] constant(0), metadata="];
	"reduce.435" [label="reduce.435 \n f32[1,1,128]"];
	"reshape.63" [label="reshape.63 \n f32[128]"];
	"broadcast.436" [label="broadcast.436 \n f32[1,1,128,128]"];
	"divide.437" [label="divide.437 \n f32[1,1,128,128]"];
	"constant.252" [label="constant.252 \n s64[] constant(214013), metadata="];
	"multiply.253" [label="multiply.253 \n s64[] multiply(s64[] %constant.252, s64[] %add.112), metadata="];
	"constant.254" [label="constant.254 \n s64[] constant(2531011), metadata="];
	"add.255" [label="add.255 \n s64[] add(s64[] %multiply.253, s64[] %constant.254), metadata="];
	"convert.324" [label="convert.324 \n u64[] convert(s64[] %add.255), metadata="];
	"reshape.326" [label="reshape.326 \n u64[1]"];
	"constant.42" [label="constant.42 \n u64[1]"];
	"concatenate.328" [label="concatenate.328 \n u64[2]"];
	"constant.332" [label="constant.332 \n u32[] constant(9), metadata="];
	"broadcast.333" [label="broadcast.333 \n u32[1,1,128,128]"];
	"convert.335" [label="convert.335 \n f32[1,1,128,128]"];
	"constant.336" [label="constant.336 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.337" [label="broadcast.337 \n f32[1,1,128,128]"];
	"multiply.341" [label="multiply.341 \n f32[1,1,128,128]"];
	"broadcast.321" [label="broadcast.321 \n f32[1,1,128,128]"];
	"compare.344" [label="compare.344 \n pred[1,1,128,128]"];
	"constant.24" [label="constant.24 \n f32[] constant(1), metadata="];
	"broadcast.49" [label="broadcast.49 \n f32[1,1,128,128]"];
	"broadcast.92" [label="broadcast.92 \n f32[1,1,128,128]"];
	"select.12" [label="select.12 \n f32[1,1,128,128]"];
	"multiply.438" [label="multiply.438 \n f32[1,1,128,128]"];
	"reshape.78" [label="reshape.78 \n f32[128,128]"];
	"reshape.309" [label="reshape.309 \n f32[128,16]"];
	"p21.307" [label="p21.307 \n f32[8,16]"];
	"transpose.308" [label="transpose.308 \n f32[16,8]"];
	"dot.310" [label="dot.310 \n f32[128,8]"];
	"reshape.311" [label="reshape.311 \n f32[1,128,8]"];
	"p20.305" [label="p20.305 \n f32[8]"];
	"broadcast.312" [label="broadcast.312 \n f32[1,128,8]"];
	"add.313" [label="add.313 \n f32[1,128,8]"];
	"reshape.79" [label="reshape.79 \n f32[128,8]"];
	"dot.1" [label="dot.1 \n f32[128,8]"];
	"p19.298" [label="p19.298 \n f32[16,8]"];
	"transpose.299" [label="transpose.299 \n f32[8,16]"];
	"dot.446" [label="dot.446 \n f32[128,16]"];
	"reshape.447" [label="reshape.447 \n f32[1,128,16]"];
	"p18.297" [label="p18.297 \n f32[] parameter(18), frontend_attributes="];
	"p17.295" [label="p17.295 \n f32[16]"];
	"broadcast.460" [label="broadcast.460 \n f32[1,128,16]"];
	"add.461" [label="add.461 \n f32[1,128,16]"];
	"constant.256" [label="constant.256 \n s64[] constant(214013), metadata="];
	"multiply.257" [label="multiply.257 \n s64[] multiply(s64[] %constant.256, s64[] %add.255), metadata="];
	"constant.258" [label="constant.258 \n s64[] constant(2531011), metadata="];
	"add.259" [label="add.259 \n s64[] add(s64[] %multiply.257, s64[] %constant.258), metadata="];
	"convert.266" [label="convert.266 \n u64[] convert(s64[] %add.259), metadata="];
	"reshape.268" [label="reshape.268 \n u64[1]"];
	"constant.43" [label="constant.43 \n u64[1]"];
	"concatenate.270" [label="concatenate.270 \n u64[2]"];
	"constant.274" [label="constant.274 \n u32[] constant(9), metadata="];
	"broadcast.275" [label="broadcast.275 \n u32[1,128,16]"];
	"convert.277" [label="convert.277 \n f32[1,128,16]"];
	"constant.278" [label="constant.278 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.279" [label="broadcast.279 \n f32[1,128,16]"];
	"multiply.283" [label="multiply.283 \n f32[1,128,16]"];
	"broadcast.263" [label="broadcast.263 \n f32[1,128,16]"];
	"compare.286" [label="compare.286 \n pred[1,128,16]"];
	"constant.25" [label="constant.25 \n f32[] constant(1), metadata="];
	"broadcast.53" [label="broadcast.53 \n f32[1,128,16]"];
	"broadcast.88" [label="broadcast.88 \n f32[1,128,16]"];
	"select.11" [label="select.11 \n f32[1,128,16]"];
	"multiply.462" [label="multiply.462 \n f32[1,128,16]"];
	"add.463" [label="add.463 \n f32[1,128,16]"];
	"constant.97" [label="constant.97 \n f32[] constant(1), metadata="];
	"broadcast.101" [label="broadcast.101 \n f32[128]"];
	"constant.92" [label="constant.92 \n f32[] constant(0), metadata="];
	"broadcast.96" [label="broadcast.96 \n f32[128]"];
	"p6.74" [label="p6.74 \n f32[16]"];
	"broadcast.481" [label="broadcast.481 \n f32[1,128,16]"];
	"multiply.484" [label="multiply.484 \n f32[1,128,16]"];
	"add.486" [label="add.486 \n f32[1,128,16]"];
	"reshape.568" [label="reshape.568 \n f32[128,16]"];
	"p33.559" [label="p33.559 \n f32[4096,16]"];
	"transpose.567" [label="transpose.567 \n f32[16,4096]"];
	"dot.569" [label="dot.569 \n f32[128,4096]"];
	"reshape.570" [label="reshape.570 \n f32[1,128,4096]"];
	"p32.550" [label="p32.550 \n f32[4096]"];
	"broadcast.571" [label="broadcast.571 \n f32[1,128,4096]"];
	"add.572" [label="add.572 \n f32[1,128,4096]"];
	"reshape.582" [label="reshape.582 \n f32[128,4096]"];
	"p31.536" [label="p31.536 \n f32[16,4096]"];
	"transpose.544" [label="transpose.544 \n f32[4096,16]"];
	"dot.583" [label="dot.583 \n f32[128,16]"];
	"reshape.584" [label="reshape.584 \n f32[1,128,16]"];
	"p30.527" [label="p30.527 \n f32[16]"];
	"broadcast.585" [label="broadcast.585 \n f32[1,128,16]"];
	"add.586" [label="add.586 \n f32[1,128,16]"];
	"constant.488" [label="constant.488 \n s64[] constant(214013), metadata="];
	"multiply.489" [label="multiply.489 \n s64[] multiply(s64[] %constant.488, s64[] %add.259), metadata="];
	"constant.490" [label="constant.490 \n s64[] constant(2531011), metadata="];
	"add.491" [label="add.491 \n s64[] add(s64[] %multiply.489, s64[] %constant.490), metadata="];
	"convert.498" [label="convert.498 \n u64[] convert(s64[] %add.491), metadata="];
	"reshape.500" [label="reshape.500 \n u64[1]"];
	"constant.45" [label="constant.45 \n u64[1]"];
	"concatenate.502" [label="concatenate.502 \n u64[2]"];
	"constant.506" [label="constant.506 \n u32[] constant(9), metadata="];
	"broadcast.507" [label="broadcast.507 \n u32[1,128,16]"];
	"convert.509" [label="convert.509 \n f32[1,128,16]"];
	"constant.510" [label="constant.510 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.511" [label="broadcast.511 \n f32[1,128,16]"];
	"multiply.515" [label="multiply.515 \n f32[1,128,16]"];
	"broadcast.495" [label="broadcast.495 \n f32[1,128,16]"];
	"compare.518" [label="compare.518 \n pred[1,128,16]"];
	"constant.26" [label="constant.26 \n f32[] constant(1), metadata="];
	"broadcast.58" [label="broadcast.58 \n f32[1,128,16]"];
	"broadcast.85" [label="broadcast.85 \n f32[1,128,16]"];
	"select.10" [label="select.10 \n f32[1,128,16]"];
	"multiply.589" [label="multiply.589 \n f32[1,128,16]"];
	"add.590" [label="add.590 \n f32[1,128,16]"];
	"constant.63" [label="constant.63 \n f32[] constant(1), metadata="];
	"broadcast.67" [label="broadcast.67 \n f32[128]"];
	"constant.58" [label="constant.58 \n f32[] constant(0), metadata="];
	"broadcast.62" [label="broadcast.62 \n f32[128]"];
	"p5.40" [label="p5.40 \n f32[16]"];
	"broadcast.608" [label="broadcast.608 \n f32[1,128,16]"];
	"multiply.611" [label="multiply.611 \n f32[1,128,16]"];
	"add.613" [label="add.613 \n f32[1,128,16]"];
	"reshape.764" [label="reshape.764 \n f32[128,16]"];
	"p39.755" [label="p39.755 \n f32[16,16]"];
	"transpose.763" [label="transpose.763 \n f32[16,16]"];
	"dot.765" [label="dot.765 \n f32[128,16]"];
	"reshape.766" [label="reshape.766 \n f32[1,128,16]"];
	"p38.746" [label="p38.746 \n f32[16]"];
	"broadcast.767" [label="broadcast.767 \n f32[1,128,16]"];
	"add.768" [label="add.768 \n f32[1,128,16]"];
	"constant.736" [label="constant.736 \n f32[] constant(1), metadata="];
	"broadcast.740" [label="broadcast.740 \n f32[128]"];
	"constant.731" [label="constant.731 \n f32[] constant(0), metadata="];
	"broadcast.735" [label="broadcast.735 \n f32[128]"];
	"p37.713" [label="p37.713 \n f32[16]"];
	"broadcast.795" [label="broadcast.795 \n f32[1,128,16]"];
	"multiply.798" [label="multiply.798 \n f32[1,128,16]"];
	"add.800" [label="add.800 \n f32[1,128,16]"];
	"reshape.801" [label="reshape.801 \n f32[128,16]"];
	"transpose.711" [label="transpose.711 \n f32[16,30522]"];
	"dot.802" [label="dot.802 \n f32[128,30522]"];
	"reshape.803" [label="reshape.803 \n f32[1,128,30522]"];
	"p36.695" [label="p36.695 \n f32[30522]"];
	"broadcast.804" [label="broadcast.804 \n f32[1,128,30522]"];
	"add.805" [label="add.805 \n f32[1,128,30522]"];
	"reshape.808" [label="reshape.808 \n f32[128,30522]"];
	"reduce.0" [label="reduce.0 \n f32[128]"];
	"broadcast.0" [label="broadcast.0 \n f32[128,30522]"];
	"subtract.0" [label="subtract.0 \n f32[128,30522]"];
	"exponential.0" [label="exponential.0 \n f32[128,30522]"];
	"reduce.1" [label="reduce.1 \n f32[128]"];
	"log.0" [label="log.0 \n f32[128]"];
	"broadcast.1" [label="broadcast.1 \n f32[128,30522]"];
	"subtract.1" [label="subtract.1 \n f32[128,30522]"];
	"reshape.1" [label="reshape.1 \n s64[128]"];
	"broadcast.3" [label="broadcast.3 \n s64[128,30522]"];
	"iota.5" [label="iota.5 \n s64[128,30522]"];
	"compare.0" [label="compare.0 \n pred[128,30522]"];
	"broadcast.6" [label="broadcast.6 \n f32[128,30522]"];
	"broadcast.7" [label="broadcast.7 \n f32[128,30522]"];
	"select.0" [label="select.0 \n f32[128,30522]"];
	"multiply.2" [label="multiply.2 \n f32[128,30522]"];
	"reduce.2" [label="reduce.2 \n f32[128]"];
	"broadcast.61" [label="broadcast.61 \n f32[128]"];
	"select.6" [label="select.6 \n f32[128]"];
	"reduce.3" [label="reduce.3 \n f32[] reduce(f32[128]"];
	"convert.0" [label="convert.0 \n f32[128]"];
	"reduce.4" [label="reduce.4 \n f32[] reduce(f32[128]"];
	"negate.0" [label="negate.0 \n f32[] negate(f32[] %divide.0), metadata="];
	"p0.4" [label="p0.4 \n s64[1]"];
	"constant.49" [label="constant.49 \n s64[1]"];
	"compare.4" [label="compare.4 \n pred[1]"];
	"slice.615" [label="slice.615 \n f32[1,1,16]"];
	"reshape.144" [label="reshape.144 \n f32[16]"];
	"broadcast.198" [label="broadcast.198 \n f32[16,16]"];
	"p4.30" [label="p4.30 \n f32[16,16]"];
	"multiply.32" [label="multiply.32 \n f32[16,16]"];
	"reduce.18" [label="reduce.18 \n f32[16]"];
	"p3.22" [label="p3.22 \n f32[16]"];
	"add.14" [label="add.14 \n f32[16]"];
	"tanh.0" [label="tanh.0 \n f32[16]"];
	"broadcast.200" [label="broadcast.200 \n f32[2,16]"];
	"p2.13" [label="p2.13 \n f32[2,16]"];
	"multiply.33" [label="multiply.33 \n f32[2,16]"];
	"reduce.19" [label="reduce.19 \n f32[2]"];
	"p1.5" [label="p1.5 \n f32[2]"];
	"add.15" [label="add.15 \n f32[2]"];
	"reshape.522" [label="reshape.522 \n f32[1,2]"];
	"reduce.6" [label="reduce.6 \n f32[1]"];
	"reshape.150" [label="reshape.150 \n f32[] reshape(f32[1]"];
	"broadcast.17" [label="broadcast.17 \n f32[1,2]"];
	"subtract.2" [label="subtract.2 \n f32[1,2]"];
	"exponential.2" [label="exponential.2 \n f32[1,2]"];
	"reduce.7" [label="reduce.7 \n f32[1]"];
	"log.1" [label="log.1 \n f32[1]"];
	"reshape.151" [label="reshape.151 \n f32[] reshape(f32[1]"];
	"broadcast.18" [label="broadcast.18 \n f32[1,2]"];
	"subtract.3" [label="subtract.3 \n f32[1,2]"];
	"reshape.156" [label="reshape.156 \n s64[] reshape(s64[1]"];
	"broadcast.20" [label="broadcast.20 \n s64[1,2]"];
	"iota.2" [label="iota.2 \n s64[1,2]"];
	"compare.3" [label="compare.3 \n pred[1,2]"];
	"broadcast.22" [label="broadcast.22 \n f32[1,2]"];
	"broadcast.23" [label="broadcast.23 \n f32[1,2]"];
	"select.2" [label="select.2 \n f32[1,2]"];
	"multiply.7" [label="multiply.7 \n f32[1,2]"];
	"reduce.8" [label="reduce.8 \n f32[1]"];
	"constant.50" [label="constant.50 \n f32[1]"];
	"select.7" [label="select.7 \n f32[1]"];
	"convert.1" [label="convert.1 \n f32[1]"];
	"divide.9" [label="divide.9 \n f32[1]"];
	"negate.8" [label="negate.8 \n f32[1]"];
	"reshape.558" [label="reshape.558 \n f32[] reshape(f32[1]"];
	"add.872" [label="add.872 \n f32[] add(f32[] %negate.0, f32[] %reshape.558), metadata="];
	"reshape.164" [label="reshape.164 \n f32[1]"];
	"add.877" [label="add.877 \n f32[1]"];
	"exponential.3" [label="exponential.3 \n f32[1,2]"];
	"constant.59" [label="constant.59 \n f32[1]"];
	"divide.10" [label="divide.10 \n f32[1]"];
	"constant.51" [label="constant.51 \n f32[1]"];
	"select.8" [label="select.8 \n f32[1]"];
	"reshape.172" [label="reshape.172 \n f32[] reshape(f32[1]"];
	"broadcast.26" [label="broadcast.26 \n f32[1,2]"];
	"multiply.10" [label="multiply.10 \n f32[1,2]"];
	"reshape.177" [label="reshape.177 \n s64[] reshape(s64[1]"];
	"broadcast.28" [label="broadcast.28 \n s64[1,2]"];
	"iota.3" [label="iota.3 \n s64[1,2]"];
	"compare.5" [label="compare.5 \n pred[1,2]"];
	"negate.9" [label="negate.9 \n f32[1]"];
	"reshape.560" [label="reshape.560 \n f32[] reshape(f32[1]"];
	"broadcast.30" [label="broadcast.30 \n f32[1,2]"];
	"broadcast.31" [label="broadcast.31 \n f32[1,2]"];
	"select.3" [label="select.3 \n f32[1,2]"];
	"add.1" [label="add.1 \n f32[1,2]"];
	"reshape.922" [label="reshape.922 \n f32[2]"];
	"reshape.185" [label="reshape.185 \n f32[2]"];
	"broadcast.143" [label="broadcast.143 \n f32[2,16]"];
	"broadcast.144" [label="broadcast.144 \n f32[2,16]"];
	"multiply.22" [label="multiply.22 \n f32[2,16]"];
	"exponential.1" [label="exponential.1 \n f32[128,30522]"];
	"constant.880" [label="constant.880 \n f32[] constant(1), metadata="];
	"reduce.5" [label="reduce.5 \n f32[] reduce(f32[128]"];
	"broadcast.9" [label="broadcast.9 \n f32[128]"];
	"broadcast.74" [label="broadcast.74 \n f32[128]"];
	"select.9" [label="select.9 \n f32[128]"];
	"broadcast.10" [label="broadcast.10 \n f32[128,30522]"];
	"multiply.5" [label="multiply.5 \n f32[128,30522]"];
	"reshape.4" [label="reshape.4 \n s64[128]"];
	"broadcast.12" [label="broadcast.12 \n s64[128,30522]"];
	"iota.7" [label="iota.7 \n s64[128,30522]"];
	"compare.2" [label="compare.2 \n pred[128,30522]"];
	"broadcast.15" [label="broadcast.15 \n f32[128,30522]"];
	"broadcast.16" [label="broadcast.16 \n f32[128,30522]"];
	"select.1" [label="select.1 \n f32[128,30522]"];
	"add.0" [label="add.0 \n f32[128,30522]"];
	"constant.974" [label="constant.974 \n f32[] constant(0), metadata="];
	"reduce.980" [label="reduce.980 \n f32[30522]"];
	"reshape.1346" [label="reshape.1346 \n f32[128,16]"];
	"transpose.1347" [label="transpose.1347 \n f32[16,128]"];
	"dot.6" [label="dot.6 \n f32[30522,16]"];
	"constant.1326" [label="constant.1326 \n f32[] constant(0), metadata="];
	"broadcast.1330" [label="broadcast.1330 \n f32[30522,16]"];
	"reshape.1305" [label="reshape.1305 \n s64[128]"];
	"constant.1320" [label="constant.1320 \n s64[] constant(0), metadata="];
	"broadcast.1321" [label="broadcast.1321 \n s64[128]"];
	"compare.1322" [label="compare.1322 \n pred[128]"];
	"p42.1314" [label="p42.1314 \n s64[] parameter(42), frontend_attributes="];
	"broadcast.1318" [label="broadcast.1318 \n s64[128]"];
	"add.1319" [label="add.1319 \n s64[128]"];
	"select.1323" [label="select.1323 \n s64[128]"];
	"reshape.1324" [label="reshape.1324 \n s64[128,1]"];
	"convert.1306" [label="convert.1306 \n f32[128]"];
	"constant.1304" [label="constant.1304 \n f32[] constant(0), metadata="];
	"broadcast.1307" [label="broadcast.1307 \n f32[128]"];
	"compare.1308" [label="compare.1308 \n pred[128]"];
	"broadcast.1312" [label="broadcast.1312 \n pred[128,16]"];
	"constant.1000" [label="constant.1000 \n f32[] constant(1), metadata="];
	"broadcast.1004" [label="broadcast.1004 \n f32[128]"];
	"constant.231" [label="constant.231 \n f32[] constant(1e-12), metadata="];
	"broadcast.232" [label="broadcast.232 \n f32[128]"];
	"add.233" [label="add.233 \n f32[128]"];
	"multiply.1296" [label="multiply.1296 \n f32[128]"];
	"broadcast.75" [label="broadcast.75 \n f32[128]"];
	"add.8" [label="add.8 \n f32[128]"];
	"constant.1016" [label="constant.1016 \n f32[] constant(1), metadata="];
	"broadcast.1020" [label="broadcast.1020 \n f32[128]"];
	"constant.468" [label="constant.468 \n f32[] constant(1e-12), metadata="];
	"broadcast.469" [label="broadcast.469 \n f32[128]"];
	"add.470" [label="add.470 \n f32[128]"];
	"sqrt.1" [label="sqrt.1 \n f32[128]"];
	"multiply.1177" [label="multiply.1177 \n f32[128]"];
	"broadcast.76" [label="broadcast.76 \n f32[128]"];
	"add.9" [label="add.9 \n f32[128]"];
	"constant.1036" [label="constant.1036 \n f32[] constant(1), metadata="];
	"broadcast.1040" [label="broadcast.1040 \n f32[128]"];
	"constant.595" [label="constant.595 \n f32[] constant(1e-12), metadata="];
	"broadcast.596" [label="broadcast.596 \n f32[128]"];
	"add.597" [label="add.597 \n f32[128]"];
	"sqrt.2" [label="sqrt.2 \n f32[128]"];
	"multiply.1145" [label="multiply.1145 \n f32[128]"];
	"broadcast.77" [label="broadcast.77 \n f32[128]"];
	"add.10" [label="add.10 \n f32[128]"];
	"constant.1095" [label="constant.1095 \n f32[] constant(1), metadata="];
	"broadcast.1099" [label="broadcast.1099 \n f32[128]"];
	"constant.782" [label="constant.782 \n f32[] constant(1e-12), metadata="];
	"broadcast.783" [label="broadcast.783 \n f32[128]"];
	"add.784" [label="add.784 \n f32[128]"];
	"sqrt.3" [label="sqrt.3 \n f32[128]"];
	"multiply.1118" [label="multiply.1118 \n f32[128]"];
	"broadcast.78" [label="broadcast.78 \n f32[128]"];
	"add.11" [label="add.11 \n f32[128]"];
	"dot.1110" [label="dot.1110 \n f32[128,16]"];
	"reshape.1111" [label="reshape.1111 \n f32[1,128,16]"];
	"broadcast.1112" [label="broadcast.1112 \n f32[1,128,16]"];
	"multiply.1113" [label="multiply.1113 \n f32[1,128,16]"];
	"multiply.6" [label="multiply.6 \n f32[1,128,16]"];
	"reshape.1135" [label="reshape.1135 \n f32[128,16]"];
	"dot.1136" [label="dot.1136 \n f32[128,16]"];
	"reshape.1137" [label="reshape.1137 \n f32[1,128,16]"];
	"reshape.218" [label="reshape.218 \n f32[2]"];
	"broadcast.192" [label="broadcast.192 \n f32[2,16]"];
	"multiply.29" [label="multiply.29 \n f32[2,16]"];
	"reduce.20" [label="reduce.20 \n f32[16]"];
	"constant.1066" [label="constant.1066 \n f32[] constant(1), metadata="];
	"broadcast.202" [label="broadcast.202 \n f32[16]"];
	"multiply.34" [label="multiply.34 \n f32[16]"];
	"subtract.5" [label="subtract.5 \n f32[16]"];
	"multiply.35" [label="multiply.35 \n f32[16]"];
	"broadcast.193" [label="broadcast.193 \n f32[16,16]"];
	"multiply.30" [label="multiply.30 \n f32[16,16]"];
	"reduce.21" [label="reduce.21 \n f32[16]"];
	"reshape.1077" [label="reshape.1077 \n f32[1,1,16]"];
	"add.1138" [label="add.1138 \n f32[1,128,16]"];
	"broadcast.1139" [label="broadcast.1139 \n f32[1,128,16]"];
	"multiply.1140" [label="multiply.1140 \n f32[1,128,16]"];
	"multiply.1152" [label="multiply.1152 \n f32[1,128,16]"];
	"reshape.1153" [label="reshape.1153 \n f32[128,16]"];
	"dot.1154" [label="dot.1154 \n f32[128,4096]"];
	"reshape.1155" [label="reshape.1155 \n f32[1,128,4096]"];
	"multiply.11" [label="multiply.11 \n f32[1,128,4096]"];
	"reshape.1166" [label="reshape.1166 \n f32[128,4096]"];
	"dot.1167" [label="dot.1167 \n f32[128,16]"];
	"reshape.1168" [label="reshape.1168 \n f32[1,128,16]"];
	"add.1170" [label="add.1170 \n f32[1,128,16]"];
	"broadcast.1171" [label="broadcast.1171 \n f32[1,128,16]"];
	"multiply.1172" [label="multiply.1172 \n f32[1,128,16]"];
	"reshape.1191" [label="reshape.1191 \n f32[1,128,128]"];
	"transpose.1192" [label="transpose.1192 \n f32[1,128,128]"];
	"reshape.246" [label="reshape.246 \n f32[128,128]"];
	"multiply.1184" [label="multiply.1184 \n f32[1,128,16]"];
	"reshape.1185" [label="reshape.1185 \n f32[128,16]"];
	"dot.1186" [label="dot.1186 \n f32[128,8]"];
	"dot.9" [label="dot.9 \n f32[128,8]"];
	"dot.1198" [label="dot.1198 \n f32[128,16]"];
	"reshape.1199" [label="reshape.1199 \n f32[1,128,16]"];
	"add.1286" [label="add.1286 \n f32[1,128,16]"];
	"transpose.1229" [label="transpose.1229 \n f32[1,8,128]"];
	"reshape.271" [label="reshape.271 \n f32[8,128]"];
	"transpose.1211" [label="transpose.1211 \n f32[1,8,128]"];
	"reshape.265" [label="reshape.265 \n f32[8,128]"];
	"dot.10" [label="dot.10 \n f32[128,128]"];
	"reshape.1213" [label="reshape.1213 \n f32[1,1,128,128]"];
	"multiply.1214" [label="multiply.1214 \n f32[1,1,128,128]"];
	"multiply.1215" [label="multiply.1215 \n f32[1,1,128,128]"];
	"constant.1216" [label="constant.1216 \n f32[] constant(0), metadata="];
	"reduce.1221" [label="reduce.1221 \n f32[1,1,128]"];
	"reshape.270" [label="reshape.270 \n f32[128]"];
	"broadcast.1222" [label="broadcast.1222 \n f32[1,1,128,128]"];
	"subtract.1223" [label="subtract.1223 \n f32[1,1,128,128]"];
	"multiply.1224" [label="multiply.1224 \n f32[1,1,128,128]"];
	"broadcast.1225" [label="broadcast.1225 \n f32[1,1,128,128]"];
	"divide.1226" [label="divide.1226 \n f32[1,1,128,128]"];
	"reshape.272" [label="reshape.272 \n f32[128,128]"];
	"dot.11" [label="dot.11 \n f32[8,128]"];
	"reshape.1231" [label="reshape.1231 \n f32[1,1,8,128]"];
	"transpose.1233" [label="transpose.1233 \n f32[1,128,1,8]"];
	"reshape.1235" [label="reshape.1235 \n f32[128,8]"];
	"dot.1236" [label="dot.1236 \n f32[128,16]"];
	"reshape.1237" [label="reshape.1237 \n f32[1,128,16]"];
	"add.1287" [label="add.1287 \n f32[1,128,16]"];
	"reshape.280" [label="reshape.280 \n f32[128,128]"];
	"reshape.1248" [label="reshape.1248 \n f32[1,8,128]"];
	"transpose.1249" [label="transpose.1249 \n f32[1,128,8]"];
	"reshape.281" [label="reshape.281 \n f32[128,8]"];
	"dot.12" [label="dot.12 \n f32[128,8]"];
	"dot.1255" [label="dot.1255 \n f32[128,16]"];
	"reshape.1256" [label="reshape.1256 \n f32[1,128,16]"];
	"add.1288" [label="add.1288 \n f32[1,128,16]"];
	"multiply.1289" [label="multiply.1289 \n f32[1,128,16]"];
	"broadcast.1290" [label="broadcast.1290 \n f32[1,128,16]"];
	"multiply.1291" [label="multiply.1291 \n f32[1,128,16]"];
	"reshape.1303" [label="reshape.1303 \n f32[128,16]"];
	"constant.995" [label="constant.995 \n f32[] constant(0), metadata="];
	"broadcast.999" [label="broadcast.999 \n f32[128,16]"];
	"select.1313" [label="select.1313 \n f32[128,16]"];
	"scatter.1336" [label="scatter.1336 \n f32[30522,16]"];
	"add.1357" [label="add.1357 \n f32[30522,16]"];
	"constant.1358" [label="constant.1358 \n f32[] constant(0), metadata="];
	"reduce.1364" [label="reduce.1364 \n f32[16]"];
	"multiply.1380" [label="multiply.1380 \n f32[1,128,16]"];
	"constant.1381" [label="constant.1381 \n f32[] constant(0), metadata="];
	"reduce.1387" [label="reduce.1387 \n f32[16]"];
	"constant.1397" [label="constant.1397 \n f32[] constant(0), metadata="];
	"reduce.1403" [label="reduce.1403 \n f32[16]"];
	"reshape.1413" [label="reshape.1413 \n f32[128,16]"];
	"transpose.1414" [label="transpose.1414 \n f32[16,128]"];
	"dot.13" [label="dot.13 \n f32[16,16]"];
	"broadcast.179" [label="broadcast.179 \n f32[16,16]"];
	"slice.1441" [label="slice.1441 \n f32[1,1,16]"];
	"reshape.315" [label="reshape.315 \n f32[16]"];
	"broadcast.180" [label="broadcast.180 \n f32[16,16]"];
	"multiply.26" [label="multiply.26 \n f32[16,16]"];
	"constant.1453" [label="constant.1453 \n f32[] constant(0), metadata="];
	"reduce.1459" [label="reduce.1459 \n f32[16]"];
	"multiply.1475" [label="multiply.1475 \n f32[1,128,16]"];
	"constant.1476" [label="constant.1476 \n f32[] constant(0), metadata="];
	"reduce.1482" [label="reduce.1482 \n f32[16]"];
	"constant.1492" [label="constant.1492 \n f32[] constant(0), metadata="];
	"reduce.1498" [label="reduce.1498 \n f32[16]"];
	"reshape.1508" [label="reshape.1508 \n f32[128,4096]"];
	"transpose.1509" [label="transpose.1509 \n f32[4096,128]"];
	"dot.16" [label="dot.16 \n f32[16,4096]"];
	"constant.1519" [label="constant.1519 \n f32[] constant(0), metadata="];
	"reduce.1525" [label="reduce.1525 \n f32[4096]"];
	"reshape.1535" [label="reshape.1535 \n f32[128,16]"];
	"transpose.1536" [label="transpose.1536 \n f32[16,128]"];
	"dot.17" [label="dot.17 \n f32[4096,16]"];
	"constant.1546" [label="constant.1546 \n f32[] constant(0), metadata="];
	"reduce.1552" [label="reduce.1552 \n f32[16]"];
	"multiply.1568" [label="multiply.1568 \n f32[1,128,16]"];
	"constant.1569" [label="constant.1569 \n f32[] constant(0), metadata="];
	"reduce.1575" [label="reduce.1575 \n f32[16]"];
	"constant.1585" [label="constant.1585 \n f32[] constant(0), metadata="];
	"reduce.1591" [label="reduce.1591 \n f32[16]"];
	"reshape.1598" [label="reshape.1598 \n f32[128,16]"];
	"transpose.1599" [label="transpose.1599 \n f32[16,128]"];
	"dot.1600" [label="dot.1600 \n f32[16,8]"];
	"constant.1604" [label="constant.1604 \n f32[] constant(0), metadata="];
	"reduce.1610" [label="reduce.1610 \n f32[8]"];
	"transpose.1618" [label="transpose.1618 \n f32[8,128]"];
	"reshape.1613" [label="reshape.1613 \n f32[128,16]"];
	"dot.1619" [label="dot.1619 \n f32[8,16]"];
	"constant.1624" [label="constant.1624 \n f32[] constant(0), metadata="];
	"reduce.1630" [label="reduce.1630 \n f32[8]"];
	"reshape.1634" [label="reshape.1634 \n f32[1,1,8,128]"];
	"transpose.1636" [label="transpose.1636 \n f32[1,128,1,8]"];
	"reshape.1638" [label="reshape.1638 \n f32[128,8]"];
	"transpose.1639" [label="transpose.1639 \n f32[8,128]"];
	"reshape.1633" [label="reshape.1633 \n f32[128,16]"];
	"dot.1640" [label="dot.1640 \n f32[8,16]"];
	"constant.1644" [label="constant.1644 \n f32[] constant(0), metadata="];
	"reduce.1650" [label="reduce.1650 \n f32[8]"];
	"transpose.1658" [label="transpose.1658 \n f32[8,128]"];
	"reshape.1653" [label="reshape.1653 \n f32[128,16]"];
	"dot.1659" [label="dot.1659 \n f32[8,16]"];
	"constant.1660" [label="constant.1660 \n f32[] constant(0), metadata="];
	"reduce.1666" [label="reduce.1666 \n f32[16]"];
	"multiply.1682" [label="multiply.1682 \n f32[1,128,16]"];
	"constant.1683" [label="constant.1683 \n f32[] constant(0), metadata="];
	"reduce.1689" [label="reduce.1689 \n f32[16]"];
	"broadcast.32" [label="broadcast.32 \n f32[512,16]"];
	"slice.1700" [label="slice.1700 \n s64[1,128]"];
	"reshape.10" [label="reshape.10 \n s64[128]"];
	"broadcast.33" [label="broadcast.33 \n s64[128]"];
	"compare.6" [label="compare.6 \n pred[128]"];
	"broadcast.34" [label="broadcast.34 \n s64[128]"];
	"add.2" [label="add.2 \n s64[128]"];
	"select.4" [label="select.4 \n s64[128]"];
	"reshape.11" [label="reshape.11 \n s64[128,1]"];
	"reshape.12" [label="reshape.12 \n f32[128,16]"];
	"scatter.0" [label="scatter.0 \n f32[512,16]"];
	"broadcast.35" [label="broadcast.35 \n f32[2,16]"];
	"reshape.13" [label="reshape.13 \n s64[128]"];
	"broadcast.36" [label="broadcast.36 \n s64[128]"];
	"compare.7" [label="compare.7 \n pred[128]"];
	"broadcast.37" [label="broadcast.37 \n s64[128]"];
	"add.3" [label="add.3 \n s64[128]"];
	"select.5" [label="select.5 \n s64[128]"];
	"reshape.14" [label="reshape.14 \n s64[128,1]"];
	"reshape.15" [label="reshape.15 \n f32[128,16]"];
	"scatter.1" [label="scatter.1 \n f32[2,16]"];
	"tuple.1759" [label="tuple.1759 \n (f32[1]"]; 
 	"constant.7" -> "broadcast.184";
	"p35.688" -> "compare.8";
	"broadcast.184" -> "compare.8";
	"compare.8" -> "reshape.527";
	"p40.786" -> "custom-call.72";
	"custom-call.72" -> "broadcast.799";
	"p34.599" -> "custom-call.55";
	"custom-call.55" -> "broadcast.612";
	"p29.472" -> "custom-call.56";
	"custom-call.56" -> "broadcast.485";
	"p16.235" -> "custom-call.57";
	"custom-call.57" -> "broadcast.248";
	"p15.214" -> "custom-call.58";
	"p14.212" -> "convert.6";
	"convert.6" -> "reshape.383";
	"custom-call.58" -> "gather.223";
	"reshape.383" -> "gather.223";
	"p13.200" -> "custom-call.59";
	"p12.198" -> "convert.5";
	"convert.5" -> "reshape.382";
	"custom-call.59" -> "gather.209";
	"reshape.382" -> "gather.209";
	"gather.223" -> "add.13";
	"gather.209" -> "add.13";
	"p11.181" -> "custom-call.60";
	"p10.177" -> "convert.4";
	"convert.4" -> "slice.0";
	"slice.0" -> "reshape.381";
	"custom-call.60" -> "gather.190";
	"reshape.381" -> "gather.190";
	"add.13" -> "add.16";
	"gather.190" -> "add.16";
	"add.16" -> "reshape.551";
	"constant.167" -> "broadcast.171";
	"constant.162" -> "broadcast.166";
	"reshape.551" -> "batch-norm-training.227";
	"broadcast.171" -> "batch-norm-training.227";
	"broadcast.166" -> "batch-norm-training.227";
	"batch-norm-training.227" -> "get-tuple-element.228";
	"p9.144" -> "custom-call.61";
	"custom-call.61" -> "broadcast.244";
	"get-tuple-element.228" -> "multiply.247";
	"broadcast.244" -> "multiply.247";
	"broadcast.248" -> "add.249";
	"multiply.247" -> "add.249";
	"constant.109" -> "multiply.110";
	"p8.108" -> "multiply.110";
	"multiply.110" -> "add.112";
	"constant.111" -> "add.112";
	"add.112" -> "convert.119";
	"convert.119" -> "reshape.121";
	"reshape.121" -> "concatenate.123";
	"constant.41" -> "concatenate.123";
	"concatenate.123" -> "rng-bit-generator.124";
	"rng-bit-generator.124" -> "get-tuple-element.125";
	"constant.127" -> "broadcast.128";
	"get-tuple-element.125" -> "shift-right-logical.129";
	"broadcast.128" -> "shift-right-logical.129";
	"shift-right-logical.129" -> "convert.130";
	"constant.131" -> "broadcast.132";
	"convert.130" -> "multiply.136";
	"broadcast.132" -> "multiply.136";
	"p7.107" -> "broadcast.116";
	"multiply.136" -> "compare.139";
	"broadcast.116" -> "compare.139";
	"constant.23" -> "divide.4";
	"p7.107" -> "divide.4";
	"divide.4" -> "broadcast.41";
	"constant.34" -> "broadcast.98";
	"compare.139" -> "select.13";
	"broadcast.41" -> "select.13";
	"broadcast.98" -> "select.13";
	"add.249" -> "multiply.251";
	"select.13" -> "multiply.251";
	"multiply.251" -> "reshape.404";
	"p28.402" -> "transpose.403";
	"reshape.404" -> "dot.405";
	"transpose.403" -> "dot.405";
	"dot.405" -> "reshape.406";
	"p27.400" -> "broadcast.407";
	"reshape.406" -> "add.408";
	"broadcast.407" -> "add.408";
	"add.408" -> "reshape.39";
	"multiply.251" -> "reshape.385";
	"p26.383" -> "transpose.384";
	"reshape.385" -> "dot.386";
	"transpose.384" -> "dot.386";
	"dot.386" -> "reshape.387";
	"p25.381" -> "broadcast.388";
	"reshape.387" -> "add.389";
	"broadcast.388" -> "add.389";
	"add.389" -> "reshape.36";
	"reshape.36" -> "transpose.392";
	"transpose.392" -> "reshape.40";
	"reshape.39" -> "dot";
	"reshape.40" -> "dot";
	"p24.375" -> "broadcast.186";
	"dot" -> "divide.8";
	"broadcast.186" -> "divide.8";
	"divide.8" -> "reshape.516";
	"constant.366" -> "broadcast.188";
	"p23.354" -> "convert.2";
	"broadcast.188" -> "subtract.4";
	"convert.2" -> "subtract.4";
	"p22.353" -> "broadcast.194";
	"subtract.4" -> "multiply.31";
	"broadcast.194" -> "multiply.31";
	"multiply.31" -> "reshape.60";
	"reshape.60" -> "broadcast.419";
	"reshape.516" -> "add.420";
	"broadcast.419" -> "add.420";
	"add.420" -> "reduce.426";
	"constant.421" -> "reduce.426";
	"MaxComputation.422" -> "reduce.426";
	"reduce.426" -> "reshape.62";
	"reshape.62" -> "broadcast.427";
	"add.420" -> "subtract.428";
	"broadcast.427" -> "subtract.428";
	"subtract.428" -> "exponential.429";
	"exponential.429" -> "reduce.435";
	"constant.430" -> "reduce.435";
	"AddComputation.431" -> "reduce.435";
	"reduce.435" -> "reshape.63";
	"reshape.63" -> "broadcast.436";
	"exponential.429" -> "divide.437";
	"broadcast.436" -> "divide.437";
	"constant.252" -> "multiply.253";
	"add.112" -> "multiply.253";
	"multiply.253" -> "add.255";
	"constant.254" -> "add.255";
	"add.255" -> "convert.324";
	"convert.324" -> "reshape.326";
	"reshape.326" -> "concatenate.328";
	"constant.42" -> "concatenate.328";
	"concatenate.328" -> "rng-bit-generator.329";
	"rng-bit-generator.329" -> "get-tuple-element.330";
	"constant.332" -> "broadcast.333";
	"get-tuple-element.330" -> "shift-right-logical.334";
	"broadcast.333" -> "shift-right-logical.334";
	"shift-right-logical.334" -> "convert.335";
	"constant.336" -> "broadcast.337";
	"convert.335" -> "multiply.341";
	"broadcast.337" -> "multiply.341";
	"p7.107" -> "broadcast.321";
	"multiply.341" -> "compare.344";
	"broadcast.321" -> "compare.344";
	"constant.24" -> "divide.5";
	"p7.107" -> "divide.5";
	"divide.5" -> "broadcast.49";
	"constant.33" -> "broadcast.92";
	"compare.344" -> "select.12";
	"broadcast.49" -> "select.12";
	"broadcast.92" -> "select.12";
	"divide.437" -> "multiply.438";
	"select.12" -> "multiply.438";
	"multiply.438" -> "reshape.78";
	"multiply.251" -> "reshape.309";
	"p21.307" -> "transpose.308";
	"reshape.309" -> "dot.310";
	"transpose.308" -> "dot.310";
	"dot.310" -> "reshape.311";
	"p20.305" -> "broadcast.312";
	"reshape.311" -> "add.313";
	"broadcast.312" -> "add.313";
	"add.313" -> "reshape.79";
	"reshape.78" -> "dot.1";
	"reshape.79" -> "dot.1";
	"p19.298" -> "transpose.299";
	"dot.1" -> "dot.446";
	"transpose.299" -> "dot.446";
	"dot.446" -> "reshape.447";
	"reshape.447" -> "all-reduce.455";
	"p18.297" -> "all-reduce.455";
	"AddComputation.451" -> "all-reduce.455";
	"all-reduce.455" -> "get-tuple-element.456";
	"p17.295" -> "broadcast.460";
	"get-tuple-element.456" -> "add.461";
	"broadcast.460" -> "add.461";
	"constant.256" -> "multiply.257";
	"add.255" -> "multiply.257";
	"multiply.257" -> "add.259";
	"constant.258" -> "add.259";
	"add.259" -> "convert.266";
	"convert.266" -> "reshape.268";
	"reshape.268" -> "concatenate.270";
	"constant.43" -> "concatenate.270";
	"concatenate.270" -> "rng-bit-generator.271";
	"rng-bit-generator.271" -> "get-tuple-element.272";
	"constant.274" -> "broadcast.275";
	"get-tuple-element.272" -> "shift-right-logical.276";
	"broadcast.275" -> "shift-right-logical.276";
	"shift-right-logical.276" -> "convert.277";
	"constant.278" -> "broadcast.279";
	"convert.277" -> "multiply.283";
	"broadcast.279" -> "multiply.283";
	"p7.107" -> "broadcast.263";
	"multiply.283" -> "compare.286";
	"broadcast.263" -> "compare.286";
	"constant.25" -> "divide.6";
	"p7.107" -> "divide.6";
	"divide.6" -> "broadcast.53";
	"constant.32" -> "broadcast.88";
	"compare.286" -> "select.11";
	"broadcast.53" -> "select.11";
	"broadcast.88" -> "select.11";
	"add.461" -> "multiply.462";
	"select.11" -> "multiply.462";
	"multiply.462" -> "add.463";
	"multiply.251" -> "add.463";
	"constant.97" -> "broadcast.101";
	"constant.92" -> "broadcast.96";
	"add.463" -> "batch-norm-training.464";
	"broadcast.101" -> "batch-norm-training.464";
	"broadcast.96" -> "batch-norm-training.464";
	"batch-norm-training.464" -> "get-tuple-element.465";
	"p6.74" -> "custom-call.62";
	"custom-call.62" -> "broadcast.481";
	"get-tuple-element.465" -> "multiply.484";
	"broadcast.481" -> "multiply.484";
	"broadcast.485" -> "add.486";
	"multiply.484" -> "add.486";
	"add.486" -> "reshape.568";
	"p33.559" -> "custom-call.63";
	"custom-call.63" -> "transpose.567";
	"reshape.568" -> "dot.569";
	"transpose.567" -> "dot.569";
	"dot.569" -> "reshape.570";
	"p32.550" -> "custom-call.64";
	"custom-call.64" -> "broadcast.571";
	"reshape.570" -> "add.572";
	"broadcast.571" -> "add.572";
	"add.572" -> "custom-call.65";
	"custom-call.65" -> "reshape.582";
	"p31.536" -> "custom-call.66";
	"custom-call.66" -> "transpose.544";
	"reshape.582" -> "dot.583";
	"transpose.544" -> "dot.583";
	"dot.583" -> "reshape.584";
	"p30.527" -> "custom-call.67";
	"custom-call.67" -> "broadcast.585";
	"reshape.584" -> "add.586";
	"broadcast.585" -> "add.586";
	"constant.488" -> "multiply.489";
	"add.259" -> "multiply.489";
	"multiply.489" -> "add.491";
	"constant.490" -> "add.491";
	"add.491" -> "convert.498";
	"convert.498" -> "reshape.500";
	"reshape.500" -> "concatenate.502";
	"constant.45" -> "concatenate.502";
	"concatenate.502" -> "rng-bit-generator.503";
	"rng-bit-generator.503" -> "get-tuple-element.504";
	"constant.506" -> "broadcast.507";
	"get-tuple-element.504" -> "shift-right-logical.508";
	"broadcast.507" -> "shift-right-logical.508";
	"shift-right-logical.508" -> "convert.509";
	"constant.510" -> "broadcast.511";
	"convert.509" -> "multiply.515";
	"broadcast.511" -> "multiply.515";
	"p7.107" -> "broadcast.495";
	"multiply.515" -> "compare.518";
	"broadcast.495" -> "compare.518";
	"constant.26" -> "divide.7";
	"p7.107" -> "divide.7";
	"divide.7" -> "broadcast.58";
	"constant.31" -> "broadcast.85";
	"compare.518" -> "select.10";
	"broadcast.58" -> "select.10";
	"broadcast.85" -> "select.10";
	"add.586" -> "multiply.589";
	"select.10" -> "multiply.589";
	"multiply.589" -> "add.590";
	"add.486" -> "add.590";
	"constant.63" -> "broadcast.67";
	"constant.58" -> "broadcast.62";
	"add.590" -> "batch-norm-training.591";
	"broadcast.67" -> "batch-norm-training.591";
	"broadcast.62" -> "batch-norm-training.591";
	"batch-norm-training.591" -> "get-tuple-element.592";
	"p5.40" -> "custom-call.68";
	"custom-call.68" -> "broadcast.608";
	"get-tuple-element.592" -> "multiply.611";
	"broadcast.608" -> "multiply.611";
	"broadcast.612" -> "add.613";
	"multiply.611" -> "add.613";
	"add.613" -> "reshape.764";
	"p39.755" -> "custom-call.69";
	"custom-call.69" -> "transpose.763";
	"reshape.764" -> "dot.765";
	"transpose.763" -> "dot.765";
	"dot.765" -> "reshape.766";
	"p38.746" -> "custom-call.70";
	"custom-call.70" -> "broadcast.767";
	"reshape.766" -> "add.768";
	"broadcast.767" -> "add.768";
	"add.768" -> "custom-call.71";
	"constant.736" -> "broadcast.740";
	"constant.731" -> "broadcast.735";
	"custom-call.71" -> "batch-norm-training.778";
	"broadcast.740" -> "batch-norm-training.778";
	"broadcast.735" -> "batch-norm-training.778";
	"batch-norm-training.778" -> "get-tuple-element.779";
	"p37.713" -> "custom-call.73";
	"custom-call.73" -> "broadcast.795";
	"get-tuple-element.779" -> "multiply.798";
	"broadcast.795" -> "multiply.798";
	"broadcast.799" -> "add.800";
	"multiply.798" -> "add.800";
	"add.800" -> "reshape.801";
	"p15.214" -> "custom-call.74";
	"custom-call.74" -> "transpose.711";
	"reshape.801" -> "dot.802";
	"transpose.711" -> "dot.802";
	"dot.802" -> "reshape.803";
	"p36.695" -> "custom-call.75";
	"custom-call.75" -> "broadcast.804";
	"reshape.803" -> "add.805";
	"broadcast.804" -> "add.805";
	"add.805" -> "reshape.808";
	"add.805" -> "reduce.0";
	"constant.0" -> "reduce.0";
	"SimpleCrossEntropyLossForwardMax.809" -> "reduce.0";
	"reduce.0" -> "broadcast.0";
	"reshape.808" -> "subtract.0";
	"broadcast.0" -> "subtract.0";
	"subtract.0" -> "exponential.0";
	"exponential.0" -> "reduce.1";
	"constant.4" -> "reduce.1";
	"SimpleCrossEntropyLossForwardAdd.813" -> "reduce.1";
	"reduce.1" -> "log.0";
	"log.0" -> "broadcast.1";
	"subtract.0" -> "subtract.1";
	"broadcast.1" -> "subtract.1";
	"p35.688" -> "reshape.1";
	"reshape.1" -> "broadcast.3";
	"broadcast.3" -> "compare.0";
	"iota.5" -> "compare.0";
	"constant.5" -> "broadcast.6";
	"constant.6" -> "broadcast.7";
	"compare.0" -> "select.0";
	"broadcast.6" -> "select.0";
	"broadcast.7" -> "select.0";
	"subtract.1" -> "multiply.2";
	"select.0" -> "multiply.2";
	"multiply.2" -> "reduce.2";
	"constant.4" -> "reduce.2";
	"SimpleCrossEntropyLossForwardAdd.817" -> "reduce.2";
	"constant.27" -> "broadcast.61";
	"reshape.527" -> "select.6";
	"reduce.2" -> "select.6";
	"broadcast.61" -> "select.6";
	"select.6" -> "reduce.3";
	"constant.4" -> "reduce.3";
	"SimpleCrossEntropyLossForwardAdd.821" -> "reduce.3";
	"reshape.527" -> "convert.0";
	"convert.0" -> "reduce.4";
	"constant.4" -> "reduce.4";
	"SimpleCrossEntropyLossForwardAdd.825" -> "reduce.4";
	"reduce.3" -> "divide.0";
	"reduce.4" -> "divide.0";
	"divide.0" -> "negate.0";
	"p0.4" -> "compare.4";
	"constant.49" -> "compare.4";
	"add.613" -> "slice.615";
	"slice.615" -> "reshape.144";
	"reshape.144" -> "broadcast.198";
	"p4.30" -> "custom-call.78";
	"broadcast.198" -> "multiply.32";
	"custom-call.78" -> "multiply.32";
	"multiply.32" -> "reduce.18";
	"constant.35" -> "reduce.18";
	"scalar_add_computation" -> "reduce.18";
	"p3.22" -> "custom-call.79";
	"reduce.18" -> "add.14";
	"custom-call.79" -> "add.14";
	"add.14" -> "tanh.0";
	"tanh.0" -> "broadcast.200";
	"p2.13" -> "custom-call.80";
	"broadcast.200" -> "multiply.33";
	"custom-call.80" -> "multiply.33";
	"multiply.33" -> "reduce.19";
	"constant.36" -> "reduce.19";
	"scalar_add_computation" -> "reduce.19";
	"p1.5" -> "custom-call.81";
	"reduce.19" -> "add.15";
	"custom-call.81" -> "add.15";
	"add.15" -> "reshape.522";
	"reshape.522" -> "reduce.6";
	"constant.10" -> "reduce.6";
	"SimpleCrossEntropyLossForwardMax.626" -> "reduce.6";
	"reduce.6" -> "reshape.150";
	"reshape.150" -> "broadcast.17";
	"reshape.522" -> "subtract.2";
	"broadcast.17" -> "subtract.2";
	"subtract.2" -> "exponential.2";
	"exponential.2" -> "reduce.7";
	"constant.11" -> "reduce.7";
	"SimpleCrossEntropyLossForwardAdd.630" -> "reduce.7";
	"reduce.7" -> "log.1";
	"log.1" -> "reshape.151";
	"reshape.151" -> "broadcast.18";
	"subtract.2" -> "subtract.3";
	"broadcast.18" -> "subtract.3";
	"p0.4" -> "reshape.156";
	"reshape.156" -> "broadcast.20";
	"broadcast.20" -> "compare.3";
	"iota.2" -> "compare.3";
	"constant.12" -> "broadcast.22";
	"constant.13" -> "broadcast.23";
	"compare.3" -> "select.2";
	"broadcast.22" -> "select.2";
	"broadcast.23" -> "select.2";
	"subtract.3" -> "multiply.7";
	"select.2" -> "multiply.7";
	"multiply.7" -> "reduce.8";
	"constant.11" -> "reduce.8";
	"SimpleCrossEntropyLossForwardAdd.634" -> "reduce.8";
	"compare.4" -> "select.7";
	"reduce.8" -> "select.7";
	"constant.50" -> "select.7";
	"compare.4" -> "convert.1";
	"select.7" -> "divide.9";
	"convert.1" -> "divide.9";
	"divide.9" -> "negate.8";
	"negate.8" -> "reshape.558";
	"negate.0" -> "add.872";
	"reshape.558" -> "add.872";
	"add.872" -> "reshape.164";
	"p41.875" -> "add.877";
	"reshape.164" -> "add.877";
	"subtract.3" -> "exponential.3";
	"constant.59" -> "divide.10";
	"convert.1" -> "divide.10";
	"compare.4" -> "select.8";
	"divide.10" -> "select.8";
	"constant.51" -> "select.8";
	"select.8" -> "reshape.172";
	"reshape.172" -> "broadcast.26";
	"exponential.3" -> "multiply.10";
	"broadcast.26" -> "multiply.10";
	"p0.4" -> "reshape.177";
	"reshape.177" -> "broadcast.28";
	"broadcast.28" -> "compare.5";
	"iota.3" -> "compare.5";
	"divide.10" -> "negate.9";
	"negate.9" -> "reshape.560";
	"reshape.560" -> "broadcast.30";
	"constant.16" -> "broadcast.31";
	"compare.5" -> "select.3";
	"broadcast.30" -> "select.3";
	"broadcast.31" -> "select.3";
	"multiply.10" -> "add.1";
	"select.3" -> "add.1";
	"add.1" -> "reshape.922";
	"reshape.922" -> "custom-call.83";
	"add.1" -> "reshape.185";
	"reshape.185" -> "broadcast.143";
	"tanh.0" -> "broadcast.144";
	"broadcast.143" -> "multiply.22";
	"broadcast.144" -> "multiply.22";
	"multiply.22" -> "custom-call.84";
	"subtract.1" -> "exponential.1";
	"convert.0" -> "reduce.5";
	"constant.8" -> "reduce.5";
	"SimpleCrossEntropyLossBackwardAdd.940" -> "reduce.5";
	"constant.880" -> "divide.1";
	"reduce.5" -> "divide.1";
	"divide.1" -> "broadcast.9";
	"constant.30" -> "broadcast.74";
	"reshape.527" -> "select.9";
	"broadcast.9" -> "select.9";
	"broadcast.74" -> "select.9";
	"select.9" -> "broadcast.10";
	"exponential.1" -> "multiply.5";
	"broadcast.10" -> "multiply.5";
	"p35.688" -> "reshape.4";
	"reshape.4" -> "broadcast.12";
	"broadcast.12" -> "compare.2";
	"iota.7" -> "compare.2";
	"divide.1" -> "negate.1";
	"negate.1" -> "broadcast.15";
	"constant.9" -> "broadcast.16";
	"compare.2" -> "select.1";
	"broadcast.15" -> "select.1";
	"broadcast.16" -> "select.1";
	"multiply.5" -> "add.0";
	"select.1" -> "add.0";
	"add.0" -> "reduce.980";
	"constant.974" -> "reduce.980";
	"AddComputation.976" -> "reduce.980";
	"reduce.980" -> "custom-call.85";
	"add.800" -> "reshape.1346";
	"reshape.1346" -> "transpose.1347";
	"add.0" -> "dot.6";
	"transpose.1347" -> "dot.6";
	"dot.6" -> "custom-call.86";
	"constant.1326" -> "broadcast.1330";
	"p14.212" -> "reshape.1305";
	"constant.1320" -> "broadcast.1321";
	"reshape.1305" -> "compare.1322";
	"broadcast.1321" -> "compare.1322";
	"p42.1314" -> "broadcast.1318";
	"reshape.1305" -> "add.1319";
	"broadcast.1318" -> "add.1319";
	"compare.1322" -> "select.1323";
	"add.1319" -> "select.1323";
	"reshape.1305" -> "select.1323";
	"select.1323" -> "reshape.1324";
	"reshape.1305" -> "convert.1306";
	"constant.1304" -> "broadcast.1307";
	"convert.1306" -> "compare.1308";
	"broadcast.1307" -> "compare.1308";
	"compare.1308" -> "broadcast.1312";
	"constant.1000" -> "broadcast.1004";
	"batch-norm-training.227" -> "get-tuple-element.229";
	"batch-norm-training.227" -> "get-tuple-element.230";
	"constant.231" -> "broadcast.232";
	"get-tuple-element.230" -> "add.233";
	"broadcast.232" -> "add.233";
	"add.233" -> "sqrt";
	"sqrt" -> "multiply.1296";
	"sqrt" -> "multiply.1296";
	"constant.52" -> "broadcast.75";
	"multiply.1296" -> "add.8";
	"broadcast.75" -> "add.8";
	"constant.1016" -> "broadcast.1020";
	"batch-norm-training.464" -> "get-tuple-element.466";
	"batch-norm-training.464" -> "get-tuple-element.467";
	"constant.468" -> "broadcast.469";
	"get-tuple-element.467" -> "add.470";
	"broadcast.469" -> "add.470";
	"add.470" -> "sqrt.1";
	"sqrt.1" -> "multiply.1177";
	"sqrt.1" -> "multiply.1177";
	"constant.54" -> "broadcast.76";
	"multiply.1177" -> "add.9";
	"broadcast.76" -> "add.9";
	"constant.1036" -> "broadcast.1040";
	"batch-norm-training.591" -> "get-tuple-element.593";
	"batch-norm-training.591" -> "get-tuple-element.594";
	"constant.595" -> "broadcast.596";
	"get-tuple-element.594" -> "add.597";
	"broadcast.596" -> "add.597";
	"add.597" -> "sqrt.2";
	"sqrt.2" -> "multiply.1145";
	"sqrt.2" -> "multiply.1145";
	"constant.55" -> "broadcast.77";
	"multiply.1145" -> "add.10";
	"broadcast.77" -> "add.10";
	"constant.1095" -> "broadcast.1099";
	"batch-norm-training.778" -> "get-tuple-element.780";
	"batch-norm-training.778" -> "get-tuple-element.781";
	"constant.782" -> "broadcast.783";
	"get-tuple-element.781" -> "add.784";
	"broadcast.783" -> "add.784";
	"add.784" -> "sqrt.3";
	"sqrt.3" -> "multiply.1118";
	"sqrt.3" -> "multiply.1118";
	"constant.56" -> "broadcast.78";
	"multiply.1118" -> "add.11";
	"broadcast.78" -> "add.11";
	"add.0" -> "dot.1110";
	"custom-call.74" -> "dot.1110";
	"dot.1110" -> "reshape.1111";
	"custom-call.73" -> "broadcast.1112";
	"reshape.1111" -> "multiply.1113";
	"broadcast.1112" -> "multiply.1113";
	"custom-call.71" -> "batch-norm-grad.1121";
	"broadcast.1099" -> "batch-norm-grad.1121";
	"get-tuple-element.780" -> "batch-norm-grad.1121";
	"add.11" -> "batch-norm-grad.1121";
	"multiply.1113" -> "batch-norm-grad.1121";
	"batch-norm-grad.1121" -> "get-tuple-element.1122";
	"add.768" -> "custom-call.76";
	"get-tuple-element.1122" -> "multiply.6";
	"custom-call.76" -> "multiply.6";
	"multiply.6" -> "reshape.1135";
	"reshape.1135" -> "dot.1136";
	"custom-call.69" -> "dot.1136";
	"dot.1136" -> "reshape.1137";
	"add.1" -> "reshape.218";
	"reshape.218" -> "broadcast.192";
	"broadcast.192" -> "multiply.29";
	"custom-call.80" -> "multiply.29";
	"multiply.29" -> "reduce.20";
	"constant.37" -> "reduce.20";
	"scalar_add_computation" -> "reduce.20";
	"constant.1066" -> "broadcast.202";
	"tanh.0" -> "multiply.34";
	"tanh.0" -> "multiply.34";
	"broadcast.202" -> "subtract.5";
	"multiply.34" -> "subtract.5";
	"reduce.20" -> "multiply.35";
	"subtract.5" -> "multiply.35";
	"multiply.35" -> "broadcast.193";
	"broadcast.193" -> "multiply.30";
	"custom-call.78" -> "multiply.30";
	"multiply.30" -> "reduce.21";
	"constant.38" -> "reduce.21";
	"scalar_add_computation" -> "reduce.21";
	"reduce.21" -> "reshape.1077";
	"reshape.1077" -> "pad";
	"constant.57" -> "pad";
	"reshape.1137" -> "add.1138";
	"pad" -> "add.1138";
	"custom-call.68" -> "broadcast.1139";
	"add.1138" -> "multiply.1140";
	"broadcast.1139" -> "multiply.1140";
	"add.590" -> "batch-norm-grad.1148";
	"broadcast.1040" -> "batch-norm-grad.1148";
	"get-tuple-element.593" -> "batch-norm-grad.1148";
	"add.10" -> "batch-norm-grad.1148";
	"multiply.1140" -> "batch-norm-grad.1148";
	"batch-norm-grad.1148" -> "get-tuple-element.1149";
	"get-tuple-element.1149" -> "multiply.1152";
	"select.10" -> "multiply.1152";
	"multiply.1152" -> "reshape.1153";
	"reshape.1153" -> "dot.1154";
	"custom-call.66" -> "dot.1154";
	"dot.1154" -> "reshape.1155";
	"add.572" -> "custom-call.82";
	"reshape.1155" -> "multiply.11";
	"custom-call.82" -> "multiply.11";
	"multiply.11" -> "reshape.1166";
	"reshape.1166" -> "dot.1167";
	"custom-call.63" -> "dot.1167";
	"dot.1167" -> "reshape.1168";
	"get-tuple-element.1149" -> "add.1170";
	"reshape.1168" -> "add.1170";
	"custom-call.62" -> "broadcast.1171";
	"add.1170" -> "multiply.1172";
	"broadcast.1171" -> "multiply.1172";
	"add.463" -> "batch-norm-grad.1180";
	"broadcast.1020" -> "batch-norm-grad.1180";
	"get-tuple-element.466" -> "batch-norm-grad.1180";
	"add.9" -> "batch-norm-grad.1180";
	"multiply.1172" -> "batch-norm-grad.1180";
	"batch-norm-grad.1180" -> "get-tuple-element.1181";
	"multiply.438" -> "reshape.1191";
	"reshape.1191" -> "transpose.1192";
	"transpose.1192" -> "reshape.246";
	"get-tuple-element.1181" -> "multiply.1184";
	"select.11" -> "multiply.1184";
	"multiply.1184" -> "reshape.1185";
	"reshape.1185" -> "dot.1186";
	"p19.298" -> "dot.1186";
	"reshape.246" -> "dot.9";
	"dot.1186" -> "dot.9";
	"dot.9" -> "dot.1198";
	"p21.307" -> "dot.1198";
	"dot.1198" -> "reshape.1199";
	"all-reduce.455" -> "get-tuple-element.1202";
	"reshape.1199" -> "all-reduce.1207";
	"get-tuple-element.1202" -> "all-reduce.1207";
	"AddComputation.1203" -> "all-reduce.1207";
	"all-reduce.1207" -> "get-tuple-element.1208";
	"get-tuple-element.1181" -> "add.1286";
	"get-tuple-element.1208" -> "add.1286";
	"add.408" -> "transpose.1229";
	"transpose.1229" -> "reshape.271";
	"add.313" -> "transpose.1211";
	"transpose.1211" -> "reshape.265";
	"dot.1186" -> "dot.10";
	"reshape.265" -> "dot.10";
	"dot.10" -> "reshape.1213";
	"reshape.1213" -> "multiply.1214";
	"select.12" -> "multiply.1214";
	"multiply.1214" -> "multiply.1215";
	"divide.437" -> "multiply.1215";
	"multiply.1215" -> "reduce.1221";
	"constant.1216" -> "reduce.1221";
	"AddComputation.1217" -> "reduce.1221";
	"reduce.1221" -> "reshape.270";
	"reshape.270" -> "broadcast.1222";
	"multiply.1214" -> "subtract.1223";
	"broadcast.1222" -> "subtract.1223";
	"divide.437" -> "multiply.1224";
	"subtract.1223" -> "multiply.1224";
	"p24.375" -> "broadcast.1225";
	"multiply.1224" -> "divide.1226";
	"broadcast.1225" -> "divide.1226";
	"divide.1226" -> "reshape.272";
	"reshape.271" -> "dot.11";
	"reshape.272" -> "dot.11";
	"dot.11" -> "reshape.1231";
	"reshape.1231" -> "transpose.1233";
	"transpose.1233" -> "reshape.1235";
	"reshape.1235" -> "dot.1236";
	"p26.383" -> "dot.1236";
	"dot.1236" -> "reshape.1237";
	"all-reduce.1207" -> "get-tuple-element.1240";
	"reshape.1237" -> "all-reduce.1245";
	"get-tuple-element.1240" -> "all-reduce.1245";
	"AddComputation.1241" -> "all-reduce.1245";
	"all-reduce.1245" -> "get-tuple-element.1246";
	"add.1286" -> "add.1287";
	"get-tuple-element.1246" -> "add.1287";
	"divide.1226" -> "reshape.280";
	"transpose.392" -> "reshape.1248";
	"reshape.1248" -> "transpose.1249";
	"transpose.1249" -> "reshape.281";
	"reshape.280" -> "dot.12";
	"reshape.281" -> "dot.12";
	"dot.12" -> "dot.1255";
	"p28.402" -> "dot.1255";
	"dot.1255" -> "reshape.1256";
	"all-reduce.1245" -> "get-tuple-element.1259";
	"reshape.1256" -> "all-reduce.1264";
	"get-tuple-element.1259" -> "all-reduce.1264";
	"AddComputation.1260" -> "all-reduce.1264";
	"all-reduce.1264" -> "get-tuple-element.1265";
	"add.1287" -> "add.1288";
	"get-tuple-element.1265" -> "add.1288";
	"add.1288" -> "multiply.1289";
	"select.13" -> "multiply.1289";
	"custom-call.61" -> "broadcast.1290";
	"multiply.1289" -> "multiply.1291";
	"broadcast.1290" -> "multiply.1291";
	"reshape.551" -> "batch-norm-grad.1299";
	"broadcast.1004" -> "batch-norm-grad.1299";
	"get-tuple-element.229" -> "batch-norm-grad.1299";
	"add.8" -> "batch-norm-grad.1299";
	"multiply.1291" -> "batch-norm-grad.1299";
	"batch-norm-grad.1299" -> "get-tuple-element.1300";
	"get-tuple-element.1300" -> "reshape.1303";
	"constant.995" -> "broadcast.999";
	"broadcast.1312" -> "select.1313";
	"reshape.1303" -> "select.1313";
	"broadcast.999" -> "select.1313";
	"broadcast.1330" -> "scatter.1336";
	"reshape.1324" -> "scatter.1336";
	"select.1313" -> "scatter.1336";
	"ScatterCombiner.1332" -> "scatter.1336";
	"scatter.1336" -> "custom-call.87";
	"custom-call.86" -> "add.1357";
	"custom-call.87" -> "add.1357";
	"dot.1110" -> "reduce.1364";
	"constant.1358" -> "reduce.1364";
	"AddComputation.1360" -> "reduce.1364";
	"reduce.1364" -> "custom-call.88";
	"reshape.1111" -> "multiply.1380";
	"get-tuple-element.779" -> "multiply.1380";
	"multiply.1380" -> "reduce.1387";
	"constant.1381" -> "reduce.1387";
	"AddComputation.1383" -> "reduce.1387";
	"reduce.1387" -> "custom-call.89";
	"multiply.6" -> "reduce.1403";
	"constant.1397" -> "reduce.1403";
	"AddComputation.1399" -> "reduce.1403";
	"reduce.1403" -> "custom-call.90";
	"add.613" -> "reshape.1413";
	"reshape.1413" -> "transpose.1414";
	"reshape.1135" -> "dot.13";
	"transpose.1414" -> "dot.13";
	"dot.13" -> "custom-call.91";
	"multiply.35" -> "custom-call.92";
	"multiply.35" -> "broadcast.179";
	"add.613" -> "slice.1441";
	"slice.1441" -> "reshape.315";
	"reshape.315" -> "broadcast.180";
	"broadcast.179" -> "multiply.26";
	"broadcast.180" -> "multiply.26";
	"multiply.26" -> "custom-call.93";
	"add.1138" -> "reduce.1459";
	"constant.1453" -> "reduce.1459";
	"AddComputation.1455" -> "reduce.1459";
	"reduce.1459" -> "custom-call.94";
	"add.1138" -> "multiply.1475";
	"get-tuple-element.592" -> "multiply.1475";
	"multiply.1475" -> "reduce.1482";
	"constant.1476" -> "reduce.1482";
	"AddComputation.1478" -> "reduce.1482";
	"reduce.1482" -> "custom-call.95";
	"multiply.1152" -> "reduce.1498";
	"constant.1492" -> "reduce.1498";
	"AddComputation.1494" -> "reduce.1498";
	"reduce.1498" -> "custom-call.96";
	"custom-call.65" -> "reshape.1508";
	"reshape.1508" -> "transpose.1509";
	"reshape.1153" -> "dot.16";
	"transpose.1509" -> "dot.16";
	"dot.16" -> "custom-call.97";
	"multiply.11" -> "reduce.1525";
	"constant.1519" -> "reduce.1525";
	"AddComputation.1521" -> "reduce.1525";
	"reduce.1525" -> "custom-call.98";
	"add.486" -> "reshape.1535";
	"reshape.1535" -> "transpose.1536";
	"reshape.1166" -> "dot.17";
	"transpose.1536" -> "dot.17";
	"dot.17" -> "custom-call.99";
	"add.1170" -> "reduce.1552";
	"constant.1546" -> "reduce.1552";
	"AddComputation.1548" -> "reduce.1552";
	"reduce.1552" -> "custom-call.100";
	"add.1170" -> "multiply.1568";
	"get-tuple-element.465" -> "multiply.1568";
	"multiply.1568" -> "reduce.1575";
	"constant.1569" -> "reduce.1575";
	"AddComputation.1571" -> "reduce.1575";
	"reduce.1575" -> "custom-call.101";
	"multiply.1184" -> "reduce.1591";
	"constant.1585" -> "reduce.1591";
	"AddComputation.1587" -> "reduce.1591";
	"multiply.1184" -> "reshape.1598";
	"reshape.1598" -> "transpose.1599";
	"transpose.1599" -> "dot.1600";
	"dot.1" -> "dot.1600";
	"dot.9" -> "reduce.1610";
	"constant.1604" -> "reduce.1610";
	"AddComputation.1606" -> "reduce.1610";
	"dot.9" -> "transpose.1618";
	"multiply.251" -> "reshape.1613";
	"transpose.1618" -> "dot.1619";
	"reshape.1613" -> "dot.1619";
	"dot.11" -> "reduce.1630";
	"constant.1624" -> "reduce.1630";
	"AddComputation.1626" -> "reduce.1630";
	"dot.11" -> "reshape.1634";
	"reshape.1634" -> "transpose.1636";
	"transpose.1636" -> "reshape.1638";
	"reshape.1638" -> "transpose.1639";
	"multiply.251" -> "reshape.1633";
	"transpose.1639" -> "dot.1640";
	"reshape.1633" -> "dot.1640";
	"dot.12" -> "reduce.1650";
	"constant.1644" -> "reduce.1650";
	"AddComputation.1646" -> "reduce.1650";
	"dot.12" -> "transpose.1658";
	"multiply.251" -> "reshape.1653";
	"transpose.1658" -> "dot.1659";
	"reshape.1653" -> "dot.1659";
	"multiply.1289" -> "reduce.1666";
	"constant.1660" -> "reduce.1666";
	"AddComputation.1662" -> "reduce.1666";
	"reduce.1666" -> "custom-call.102";
	"multiply.1289" -> "multiply.1682";
	"get-tuple-element.228" -> "multiply.1682";
	"multiply.1682" -> "reduce.1689";
	"constant.1683" -> "reduce.1689";
	"AddComputation.1685" -> "reduce.1689";
	"reduce.1689" -> "custom-call.103";
	"constant.17" -> "broadcast.32";
	"p10.177" -> "slice.1700";
	"slice.1700" -> "reshape.10";
	"constant.18" -> "broadcast.33";
	"reshape.10" -> "compare.6";
	"broadcast.33" -> "compare.6";
	"constant.19" -> "broadcast.34";
	"reshape.10" -> "add.2";
	"broadcast.34" -> "add.2";
	"compare.6" -> "select.4";
	"reshape.10" -> "select.4";
	"add.2" -> "select.4";
	"select.4" -> "reshape.11";
	"get-tuple-element.1300" -> "reshape.12";
	"broadcast.32" -> "scatter.0";
	"reshape.11" -> "scatter.0";
	"reshape.12" -> "scatter.0";
	"Int32PermissiveEmbeddingScatterCombiner.1701" -> "scatter.0";
	"scatter.0" -> "custom-call.104";
	"constant.20" -> "broadcast.35";
	"p12.198" -> "reshape.13";
	"constant.21" -> "broadcast.36";
	"reshape.13" -> "compare.7";
	"broadcast.36" -> "compare.7";
	"constant.22" -> "broadcast.37";
	"reshape.13" -> "add.3";
	"broadcast.37" -> "add.3";
	"compare.7" -> "select.5";
	"reshape.13" -> "select.5";
	"add.3" -> "select.5";
	"select.5" -> "reshape.14";
	"get-tuple-element.1300" -> "reshape.15";
	"broadcast.35" -> "scatter.1";
	"reshape.14" -> "scatter.1";
	"reshape.15" -> "scatter.1";
	"Int32PermissiveEmbeddingScatterCombiner.1730" -> "scatter.1";
	"scatter.1" -> "custom-call.105";
	"add.877" -> "tuple.1759";
	"add.805" -> "tuple.1759";
	"reshape.522" -> "tuple.1759";
	"add.872" -> "tuple.1759";
	"add.872" -> "tuple.1759";
	"custom-call.83" -> "tuple.1759";
	"custom-call.84" -> "tuple.1759";
	"custom-call.85" -> "tuple.1759";
	"add.1357" -> "tuple.1759";
	"custom-call.88" -> "tuple.1759";
	"custom-call.89" -> "tuple.1759";
	"custom-call.90" -> "tuple.1759";
	"custom-call.91" -> "tuple.1759";
	"custom-call.92" -> "tuple.1759";
	"custom-call.93" -> "tuple.1759";
	"custom-call.94" -> "tuple.1759";
	"custom-call.95" -> "tuple.1759";
	"custom-call.96" -> "tuple.1759";
	"custom-call.97" -> "tuple.1759";
	"custom-call.98" -> "tuple.1759";
	"custom-call.99" -> "tuple.1759";
	"custom-call.100" -> "tuple.1759";
	"custom-call.101" -> "tuple.1759";
	"reduce.1591" -> "tuple.1759";
	"dot.1600" -> "tuple.1759";
	"reduce.1610" -> "tuple.1759";
	"dot.1619" -> "tuple.1759";
	"reduce.1630" -> "tuple.1759";
	"dot.1640" -> "tuple.1759";
	"reduce.1650" -> "tuple.1759";
	"dot.1659" -> "tuple.1759";
	"custom-call.102" -> "tuple.1759";
	"custom-call.103" -> "tuple.1759";
	"custom-call.104" -> "tuple.1759";
	"custom-call.105" -> "tuple.1759";
 }