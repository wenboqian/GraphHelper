digraph HloModule {
	"p8.72" [label="p8.72 \n f32[1,1]"];
	"p15.292" [label="p15.292 \n f32[] parameter(15), frontend_attributes="];
	"multiply.294" [label="multiply.294 \n f32[1,1]"];
	"p14.291" [label="p14.291 \n f32[] parameter(14), frontend_attributes="];
	"reshape.1" [label="reshape.1 \n f32[1,1]"];
	"multiply.297" [label="multiply.297 \n f32[1,1]"];
	"subtract.298" [label="subtract.298 \n f32[1,1]"];
	"p13.281" [label="p13.281 \n f32[] parameter(13), frontend_attributes="];
	"multiply.8" [label="multiply.8 \n f32[] multiply(f32[] %constant.38, f32[] %p13.281), metadata="];
	"reshape.90" [label="reshape.90 \n f32[1,1]"];
	"constant.3" [label="constant.3 \n f32[1,1]"];
	"constant.4" [label="constant.4 \n f32[1,1]"];
	"constant.5" [label="constant.5 \n f32[1,1]"];
	"constant.19" [label="constant.19 \n s64[] constant(214013), metadata="];
	"p6.18" [label="p6.18 \n s64[] parameter(6), frontend_attributes="];
	"multiply.20" [label="multiply.20 \n s64[] multiply(s64[] %constant.19, s64[] %p6.18), metadata="];
	"constant.21" [label="constant.21 \n s64[] constant(2531011), metadata="];
	"add.22" [label="add.22 \n s64[] add(s64[] %multiply.20, s64[] %constant.21), metadata="];
	"convert.25" [label="convert.25 \n u64[] convert(s64[] %add.22), metadata="];
	"reshape.27" [label="reshape.27 \n u64[1]"];
	"constant.6" [label="constant.6 \n u64[1]"];
	"concatenate.29" [label="concatenate.29 \n u64[2]"];
	"constant.8" [label="constant.8 \n u32[1]"];
	"convert.36" [label="convert.36 \n f32[1]"];
	"constant.9" [label="constant.9 \n f32[1]"];
	"multiply.42" [label="multiply.42 \n f32[1]"];
	"p5.17" [label="p5.17 \n f32[] parameter(5), frontend_attributes="];
	"slice.81" [label="slice.81 \n f32[1,1]"];
	"multiply.11" [label="multiply.11 \n f32[1,1]"];
	"p7.64" [label="p7.64 \n f32[1]"];
	"reshape.18" [label="reshape.18 \n f32[1,1]"];
	"add.85" [label="add.85 \n f32[1,1]"];
	"slice.116" [label="slice.116 \n f32[1,1]"];
	"multiply.12" [label="multiply.12 \n f32[1,1]"];
	"reshape.23" [label="reshape.23 \n f32[1,1]"];
	"add.120" [label="add.120 \n f32[1,1]"];
	"slice.136" [label="slice.136 \n f32[1,1]"];
	"reshape.169" [label="reshape.169 \n f32[1]"];
	"multiply.14" [label="multiply.14 \n f32[1,1]"];
	"multiply.15" [label="multiply.15 \n f32[1,1]"];
	"constant.17" [label="constant.17 \n f32[1]"];
	"p10.218" [label="p10.218 \n f32[1]"];
	"multiply.16" [label="multiply.16 \n f32[1,1]"];
	"reshape.44" [label="reshape.44 \n f32[1]"];
	"add.220" [label="add.220 \n f32[1]"];
	"multiply.17" [label="multiply.17 \n f32[1]"];
	"add.222" [label="add.222 \n f32[1]"];
	"p9.191" [label="p9.191 \n f32[] parameter(9), frontend_attributes="];
	"reshape.47" [label="reshape.47 \n f32[1]"];
	"divide.224" [label="divide.224 \n f32[1]"];
	"constant.18" [label="constant.18 \n f32[1]"];
	"power.245" [label="power.245 \n f32[1]"];
	"p4.12" [label="p4.12 \n f32[] parameter(4), frontend_attributes="];
	"reshape.49" [label="reshape.49 \n f32[1]"];
	"add.247" [label="add.247 \n f32[1]"];
	"divide.250" [label="divide.250 \n f32[1]"];
	"constant.25" [label="constant.25 \n f32[1]"];
	"compare.257" [label="compare.257 \n pred[1]"];
	"constant.27" [label="constant.27 \n f32[1]"];
	"select.259" [label="select.259 \n f32[1]"];
	"reshape.55" [label="reshape.55 \n f32[1,1]"];
	"multiply.261" [label="multiply.261 \n f32[1,1]"];
	"p12.277" [label="p12.277 \n f32[] parameter(12), frontend_attributes="];
	"reshape.57" [label="reshape.57 \n f32[1,1]"];
	"multiply.280" [label="multiply.280 \n f32[1,1]"];
	"add.287" [label="add.287 \n f32[1,1]"];
	"p11.262" [label="p11.262 \n f32[] parameter(11), frontend_attributes="];
	"multiply.7" [label="multiply.7 \n f32[] multiply(f32[] %constant.39, f32[] %p11.262), metadata="];
	"reshape.87" [label="reshape.87 \n f32[1,1]"];
	"multiply.268" [label="multiply.268 \n f32[1,1]"];
	"p3.6" [label="p3.6 \n f32[] parameter(3), frontend_attributes="];
	"reshape.60" [label="reshape.60 \n f32[1,1]"];
	"multiply.270" [label="multiply.270 \n f32[1,1]"];
	"add.271" [label="add.271 \n f32[1,1]"];
	"sqrt.272" [label="sqrt.272 \n f32[1,1]"];
	"p2.5" [label="p2.5 \n f32[] parameter(2), frontend_attributes="];
	"reshape.61" [label="reshape.61 \n f32[1,1]"];
	"divide.274" [label="divide.274 \n f32[1,1]"];
	"p1.3" [label="p1.3 \n f32[] parameter(1), frontend_attributes="];
	"reshape.62" [label="reshape.62 \n f32[1,1]"];
	"add.276" [label="add.276 \n f32[1,1]"];
	"divide.299" [label="divide.299 \n f32[1,1]"];
	"p0.1" [label="p0.1 \n f32[] parameter(0), frontend_attributes="];
	"reshape.63" [label="reshape.63 \n f32[1,1]"];
	"multiply.301" [label="multiply.301 \n f32[1,1]"];
	"add.302" [label="add.302 \n f32[1,1]"];
	"reshape.64" [label="reshape.64 \n f32[1]"];
	"multiply.344" [label="multiply.344 \n f32[1]"];
	"constant.29" [label="constant.29 \n f32[1]"];
	"multiply.347" [label="multiply.347 \n f32[1]"];
	"subtract.348" [label="subtract.348 \n f32[1]"];
	"multiply.10" [label="multiply.10 \n f32[] multiply(f32[] %constant.40, f32[] %p13.281), metadata="];
	"reshape.97" [label="reshape.97 \n f32[1]"];
	"constant.34" [label="constant.34 \n f32[1]"];
	"compare.312" [label="compare.312 \n pred[1]"];
	"constant.35" [label="constant.35 \n f32[1]"];
	"select.314" [label="select.314 \n f32[1]"];
	"multiply.315" [label="multiply.315 \n f32[1]"];
	"reshape.73" [label="reshape.73 \n f32[1]"];
	"multiply.332" [label="multiply.332 \n f32[1]"];
	"add.338" [label="add.338 \n f32[1]"];
	"multiply.9" [label="multiply.9 \n f32[] multiply(f32[] %constant.41, f32[] %p11.262), metadata="];
	"reshape.94" [label="reshape.94 \n f32[1]"];
	"multiply.321" [label="multiply.321 \n f32[1]"];
	"reshape.76" [label="reshape.76 \n f32[1]"];
	"multiply.323" [label="multiply.323 \n f32[1]"];
	"add.324" [label="add.324 \n f32[1]"];
	"sqrt.325" [label="sqrt.325 \n f32[1]"];
	"reshape.77" [label="reshape.77 \n f32[1]"];
	"divide.327" [label="divide.327 \n f32[1]"];
	"reshape.78" [label="reshape.78 \n f32[1]"];
	"add.329" [label="add.329 \n f32[1]"];
	"divide.349" [label="divide.349 \n f32[1]"];
	"reshape.79" [label="reshape.79 \n f32[1]"];
	"multiply.351" [label="multiply.351 \n f32[1]"];
	"add.352" [label="add.352 \n f32[1]"];
	"tuple.353" [label="tuple.353 \n (f32[1,1]"]; 
 	"p15.292" -> "reshape";
	"p8.72" -> "multiply.294";
	"reshape" -> "multiply.294";
	"p14.291" -> "reshape.1";
	"multiply.294" -> "multiply.297";
	"reshape.1" -> "multiply.297";
	"p8.72" -> "subtract.298";
	"multiply.297" -> "subtract.298";
	"constant.38" -> "multiply.8";
	"p13.281" -> "multiply.8";
	"multiply.8" -> "reshape.90";
	"constant.19" -> "multiply.20";
	"p6.18" -> "multiply.20";
	"multiply.20" -> "add.22";
	"constant.21" -> "add.22";
	"add.22" -> "convert.25";
	"convert.25" -> "reshape.27";
	"reshape.27" -> "concatenate.29";
	"constant.6" -> "concatenate.29";
	"concatenate.29" -> "rng-bit-generator.30";
	"rng-bit-generator.30" -> "get-tuple-element.31";
	"get-tuple-element.31" -> "shift-right-logical.35";
	"constant.8" -> "shift-right-logical.35";
	"shift-right-logical.35" -> "convert.36";
	"convert.36" -> "multiply.42";
	"constant.9" -> "multiply.42";
	"multiply.42" -> "all-reduce.52";
	"p5.17" -> "all-reduce.52";
	"AddComputation.48" -> "all-reduce.52";
	"all-reduce.52" -> "get-tuple-element.60";
	"constant.5" -> "all-gather.61";
	"get-tuple-element.60" -> "all-gather.61";
	"all-gather.61" -> "get-tuple-element.62";
	"get-tuple-element.62" -> "slice.81";
	"p8.72" -> "custom-call.6";
	"slice.81" -> "multiply.11";
	"custom-call.6" -> "multiply.11";
	"p7.64" -> "custom-call.7";
	"custom-call.7" -> "reshape.18";
	"multiply.11" -> "add.85";
	"reshape.18" -> "add.85";
	"all-gather.61" -> "get-tuple-element.88";
	"add.85" -> "all-gather.89";
	"get-tuple-element.88" -> "all-gather.89";
	"all-gather.89" -> "get-tuple-element.97";
	"constant.4" -> "all-gather.98";
	"get-tuple-element.97" -> "all-gather.98";
	"all-gather.98" -> "get-tuple-element.99";
	"get-tuple-element.99" -> "slice.116";
	"p8.72" -> "custom-call.8";
	"slice.116" -> "multiply.12";
	"custom-call.8" -> "multiply.12";
	"p7.64" -> "custom-call.9";
	"custom-call.9" -> "reshape.23";
	"multiply.12" -> "add.120";
	"reshape.23" -> "add.120";
	"all-gather.98" -> "get-tuple-element.123";
	"add.120" -> "all-gather.124";
	"get-tuple-element.123" -> "all-gather.124";
	"all-gather.124" -> "get-tuple-element.132";
	"constant.3" -> "all-gather.133";
	"get-tuple-element.132" -> "all-gather.133";
	"all-gather.133" -> "get-tuple-element.134";
	"get-tuple-element.134" -> "slice.136";
	"slice.136" -> "reshape.169";
	"reshape.169" -> "custom-call.10";
	"slice.136" -> "multiply.14";
	"slice.116" -> "multiply.14";
	"multiply.14" -> "custom-call.11";
	"custom-call.8" -> "multiply.15";
	"slice.136" -> "multiply.15";
	"all-gather.133" -> "get-tuple-element.142";
	"multiply.15" -> "all-gather.143";
	"get-tuple-element.142" -> "all-gather.143";
	"all-gather.143" -> "get-tuple-element.182";
	"custom-call.10" -> "all-reduce.187";
	"custom-call.11" -> "all-reduce.187";
	"get-tuple-element.182" -> "all-reduce.187";
	"AddComputation.183" -> "all-reduce.187";
	"all-reduce.187" -> "get-tuple-element.189";
	"get-tuple-element.189" -> "multiply.16";
	"get-tuple-element.189" -> "multiply.16";
	"multiply.16" -> "reshape.44";
	"p10.218" -> "add.220";
	"reshape.44" -> "add.220";
	"all-reduce.187" -> "get-tuple-element.188";
	"get-tuple-element.188" -> "multiply.17";
	"get-tuple-element.188" -> "multiply.17";
	"add.220" -> "add.222";
	"multiply.17" -> "add.222";
	"p9.191" -> "reshape.47";
	"add.222" -> "divide.224";
	"reshape.47" -> "divide.224";
	"all-reduce.187" -> "get-tuple-element.227";
	"divide.224" -> "all-reduce.232";
	"get-tuple-element.227" -> "all-reduce.232";
	"AddComputation.228" -> "all-reduce.232";
	"all-reduce.232" -> "get-tuple-element.236";
	"all-reduce.232" -> "get-tuple-element.237";
	"get-tuple-element.236" -> "all-reduce.242";
	"get-tuple-element.237" -> "all-reduce.242";
	"AddComputation.238" -> "all-reduce.242";
	"all-reduce.242" -> "get-tuple-element.243";
	"get-tuple-element.243" -> "power.245";
	"constant.18" -> "power.245";
	"p4.12" -> "reshape.49";
	"power.245" -> "add.247";
	"reshape.49" -> "add.247";
	"constant.17" -> "divide.250";
	"add.247" -> "divide.250";
	"divide.250" -> "compare.257";
	"constant.25" -> "compare.257";
	"compare.257" -> "select.259";
	"divide.250" -> "select.259";
	"constant.27" -> "select.259";
	"select.259" -> "reshape.55";
	"get-tuple-element.189" -> "multiply.261";
	"reshape.55" -> "multiply.261";
	"p12.277" -> "reshape.57";
	"multiply.261" -> "multiply.280";
	"reshape.57" -> "multiply.280";
	"reshape.90" -> "add.287";
	"multiply.280" -> "add.287";
	"constant.39" -> "multiply.7";
	"p11.262" -> "multiply.7";
	"multiply.7" -> "reshape.87";
	"multiply.261" -> "multiply.268";
	"multiply.261" -> "multiply.268";
	"p3.6" -> "reshape.60";
	"multiply.268" -> "multiply.270";
	"reshape.60" -> "multiply.270";
	"reshape.87" -> "add.271";
	"multiply.270" -> "add.271";
	"add.271" -> "sqrt.272";
	"p2.5" -> "reshape.61";
	"sqrt.272" -> "divide.274";
	"reshape.61" -> "divide.274";
	"p1.3" -> "reshape.62";
	"divide.274" -> "add.276";
	"reshape.62" -> "add.276";
	"add.287" -> "divide.299";
	"add.276" -> "divide.299";
	"p0.1" -> "reshape.63";
	"divide.299" -> "multiply.301";
	"reshape.63" -> "multiply.301";
	"subtract.298" -> "add.302";
	"multiply.301" -> "add.302";
	"p15.292" -> "reshape.64";
	"p7.64" -> "multiply.344";
	"reshape.64" -> "multiply.344";
	"multiply.344" -> "multiply.347";
	"constant.29" -> "multiply.347";
	"p7.64" -> "subtract.348";
	"multiply.347" -> "subtract.348";
	"constant.40" -> "multiply.10";
	"p13.281" -> "multiply.10";
	"multiply.10" -> "reshape.97";
	"divide.250" -> "compare.312";
	"constant.34" -> "compare.312";
	"compare.312" -> "select.314";
	"divide.250" -> "select.314";
	"constant.35" -> "select.314";
	"get-tuple-element.188" -> "multiply.315";
	"select.314" -> "multiply.315";
	"p12.277" -> "reshape.73";
	"multiply.315" -> "multiply.332";
	"reshape.73" -> "multiply.332";
	"reshape.97" -> "add.338";
	"multiply.332" -> "add.338";
	"constant.41" -> "multiply.9";
	"p11.262" -> "multiply.9";
	"multiply.9" -> "reshape.94";
	"multiply.315" -> "multiply.321";
	"multiply.315" -> "multiply.321";
	"p3.6" -> "reshape.76";
	"multiply.321" -> "multiply.323";
	"reshape.76" -> "multiply.323";
	"reshape.94" -> "add.324";
	"multiply.323" -> "add.324";
	"add.324" -> "sqrt.325";
	"p2.5" -> "reshape.77";
	"sqrt.325" -> "divide.327";
	"reshape.77" -> "divide.327";
	"p1.3" -> "reshape.78";
	"divide.327" -> "add.329";
	"reshape.78" -> "add.329";
	"add.338" -> "divide.349";
	"add.329" -> "divide.349";
	"p0.1" -> "reshape.79";
	"divide.349" -> "multiply.351";
	"reshape.79" -> "multiply.351";
	"subtract.348" -> "add.352";
	"multiply.351" -> "add.352";
	"add.302" -> "tuple.353";
	"add.352" -> "tuple.353";
	"multiply.315" -> "tuple.353";
	"multiply.261" -> "tuple.353";
	"power.245" -> "tuple.353";
	"add.287" -> "tuple.353";
	"add.271" -> "tuple.353";
	"add.338" -> "tuple.353";
	"add.324" -> "tuple.353";
}