digraph HloModule { 
	"iota.48" [label="iota.48 \n s32[128]"];
	"broadcast.49" [label="broadcast.49 \n s32[1,128]"];
	"p1.2" [label="p1.2 \n s32[1]"];
	"broadcast.50" [label="broadcast.50 \n s32[1,128]"];
	"compare.51" [label="compare.51 \n pred[1,128]"];
	"broadcast.55" [label="broadcast.55 \n pred[4,1,128]"];
	"broadcast.52" [label="broadcast.52 \n s32[4,128]"];
	"p2.3" [label="p2.3 \n s32[4]"];
	"broadcast.53" [label="broadcast.53 \n s32[4,128]"];
	"compare.54" [label="compare.54 \n pred[4,128]"];
	"broadcast.56" [label="broadcast.56 \n pred[4,1,128]"];
	"and.57" [label="and.57 \n pred[4,1,128]"];
	"reshape.278" [label="reshape.278 \n pred[4,128]"];
	"transpose.166" [label="transpose.166 \n f32[1,4,12,64]"];
	"reshape.115" [label="reshape.115 \n pred[4,128]"];
	"broadcast.116" [label="broadcast.116 \n pred[4,6,1,128]"];
	"p0.1" [label="p0.1 \n f32[768,1,4]"];
	"reshape.79" [label="reshape.79 \n f32[768,4]"];
	"convert.80" [label="convert.80 \n f32[768,4]"];
	"broadcast.82" [label="broadcast.82 \n f32[4]"];
	"broadcast.84" [label="broadcast.84 \n f32[4]"];
	"p9.10" [label="p9.10 \n f32[768]"];
	"broadcast.87" [label="broadcast.87 \n f32[768,4]"];
	"multiply.88" [label="multiply.88 \n f32[768,4]"];
	"p10.11" [label="p10.11 \n f32[768]"];
	"broadcast.89" [label="broadcast.89 \n f32[768,4]"];
	"add.90" [label="add.90 \n f32[768,4]"];
	"convert.91" [label="convert.91 \n f32[768,4]"];
	"reshape.92" [label="reshape.92 \n f32[768,1,4]"];
	"reshape.93" [label="reshape.93 \n f32[768,4]"];
	"p11.12" [label="p11.12 \n f32[768,384]"];
	"dot.94" [label="dot.94 \n f32[4,384]"];
	"p12.13" [label="p12.13 \n f32[384]"];
	"reshape.95" [label="reshape.95 \n f32[384]"];
	"broadcast.96" [label="broadcast.96 \n f32[4,384]"];
	"add.97" [label="add.97 \n f32[4,384]"];
	"reshape.106" [label="reshape.106 \n f32[1,4,6,64]"];
	"broadcast.110" [label="broadcast.110 \n f32[1,4,6,64]"];
	"divide.111" [label="divide.111 \n f32[1,4,6,64]"];
	"p5.6" [label="p5.6 \n f32[128,4,6,64]"];
	"dot.112" [label="dot.112 \n f32[4,6,1,128]"];
	"broadcast.114" [label="broadcast.114 \n f32[4,6,1,128]"];
	"select.117" [label="select.117 \n f32[4,6,1,128]"];
	"reduce.125" [label="reduce.125 \n f32[4,6,1]"];
	"broadcast.59" [label="broadcast.59 \n s32[4,1]"];
	"broadcast.58" [label="broadcast.58 \n s32[4,1]"];
	"compare.60" [label="compare.60 \n pred[4,1]"];
	"reshape.121" [label="reshape.121 \n pred[4]"];
	"broadcast.122" [label="broadcast.122 \n pred[4,6,1,1]"];
	"p13.14" [label="p13.14 \n f32[768,384]"];
	"dot.98" [label="dot.98 \n f32[4,384]"];
	"p14.15" [label="p14.15 \n f32[384]"];
	"reshape.99" [label="reshape.99 \n f32[384]"];
	"broadcast.100" [label="broadcast.100 \n f32[4,384]"];
	"add.101" [label="add.101 \n f32[4,384]"];
	"reshape.107" [label="reshape.107 \n f32[1,4,6,64]"];
	"dot.118" [label="dot.118 \n f32[4,6,1,1]"];
	"broadcast.120" [label="broadcast.120 \n f32[4,6,1,1]"];
	"select.123" [label="select.123 \n f32[4,6,1,1]"];
	"reduce.131" [label="reduce.131 \n f32[4,6,1]"];
	"maximum.137" [label="maximum.137 \n f32[4,6,1]"];
	"broadcast.138" [label="broadcast.138 \n f32[4,6,1,128]"];
	"subtract.139" [label="subtract.139 \n f32[4,6,1,128]"];
	"exponential.140" [label="exponential.140 \n f32[4,6,1,128]"];
	"convert.148" [label="convert.148 \n f32[4,6,1,128]"];
	"p6.7" [label="p6.7 \n f32[128,4,6,64]"];
	"dot.161" [label="dot.161 \n f32[4,6,1,64]"];
	"broadcast.149" [label="broadcast.149 \n f32[4,6,1,1]"];
	"subtract.150" [label="subtract.150 \n f32[4,6,1,1]"];
	"exponential.151" [label="exponential.151 \n f32[4,6,1,1]"];
	"convert.159" [label="convert.159 \n f32[4,6,1,1]"];
	"p15.16" [label="p15.16 \n f32[768,384]"];
	"dot.102" [label="dot.102 \n f32[4,384]"];
	"p16.17" [label="p16.17 \n f32[384]"];
	"reshape.103" [label="reshape.103 \n f32[384]"];
	"broadcast.104" [label="broadcast.104 \n f32[4,384]"];
	"add.105" [label="add.105 \n f32[4,384]"];
	"reshape.108" [label="reshape.108 \n f32[1,4,6,64]"];
	"dot.162" [label="dot.162 \n f32[4,6,1,64]"];
	"add.163" [label="add.163 \n f32[4,6,1,64]"];
	"reduce.142" [label="reduce.142 \n f32[4,6,1]"];
	"reduce.152" [label="reduce.152 \n f32[4,6,1]"];
	"add.158" [label="add.158 \n f32[4,6,1]"];
	"convert.160" [label="convert.160 \n f32[4,6,1]"];
	"broadcast.164" [label="broadcast.164 \n f32[4,6,1,64]"];
	"divide.165" [label="divide.165 \n f32[4,6,1,64]"];
	"transpose.166" [label="transpose.166 \n f32[1,4,6,64]"]; 
 	"iota.48" -> "broadcast.49";
	"p1.2" -> "broadcast.50";
	"broadcast.49" -> "compare.51";
	"broadcast.50" -> "compare.51";
	"compare.51" -> "broadcast.55";
	"iota.48" -> "broadcast.52";
	"p2.3" -> "broadcast.53";
	"broadcast.52" -> "compare.54";
	"broadcast.53" -> "compare.54";
	"compare.54" -> "broadcast.56";
	"broadcast.55" -> "and.57";
	"broadcast.56" -> "and.57";
	"and.57" -> "reshape.278";
	"reshape.278" -> "transpose.166";
	"and.57" -> "reshape.115";
	"reshape.115" -> "broadcast.116";
	"p0.1" -> "reshape.79";
	"reshape.79" -> "convert.80";
	"constant.81" -> "broadcast.82";
	"constant.83" -> "broadcast.84";
	"convert.80" -> "batch-norm-training.85";
	"broadcast.82" -> "batch-norm-training.85";
	"broadcast.84" -> "batch-norm-training.85";
	"batch-norm-training.85" -> "get-tuple-element.86";
	"p9.10" -> "custom-call.63";
	"custom-call.63" -> "broadcast.87";
	"get-tuple-element.86" -> "multiply.88";
	"broadcast.87" -> "multiply.88";
	"p10.11" -> "custom-call.64";
	"custom-call.64" -> "broadcast.89";
	"multiply.88" -> "add.90";
	"broadcast.89" -> "add.90";
	"add.90" -> "convert.91";
	"convert.91" -> "reshape.92";
	"reshape.92" -> "reshape.93";
	"p11.12" -> "custom-call.65";
	"reshape.93" -> "dot.94";
	"custom-call.65" -> "dot.94";
	"p12.13" -> "custom-call.66";
	"custom-call.66" -> "reshape.95";
	"reshape.95" -> "broadcast.96";
	"dot.94" -> "add.97";
	"broadcast.96" -> "add.97";
	"add.97" -> "reshape.106";
	"constant.109" -> "broadcast.110";
	"reshape.106" -> "divide.111";
	"broadcast.110" -> "divide.111";
	"p5.6" -> "custom-call.61";
	"divide.111" -> "dot.112";
	"custom-call.61" -> "dot.112";
	"constant.113" -> "broadcast.114";
	"broadcast.116" -> "select.117";
	"dot.112" -> "select.117";
	"broadcast.114" -> "select.117";
	"select.117" -> "reduce.125";
	"constant.124" -> "reduce.125";
	"reduce.125.MaxFunc.130" -> "reduce.125";
	"p1.2" -> "broadcast.59";
	"p2.3" -> "broadcast.58";
	"broadcast.59" -> "compare.60";
	"broadcast.58" -> "compare.60";
	"compare.60" -> "reshape.121";
	"reshape.121" -> "broadcast.122";
	"p13.14" -> "custom-call.67";
	"reshape.93" -> "dot.98";
	"custom-call.67" -> "dot.98";
	"p14.15" -> "custom-call.68";
	"custom-call.68" -> "reshape.99";
	"reshape.99" -> "broadcast.100";
	"dot.98" -> "add.101";
	"broadcast.100" -> "add.101";
	"add.101" -> "reshape.107";
	"divide.111" -> "dot.118";
	"reshape.107" -> "dot.118";
	"constant.119" -> "broadcast.120";
	"broadcast.122" -> "select.123";
	"dot.118" -> "select.123";
	"broadcast.120" -> "select.123";
	"select.123" -> "reduce.131";
	"constant.124" -> "reduce.131";
	"reduce.131.MaxFunc.136" -> "reduce.131";
	"reduce.125" -> "maximum.137";
	"reduce.131" -> "maximum.137";
	"maximum.137" -> "broadcast.138";
	"select.117" -> "subtract.139";
	"broadcast.138" -> "subtract.139";
	"subtract.139" -> "exponential.140";
	"exponential.140" -> "convert.148";
	"p6.7" -> "custom-call.62";
	"convert.148" -> "dot.161";
	"custom-call.62" -> "dot.161";
	"maximum.137" -> "broadcast.149";
	"select.123" -> "subtract.150";
	"broadcast.149" -> "subtract.150";
	"subtract.150" -> "exponential.151";
	"exponential.151" -> "convert.159";
	"p15.16" -> "custom-call.69";
	"reshape.93" -> "dot.102";
	"custom-call.69" -> "dot.102";
	"p16.17" -> "custom-call.70";
	"custom-call.70" -> "reshape.103";
	"reshape.103" -> "broadcast.104";
	"dot.102" -> "add.105";
	"broadcast.104" -> "add.105";
	"add.105" -> "reshape.108";
	"convert.159" -> "dot.162";
	"reshape.108" -> "dot.162";
	"dot.161" -> "add.163";
	"dot.162" -> "add.163";
	"exponential.140" -> "reduce.142";
	"constant.141" -> "reduce.142";
	"reduce.142.AddFunc.147" -> "reduce.142";
	"exponential.151" -> "reduce.152";
	"constant.141" -> "reduce.152";
	"reduce.152.AddFunc.157" -> "reduce.152";
	"reduce.142" -> "add.158";
	"reduce.152" -> "add.158";
	"add.158" -> "convert.160";
	"convert.160" -> "broadcast.164";
	"add.163" -> "divide.165";
	"broadcast.164" -> "divide.165";
	"divide.165" -> "transpose.166";
 }