digraph HloModule { 
	"p40.862" [label="p40.862 \n f32[1]"];
	"p34.675" [label="p34.675 \n s64[1,128]"];
	"broadcast.184" [label="broadcast.184 \n s64[1,128]"];
	"compare.8" [label="compare.8 \n pred[1,128]"];
	"reshape.447" [label="reshape.447 \n pred[128]"];
	"p39.773" [label="p39.773 \n f32[16]"];
	"broadcast.786" [label="broadcast.786 \n f32[1,128,16]"];
	"p33.586" [label="p33.586 \n f32[16]"];
	"broadcast.599" [label="broadcast.599 \n f32[1,128,16]"];
	"p28.459" [label="p28.459 \n f32[16]"];
	"broadcast.472" [label="broadcast.472 \n f32[1,128,16]"];
	"p16.235" [label="p16.235 \n f32[16]"];
	"broadcast.248" [label="broadcast.248 \n f32[1,128,16]"];
	"p15.214" [label="p15.214 \n f32[30522,16]"];
	"p14.212" [label="p14.212 \n s64[1,128]"];
	"convert.6" [label="convert.6 \n u32[1,128]"];
	"reshape.304" [label="reshape.304 \n u32[128]"];
	"gather.223" [label="gather.223 \n f32[128,16]"];
	"p13.200" [label="p13.200 \n f32[2,16]"];
	"p12.198" [label="p12.198 \n s64[1,128]"];
	"convert.5" [label="convert.5 \n u32[1,128]"];
	"reshape.303" [label="reshape.303 \n u32[128]"];
	"gather.209" [label="gather.209 \n f32[128,16]"];
	"add.13" [label="add.13 \n f32[128,16]"];
	"p11.181" [label="p11.181 \n f32[512,16]"];
	"p10.177" [label="p10.177 \n s64[1,512]"];
	"convert.4" [label="convert.4 \n u32[1,512]"];
	"slice.0" [label="slice.0 \n u32[1,128]"];
	"reshape.301" [label="reshape.301 \n u32[128]"];
	"gather.190" [label="gather.190 \n f32[128,16]"];
	"add.16" [label="add.16 \n f32[128,16]"];
	"reshape.469" [label="reshape.469 \n f32[1,128,16]"];
	"constant.167" [label="constant.167 \n f32[] constant(1), metadata="];
	"broadcast.171" [label="broadcast.171 \n f32[128]"];
	"constant.162" [label="constant.162 \n f32[] constant(0), metadata="];
	"broadcast.166" [label="broadcast.166 \n f32[128]"];
	"p9.144" [label="p9.144 \n f32[16]"];
	"broadcast.244" [label="broadcast.244 \n f32[1,128,16]"];
	"multiply.247" [label="multiply.247 \n f32[1,128,16]"];
	"add.249" [label="add.249 \n f32[1,128,16]"];
	"constant.109" [label="constant.109 \n s64[] constant(214013), metadata="];
	"p8.108" [label="p8.108 \n s64[] parameter(8), frontend_attributes="];
	"multiply.110" [label="multiply.110 \n s64[] multiply(s64[] %constant.109, s64[] %p8.108), metadata="];
	"constant.111" [label="constant.111 \n s64[] constant(2531011), metadata="];
	"add.112" [label="add.112 \n s64[] add(s64[] %multiply.110, s64[] %constant.111), metadata="];
	"convert.119" [label="convert.119 \n u64[] convert(s64[] %add.112), metadata="];
	"reshape.121" [label="reshape.121 \n u64[1]"];
	"constant.41" [label="constant.41 \n u64[1]"];
	"concatenate.123" [label="concatenate.123 \n u64[2]"];
	"constant.127" [label="constant.127 \n u32[] constant(9), metadata="];
	"broadcast.128" [label="broadcast.128 \n u32[1,128,16]"];
	"convert.130" [label="convert.130 \n f32[1,128,16]"];
	"constant.131" [label="constant.131 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.132" [label="broadcast.132 \n f32[1,128,16]"];
	"multiply.136" [label="multiply.136 \n f32[1,128,16]"];
	"p7.107" [label="p7.107 \n f32[] parameter(7), frontend_attributes="];
	"broadcast.116" [label="broadcast.116 \n f32[1,128,16]"];
	"compare.139" [label="compare.139 \n pred[1,128,16]"];
	"constant.23" [label="constant.23 \n f32[] constant(1), metadata="];
	"broadcast.41" [label="broadcast.41 \n f32[1,128,16]"];
	"broadcast.98" [label="broadcast.98 \n f32[1,128,16]"];
	"select.13" [label="select.13 \n f32[1,128,16]"];
	"multiply.251" [label="multiply.251 \n f32[1,128,16]"];
	"reshape.403" [label="reshape.403 \n f32[128,16]"];
	"p27.401" [label="p27.401 \n f32[16,16]"];
	"transpose.402" [label="transpose.402 \n f32[16,16]"];
	"dot.404" [label="dot.404 \n f32[128,16]"];
	"reshape.405" [label="reshape.405 \n f32[1,128,16]"];
	"p26.399" [label="p26.399 \n f32[16]"];
	"broadcast.406" [label="broadcast.406 \n f32[1,128,16]"];
	"add.407" [label="add.407 \n f32[1,128,16]"];
	"reshape.408" [label="reshape.408 \n f32[1,128,2,8]"];
	"transpose.409" [label="transpose.409 \n f32[1,2,128,8]"];
	"reshape.411" [label="reshape.411 \n f32[2,128,8]"];
	"reshape.384" [label="reshape.384 \n f32[128,16]"];
	"p25.382" [label="p25.382 \n f32[16,16]"];
	"transpose.383" [label="transpose.383 \n f32[16,16]"];
	"dot.385" [label="dot.385 \n f32[128,16]"];
	"reshape.386" [label="reshape.386 \n f32[1,128,16]"];
	"p24.380" [label="p24.380 \n f32[16]"];
	"broadcast.387" [label="broadcast.387 \n f32[1,128,16]"];
	"add.388" [label="add.388 \n f32[1,128,16]"];
	"reshape.389" [label="reshape.389 \n f32[1,128,2,8]"];
	"transpose.391" [label="transpose.391 \n f32[1,2,8,128]"];
	"reshape.393" [label="reshape.393 \n f32[2,8,128]"];
	"dot.412" [label="dot.412 \n f32[2,128,128]"];
	"p23.374" [label="p23.374 \n f32[] parameter(23), frontend_attributes="];
	"broadcast.186" [label="broadcast.186 \n f32[2,128,128]"];
	"divide.8" [label="divide.8 \n f32[2,128,128]"];
	"reshape.433" [label="reshape.433 \n f32[1,2,128,128]"];
	"constant.365" [label="constant.365 \n f32[] constant(1), metadata="];
	"broadcast.188" [label="broadcast.188 \n f32[1,128]"];
	"p22.353" [label="p22.353 \n s64[1,128]"];
	"convert.2" [label="convert.2 \n f32[1,128]"];
	"subtract.4" [label="subtract.4 \n f32[1,128]"];
	"p21.352" [label="p21.352 \n f32[] parameter(21), frontend_attributes="];
	"broadcast.194" [label="broadcast.194 \n f32[1,128]"];
	"multiply.31" [label="multiply.31 \n f32[1,128]"];
	"reshape.50" [label="reshape.50 \n f32[128]"];
	"broadcast.418" [label="broadcast.418 \n f32[1,2,128,128]"];
	"add.419" [label="add.419 \n f32[1,2,128,128]"];
	"constant.420" [label="constant.420 \n f32[] constant(-inf), metadata="];
	"reduce.425" [label="reduce.425 \n f32[1,2,128]"];
	"reshape.52" [label="reshape.52 \n f32[2,128]"];
	"broadcast.426" [label="broadcast.426 \n f32[1,2,128,128]"];
	"subtract.427" [label="subtract.427 \n f32[1,2,128,128]"];
	"exponential.428" [label="exponential.428 \n f32[1,2,128,128]"];
	"constant.429" [label="constant.429 \n f32[] constant(0), metadata="];
	"reduce.434" [label="reduce.434 \n f32[1,2,128]"];
	"reshape.53" [label="reshape.53 \n f32[2,128]"];
	"broadcast.435" [label="broadcast.435 \n f32[1,2,128,128]"];
	"divide.436" [label="divide.436 \n f32[1,2,128,128]"];
	"constant.252" [label="constant.252 \n s64[] constant(214013), metadata="];
	"multiply.253" [label="multiply.253 \n s64[] multiply(s64[] %constant.252, s64[] %add.112), metadata="];
	"constant.254" [label="constant.254 \n s64[] constant(2531011), metadata="];
	"add.255" [label="add.255 \n s64[] add(s64[] %multiply.253, s64[] %constant.254), metadata="];
	"convert.323" [label="convert.323 \n u64[] convert(s64[] %add.255), metadata="];
	"reshape.325" [label="reshape.325 \n u64[1]"];
	"constant.42" [label="constant.42 \n u64[1]"];
	"concatenate.327" [label="concatenate.327 \n u64[2]"];
	"constant.331" [label="constant.331 \n u32[] constant(9), metadata="];
	"broadcast.332" [label="broadcast.332 \n u32[1,2,128,128]"];
	"convert.334" [label="convert.334 \n f32[1,2,128,128]"];
	"constant.335" [label="constant.335 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.336" [label="broadcast.336 \n f32[1,2,128,128]"];
	"multiply.340" [label="multiply.340 \n f32[1,2,128,128]"];
	"broadcast.320" [label="broadcast.320 \n f32[1,2,128,128]"];
	"compare.343" [label="compare.343 \n pred[1,2,128,128]"];
	"constant.24" [label="constant.24 \n f32[] constant(1), metadata="];
	"broadcast.49" [label="broadcast.49 \n f32[1,2,128,128]"];
	"broadcast.92" [label="broadcast.92 \n f32[1,2,128,128]"];
	"select.12" [label="select.12 \n f32[1,2,128,128]"];
	"multiply.437" [label="multiply.437 \n f32[1,2,128,128]"];
	"reshape.439" [label="reshape.439 \n f32[2,128,128]"];
	"reshape.308" [label="reshape.308 \n f32[128,16]"];
	"p20.306" [label="p20.306 \n f32[16,16]"];
	"transpose.307" [label="transpose.307 \n f32[16,16]"];
	"dot.309" [label="dot.309 \n f32[128,16]"];
	"reshape.310" [label="reshape.310 \n f32[1,128,16]"];
	"p19.304" [label="p19.304 \n f32[16]"];
	"broadcast.311" [label="broadcast.311 \n f32[1,128,16]"];
	"add.312" [label="add.312 \n f32[1,128,16]"];
	"reshape.313" [label="reshape.313 \n f32[1,128,2,8]"];
	"transpose.314" [label="transpose.314 \n f32[1,2,128,8]"];
	"reshape.316" [label="reshape.316 \n f32[2,128,8]"];
	"dot.440" [label="dot.440 \n f32[2,128,8]"];
	"reshape.441" [label="reshape.441 \n f32[1,2,128,8]"];
	"transpose.442" [label="transpose.442 \n f32[1,128,2,8]"];
	"reshape.444" [label="reshape.444 \n f32[128,16]"];
	"p18.297" [label="p18.297 \n f32[16,16]"];
	"transpose.298" [label="transpose.298 \n f32[16,16]"];
	"dot.445" [label="dot.445 \n f32[128,16]"];
	"reshape.446" [label="reshape.446 \n f32[1,128,16]"];
	"p17.295" [label="p17.295 \n f32[16]"];
	"broadcast.447" [label="broadcast.447 \n f32[1,128,16]"];
	"add.448" [label="add.448 \n f32[1,128,16]"];
	"constant.256" [label="constant.256 \n s64[] constant(214013), metadata="];
	"multiply.257" [label="multiply.257 \n s64[] multiply(s64[] %constant.256, s64[] %add.255), metadata="];
	"constant.258" [label="constant.258 \n s64[] constant(2531011), metadata="];
	"add.259" [label="add.259 \n s64[] add(s64[] %multiply.257, s64[] %constant.258), metadata="];
	"convert.266" [label="convert.266 \n u64[] convert(s64[] %add.259), metadata="];
	"reshape.268" [label="reshape.268 \n u64[1]"];
	"constant.43" [label="constant.43 \n u64[1]"];
	"concatenate.270" [label="concatenate.270 \n u64[2]"];
	"constant.274" [label="constant.274 \n u32[] constant(9), metadata="];
	"broadcast.275" [label="broadcast.275 \n u32[1,128,16]"];
	"convert.277" [label="convert.277 \n f32[1,128,16]"];
	"constant.278" [label="constant.278 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.279" [label="broadcast.279 \n f32[1,128,16]"];
	"multiply.283" [label="multiply.283 \n f32[1,128,16]"];
	"broadcast.263" [label="broadcast.263 \n f32[1,128,16]"];
	"compare.286" [label="compare.286 \n pred[1,128,16]"];
	"constant.25" [label="constant.25 \n f32[] constant(1), metadata="];
	"broadcast.53" [label="broadcast.53 \n f32[1,128,16]"];
	"broadcast.88" [label="broadcast.88 \n f32[1,128,16]"];
	"select.11" [label="select.11 \n f32[1,128,16]"];
	"multiply.449" [label="multiply.449 \n f32[1,128,16]"];
	"add.450" [label="add.450 \n f32[1,128,16]"];
	"constant.97" [label="constant.97 \n f32[] constant(1), metadata="];
	"broadcast.101" [label="broadcast.101 \n f32[128]"];
	"constant.92" [label="constant.92 \n f32[] constant(0), metadata="];
	"broadcast.96" [label="broadcast.96 \n f32[128]"];
	"p6.74" [label="p6.74 \n f32[16]"];
	"broadcast.468" [label="broadcast.468 \n f32[1,128,16]"];
	"multiply.471" [label="multiply.471 \n f32[1,128,16]"];
	"add.473" [label="add.473 \n f32[1,128,16]"];
	"reshape.555" [label="reshape.555 \n f32[128,16]"];
	"p32.546" [label="p32.546 \n f32[4096,16]"];
	"transpose.554" [label="transpose.554 \n f32[16,4096]"];
	"dot.556" [label="dot.556 \n f32[128,4096]"];
	"reshape.557" [label="reshape.557 \n f32[1,128,4096]"];
	"p31.537" [label="p31.537 \n f32[4096]"];
	"broadcast.558" [label="broadcast.558 \n f32[1,128,4096]"];
	"add.559" [label="add.559 \n f32[1,128,4096]"];
	"reshape.569" [label="reshape.569 \n f32[128,4096]"];
	"p30.523" [label="p30.523 \n f32[16,4096]"];
	"transpose.531" [label="transpose.531 \n f32[4096,16]"];
	"dot.570" [label="dot.570 \n f32[128,16]"];
	"reshape.571" [label="reshape.571 \n f32[1,128,16]"];
	"p29.514" [label="p29.514 \n f32[16]"];
	"broadcast.572" [label="broadcast.572 \n f32[1,128,16]"];
	"add.573" [label="add.573 \n f32[1,128,16]"];
	"constant.475" [label="constant.475 \n s64[] constant(214013), metadata="];
	"multiply.476" [label="multiply.476 \n s64[] multiply(s64[] %constant.475, s64[] %add.259), metadata="];
	"constant.477" [label="constant.477 \n s64[] constant(2531011), metadata="];
	"add.478" [label="add.478 \n s64[] add(s64[] %multiply.476, s64[] %constant.477), metadata="];
	"convert.485" [label="convert.485 \n u64[] convert(s64[] %add.478), metadata="];
	"reshape.487" [label="reshape.487 \n u64[1]"];
	"constant.45" [label="constant.45 \n u64[1]"];
	"concatenate.489" [label="concatenate.489 \n u64[2]"];
	"constant.493" [label="constant.493 \n u32[] constant(9), metadata="];
	"broadcast.494" [label="broadcast.494 \n u32[1,128,16]"];
	"convert.496" [label="convert.496 \n f32[1,128,16]"];
	"constant.497" [label="constant.497 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.498" [label="broadcast.498 \n f32[1,128,16]"];
	"multiply.502" [label="multiply.502 \n f32[1,128,16]"];
	"broadcast.482" [label="broadcast.482 \n f32[1,128,16]"];
	"compare.505" [label="compare.505 \n pred[1,128,16]"];
	"constant.26" [label="constant.26 \n f32[] constant(1), metadata="];
	"broadcast.58" [label="broadcast.58 \n f32[1,128,16]"];
	"broadcast.85" [label="broadcast.85 \n f32[1,128,16]"];
	"select.10" [label="select.10 \n f32[1,128,16]"];
	"multiply.576" [label="multiply.576 \n f32[1,128,16]"];
	"add.577" [label="add.577 \n f32[1,128,16]"];
	"constant.63" [label="constant.63 \n f32[] constant(1), metadata="];
	"broadcast.67" [label="broadcast.67 \n f32[128]"];
	"constant.58" [label="constant.58 \n f32[] constant(0), metadata="];
	"broadcast.62" [label="broadcast.62 \n f32[128]"];
	"p5.40" [label="p5.40 \n f32[16]"];
	"broadcast.595" [label="broadcast.595 \n f32[1,128,16]"];
	"multiply.598" [label="multiply.598 \n f32[1,128,16]"];
	"add.600" [label="add.600 \n f32[1,128,16]"];
	"reshape.751" [label="reshape.751 \n f32[128,16]"];
	"p38.742" [label="p38.742 \n f32[16,16]"];
	"transpose.750" [label="transpose.750 \n f32[16,16]"];
	"dot.752" [label="dot.752 \n f32[128,16]"];
	"reshape.753" [label="reshape.753 \n f32[1,128,16]"];
	"p37.733" [label="p37.733 \n f32[16]"];
	"broadcast.754" [label="broadcast.754 \n f32[1,128,16]"];
	"add.755" [label="add.755 \n f32[1,128,16]"];
	"constant.723" [label="constant.723 \n f32[] constant(1), metadata="];
	"broadcast.727" [label="broadcast.727 \n f32[128]"];
	"constant.718" [label="constant.718 \n f32[] constant(0), metadata="];
	"broadcast.722" [label="broadcast.722 \n f32[128]"];
	"p36.700" [label="p36.700 \n f32[16]"];
	"broadcast.782" [label="broadcast.782 \n f32[1,128,16]"];
	"multiply.785" [label="multiply.785 \n f32[1,128,16]"];
	"add.787" [label="add.787 \n f32[1,128,16]"];
	"reshape.788" [label="reshape.788 \n f32[128,16]"];
	"transpose.698" [label="transpose.698 \n f32[16,30522]"];
	"dot.789" [label="dot.789 \n f32[128,30522]"];
	"reshape.790" [label="reshape.790 \n f32[1,128,30522]"];
	"p35.682" [label="p35.682 \n f32[30522]"];
	"broadcast.791" [label="broadcast.791 \n f32[1,128,30522]"];
	"add.792" [label="add.792 \n f32[1,128,30522]"];
	"reshape.795" [label="reshape.795 \n f32[128,30522]"];
	"reduce.0" [label="reduce.0 \n f32[128]"];
	"broadcast.0" [label="broadcast.0 \n f32[128,30522]"];
	"subtract.0" [label="subtract.0 \n f32[128,30522]"];
	"exponential.0" [label="exponential.0 \n f32[128,30522]"];
	"reduce.1" [label="reduce.1 \n f32[128]"];
	"log.0" [label="log.0 \n f32[128]"];
	"broadcast.1" [label="broadcast.1 \n f32[128,30522]"];
	"subtract.1" [label="subtract.1 \n f32[128,30522]"];
	"reshape.1" [label="reshape.1 \n s64[128]"];
	"broadcast.3" [label="broadcast.3 \n s64[128,30522]"];
	"iota.5" [label="iota.5 \n s64[128,30522]"];
	"compare.0" [label="compare.0 \n pred[128,30522]"];
	"broadcast.6" [label="broadcast.6 \n f32[128,30522]"];
	"broadcast.7" [label="broadcast.7 \n f32[128,30522]"];
	"select.0" [label="select.0 \n f32[128,30522]"];
	"multiply.2" [label="multiply.2 \n f32[128,30522]"];
	"reduce.2" [label="reduce.2 \n f32[128]"];
	"broadcast.61" [label="broadcast.61 \n f32[128]"];
	"select.6" [label="select.6 \n f32[128]"];
	"reduce.3" [label="reduce.3 \n f32[] reduce(f32[128]"];
	"convert.0" [label="convert.0 \n f32[128]"];
	"reduce.4" [label="reduce.4 \n f32[] reduce(f32[128]"];
	"negate.0" [label="negate.0 \n f32[] negate(f32[] %divide.0), metadata="];
	"p0.4" [label="p0.4 \n s64[1]"];
	"constant.49" [label="constant.49 \n s64[1]"];
	"compare.4" [label="compare.4 \n pred[1]"];
	"slice.602" [label="slice.602 \n f32[1,1,16]"];
	"reshape.130" [label="reshape.130 \n f32[16]"];
	"broadcast.198" [label="broadcast.198 \n f32[16,16]"];
	"p4.30" [label="p4.30 \n f32[16,16]"];
	"multiply.32" [label="multiply.32 \n f32[16,16]"];
	"reduce.18" [label="reduce.18 \n f32[16]"];
	"p3.22" [label="p3.22 \n f32[16]"];
	"add.14" [label="add.14 \n f32[16]"];
	"tanh.0" [label="tanh.0 \n f32[16]"];
	"broadcast.200" [label="broadcast.200 \n f32[2,16]"];
	"p2.13" [label="p2.13 \n f32[2,16]"];
	"multiply.33" [label="multiply.33 \n f32[2,16]"];
	"reduce.19" [label="reduce.19 \n f32[2]"];
	"p1.5" [label="p1.5 \n f32[2]"];
	"add.15" [label="add.15 \n f32[2]"];
	"reshape.440" [label="reshape.440 \n f32[1,2]"];
	"reduce.6" [label="reduce.6 \n f32[1]"];
	"reshape.136" [label="reshape.136 \n f32[] reshape(f32[1]"];
	"broadcast.17" [label="broadcast.17 \n f32[1,2]"];
	"subtract.2" [label="subtract.2 \n f32[1,2]"];
	"exponential.2" [label="exponential.2 \n f32[1,2]"];
	"reduce.7" [label="reduce.7 \n f32[1]"];
	"log.1" [label="log.1 \n f32[1]"];
	"reshape.137" [label="reshape.137 \n f32[] reshape(f32[1]"];
	"broadcast.18" [label="broadcast.18 \n f32[1,2]"];
	"subtract.3" [label="subtract.3 \n f32[1,2]"];
	"reshape.140" [label="reshape.140 \n s64[] reshape(s64[1]"];
	"broadcast.20" [label="broadcast.20 \n s64[1,2]"];
	"iota.2" [label="iota.2 \n s64[1,2]"];
	"compare.3" [label="compare.3 \n pred[1,2]"];
	"broadcast.22" [label="broadcast.22 \n f32[1,2]"];
	"broadcast.23" [label="broadcast.23 \n f32[1,2]"];
	"select.2" [label="select.2 \n f32[1,2]"];
	"multiply.7" [label="multiply.7 \n f32[1,2]"];
	"reduce.8" [label="reduce.8 \n f32[1]"];
	"constant.50" [label="constant.50 \n f32[1]"];
	"select.7" [label="select.7 \n f32[1]"];
	"convert.1" [label="convert.1 \n f32[1]"];
	"divide.9" [label="divide.9 \n f32[1]"];
	"negate.8" [label="negate.8 \n f32[1]"];
	"reshape.476" [label="reshape.476 \n f32[] reshape(f32[1]"];
	"add.859" [label="add.859 \n f32[] add(f32[] %negate.0, f32[] %reshape.476), metadata="];
	"reshape.145" [label="reshape.145 \n f32[1]"];
	"add.864" [label="add.864 \n f32[1]"];
	"exponential.3" [label="exponential.3 \n f32[1,2]"];
	"constant.59" [label="constant.59 \n f32[1]"];
	"divide.10" [label="divide.10 \n f32[1]"];
	"constant.51" [label="constant.51 \n f32[1]"];
	"select.8" [label="select.8 \n f32[1]"];
	"reshape.150" [label="reshape.150 \n f32[] reshape(f32[1]"];
	"broadcast.26" [label="broadcast.26 \n f32[1,2]"];
	"multiply.10" [label="multiply.10 \n f32[1,2]"];
	"reshape.154" [label="reshape.154 \n s64[] reshape(s64[1]"];
	"broadcast.28" [label="broadcast.28 \n s64[1,2]"];
	"iota.3" [label="iota.3 \n s64[1,2]"];
	"compare.5" [label="compare.5 \n pred[1,2]"];
	"negate.9" [label="negate.9 \n f32[1]"];
	"reshape.478" [label="reshape.478 \n f32[] reshape(f32[1]"];
	"broadcast.30" [label="broadcast.30 \n f32[1,2]"];
	"broadcast.31" [label="broadcast.31 \n f32[1,2]"];
	"select.3" [label="select.3 \n f32[1,2]"];
	"add.1" [label="add.1 \n f32[1,2]"];
	"reshape.909" [label="reshape.909 \n f32[2]"];
	"reshape.166" [label="reshape.166 \n f32[2]"];
	"broadcast.143" [label="broadcast.143 \n f32[2,16]"];
	"broadcast.144" [label="broadcast.144 \n f32[2,16]"];
	"multiply.22" [label="multiply.22 \n f32[2,16]"];
	"exponential.1" [label="exponential.1 \n f32[128,30522]"];
	"constant.867" [label="constant.867 \n f32[] constant(1), metadata="];
	"reduce.5" [label="reduce.5 \n f32[] reduce(f32[128]"];
	"broadcast.9" [label="broadcast.9 \n f32[128]"];
	"broadcast.74" [label="broadcast.74 \n f32[128]"];
	"select.9" [label="select.9 \n f32[128]"];
	"broadcast.10" [label="broadcast.10 \n f32[128,30522]"];
	"multiply.5" [label="multiply.5 \n f32[128,30522]"];
	"reshape.4" [label="reshape.4 \n s64[128]"];
	"broadcast.12" [label="broadcast.12 \n s64[128,30522]"];
	"iota.7" [label="iota.7 \n s64[128,30522]"];
	"compare.2" [label="compare.2 \n pred[128,30522]"];
	"broadcast.15" [label="broadcast.15 \n f32[128,30522]"];
	"broadcast.16" [label="broadcast.16 \n f32[128,30522]"];
	"select.1" [label="select.1 \n f32[128,30522]"];
	"add.0" [label="add.0 \n f32[128,30522]"];
	"constant.961" [label="constant.961 \n f32[] constant(0), metadata="];
	"reduce.967" [label="reduce.967 \n f32[30522]"];
	"reshape.1297" [label="reshape.1297 \n f32[128,16]"];
	"transpose.1298" [label="transpose.1298 \n f32[16,128]"];
	"dot.4" [label="dot.4 \n f32[30522,16]"];
	"constant.1277" [label="constant.1277 \n f32[] constant(0), metadata="];
	"broadcast.1281" [label="broadcast.1281 \n f32[30522,16]"];
	"reshape.1256" [label="reshape.1256 \n s64[128]"];
	"constant.1271" [label="constant.1271 \n s64[] constant(0), metadata="];
	"broadcast.1272" [label="broadcast.1272 \n s64[128]"];
	"compare.1273" [label="compare.1273 \n pred[128]"];
	"p41.1265" [label="p41.1265 \n s64[] parameter(41), frontend_attributes="];
	"broadcast.1269" [label="broadcast.1269 \n s64[128]"];
	"add.1270" [label="add.1270 \n s64[128]"];
	"select.1274" [label="select.1274 \n s64[128]"];
	"reshape.1275" [label="reshape.1275 \n s64[128,1]"];
	"convert.1257" [label="convert.1257 \n f32[128]"];
	"constant.1255" [label="constant.1255 \n f32[] constant(0), metadata="];
	"broadcast.1258" [label="broadcast.1258 \n f32[128]"];
	"compare.1259" [label="compare.1259 \n pred[128]"];
	"broadcast.1263" [label="broadcast.1263 \n pred[128,16]"];
	"constant.987" [label="constant.987 \n f32[] constant(1), metadata="];
	"broadcast.991" [label="broadcast.991 \n f32[128]"];
	"constant.231" [label="constant.231 \n f32[] constant(1e-12), metadata="];
	"broadcast.232" [label="broadcast.232 \n f32[128]"];
	"add.233" [label="add.233 \n f32[128]"];
	"multiply.1247" [label="multiply.1247 \n f32[128]"];
	"broadcast.75" [label="broadcast.75 \n f32[128]"];
	"add.8" [label="add.8 \n f32[128]"];
	"constant.1007" [label="constant.1007 \n f32[] constant(1), metadata="];
	"broadcast.1011" [label="broadcast.1011 \n f32[128]"];
	"constant.455" [label="constant.455 \n f32[] constant(1e-12), metadata="];
	"broadcast.456" [label="broadcast.456 \n f32[128]"];
	"add.457" [label="add.457 \n f32[128]"];
	"sqrt.1" [label="sqrt.1 \n f32[128]"];
	"multiply.1168" [label="multiply.1168 \n f32[128]"];
	"broadcast.76" [label="broadcast.76 \n f32[128]"];
	"add.9" [label="add.9 \n f32[128]"];
	"constant.1027" [label="constant.1027 \n f32[] constant(1), metadata="];
	"broadcast.1031" [label="broadcast.1031 \n f32[128]"];
	"constant.582" [label="constant.582 \n f32[] constant(1e-12), metadata="];
	"broadcast.583" [label="broadcast.583 \n f32[128]"];
	"add.584" [label="add.584 \n f32[128]"];
	"sqrt.2" [label="sqrt.2 \n f32[128]"];
	"multiply.1136" [label="multiply.1136 \n f32[128]"];
	"broadcast.77" [label="broadcast.77 \n f32[128]"];
	"add.10" [label="add.10 \n f32[128]"];
	"constant.1086" [label="constant.1086 \n f32[] constant(1), metadata="];
	"broadcast.1090" [label="broadcast.1090 \n f32[128]"];
	"constant.769" [label="constant.769 \n f32[] constant(1e-12), metadata="];
	"broadcast.770" [label="broadcast.770 \n f32[128]"];
	"add.771" [label="add.771 \n f32[128]"];
	"sqrt.3" [label="sqrt.3 \n f32[128]"];
	"multiply.1109" [label="multiply.1109 \n f32[128]"];
	"broadcast.78" [label="broadcast.78 \n f32[128]"];
	"add.11" [label="add.11 \n f32[128]"];
	"dot.1101" [label="dot.1101 \n f32[128,16]"];
	"reshape.1102" [label="reshape.1102 \n f32[1,128,16]"];
	"broadcast.1103" [label="broadcast.1103 \n f32[1,128,16]"];
	"multiply.1104" [label="multiply.1104 \n f32[1,128,16]"];
	"multiply.6" [label="multiply.6 \n f32[1,128,16]"];
	"reshape.1126" [label="reshape.1126 \n f32[128,16]"];
	"dot.1127" [label="dot.1127 \n f32[128,16]"];
	"reshape.1128" [label="reshape.1128 \n f32[1,128,16]"];
	"reshape.202" [label="reshape.202 \n f32[2]"];
	"broadcast.192" [label="broadcast.192 \n f32[2,16]"];
	"multiply.29" [label="multiply.29 \n f32[2,16]"];
	"reduce.20" [label="reduce.20 \n f32[16]"];
	"constant.1057" [label="constant.1057 \n f32[] constant(1), metadata="];
	"broadcast.202" [label="broadcast.202 \n f32[16]"];
	"multiply.34" [label="multiply.34 \n f32[16]"];
	"subtract.5" [label="subtract.5 \n f32[16]"];
	"multiply.35" [label="multiply.35 \n f32[16]"];
	"broadcast.193" [label="broadcast.193 \n f32[16,16]"];
	"multiply.30" [label="multiply.30 \n f32[16,16]"];
	"reduce.21" [label="reduce.21 \n f32[16]"];
	"reshape.1068" [label="reshape.1068 \n f32[1,1,16]"];
	"add.1129" [label="add.1129 \n f32[1,128,16]"];
	"broadcast.1130" [label="broadcast.1130 \n f32[1,128,16]"];
	"multiply.1131" [label="multiply.1131 \n f32[1,128,16]"];
	"multiply.1143" [label="multiply.1143 \n f32[1,128,16]"];
	"reshape.1144" [label="reshape.1144 \n f32[128,16]"];
	"dot.1145" [label="dot.1145 \n f32[128,4096]"];
	"reshape.1146" [label="reshape.1146 \n f32[1,128,4096]"];
	"multiply.11" [label="multiply.11 \n f32[1,128,4096]"];
	"reshape.1157" [label="reshape.1157 \n f32[128,4096]"];
	"dot.1158" [label="dot.1158 \n f32[128,16]"];
	"reshape.1159" [label="reshape.1159 \n f32[1,128,16]"];
	"add.1161" [label="add.1161 \n f32[1,128,16]"];
	"broadcast.1162" [label="broadcast.1162 \n f32[1,128,16]"];
	"multiply.1163" [label="multiply.1163 \n f32[1,128,16]"];
	"reshape.1227" [label="reshape.1227 \n f32[2,128,128]"];
	"transpose.1228" [label="transpose.1228 \n f32[2,128,128]"];
	"multiply.1175" [label="multiply.1175 \n f32[1,128,16]"];
	"reshape.1176" [label="reshape.1176 \n f32[128,16]"];
	"dot.1177" [label="dot.1177 \n f32[128,16]"];
	"reshape.1179" [label="reshape.1179 \n f32[1,128,2,8]"];
	"transpose.1180" [label="transpose.1180 \n f32[1,2,128,8]"];
	"reshape.1181" [label="reshape.1181 \n f32[2,128,8]"];
	"dot.1229" [label="dot.1229 \n f32[2,128,8]"];
	"reshape.1230" [label="reshape.1230 \n f32[1,2,128,8]"];
	"transpose.1231" [label="transpose.1231 \n f32[1,128,2,8]"];
	"reshape.1233" [label="reshape.1233 \n f32[128,16]"];
	"dot.1234" [label="dot.1234 \n f32[128,16]"];
	"reshape.1235" [label="reshape.1235 \n f32[1,128,16]"];
	"add.1237" [label="add.1237 \n f32[1,128,16]"];
	"reshape.1211" [label="reshape.1211 \n f32[2,128,8]"];
	"transpose.1212" [label="transpose.1212 \n f32[2,8,128]"];
	"reshape.1005" [label="reshape.1005 \n f32[2,128,8]"];
	"transpose.1006" [label="transpose.1006 \n f32[2,8,128]"];
	"dot.1182" [label="dot.1182 \n f32[2,128,128]"];
	"reshape.1183" [label="reshape.1183 \n f32[1,2,128,128]"];
	"multiply.1184" [label="multiply.1184 \n f32[1,2,128,128]"];
	"multiply.1185" [label="multiply.1185 \n f32[1,2,128,128]"];
	"constant.1186" [label="constant.1186 \n f32[] constant(0), metadata="];
	"reduce.1191" [label="reduce.1191 \n f32[1,2,128]"];
	"reshape.234" [label="reshape.234 \n f32[2,128]"];
	"broadcast.1192" [label="broadcast.1192 \n f32[1,2,128,128]"];
	"subtract.1193" [label="subtract.1193 \n f32[1,2,128,128]"];
	"multiply.1194" [label="multiply.1194 \n f32[1,2,128,128]"];
	"broadcast.1195" [label="broadcast.1195 \n f32[1,2,128,128]"];
	"divide.1196" [label="divide.1196 \n f32[1,2,128,128]"];
	"reshape.1197" [label="reshape.1197 \n f32[2,128,128]"];
	"dot.1213" [label="dot.1213 \n f32[2,8,128]"];
	"reshape.1214" [label="reshape.1214 \n f32[1,2,8,128]"];
	"transpose.1216" [label="transpose.1216 \n f32[1,128,2,8]"];
	"reshape.1218" [label="reshape.1218 \n f32[128,16]"];
	"dot.1219" [label="dot.1219 \n f32[128,16]"];
	"reshape.1220" [label="reshape.1220 \n f32[1,128,16]"];
	"add.1238" [label="add.1238 \n f32[1,128,16]"];
	"reshape.1003" [label="reshape.1003 \n f32[2,8,128]"];
	"transpose.1004" [label="transpose.1004 \n f32[2,128,8]"];
	"dot.1198" [label="dot.1198 \n f32[2,128,8]"];
	"reshape.1199" [label="reshape.1199 \n f32[1,2,128,8]"];
	"transpose.1200" [label="transpose.1200 \n f32[1,128,2,8]"];
	"reshape.1202" [label="reshape.1202 \n f32[128,16]"];
	"dot.1203" [label="dot.1203 \n f32[128,16]"];
	"reshape.1204" [label="reshape.1204 \n f32[1,128,16]"];
	"add.1239" [label="add.1239 \n f32[1,128,16]"];
	"multiply.1240" [label="multiply.1240 \n f32[1,128,16]"];
	"broadcast.1241" [label="broadcast.1241 \n f32[1,128,16]"];
	"multiply.1242" [label="multiply.1242 \n f32[1,128,16]"];
	"reshape.1254" [label="reshape.1254 \n f32[128,16]"];
	"constant.982" [label="constant.982 \n f32[] constant(0), metadata="];
	"broadcast.986" [label="broadcast.986 \n f32[128,16]"];
	"select.1264" [label="select.1264 \n f32[128,16]"];
	"scatter.1287" [label="scatter.1287 \n f32[30522,16]"];
	"add.1308" [label="add.1308 \n f32[30522,16]"];
	"constant.1309" [label="constant.1309 \n f32[] constant(0), metadata="];
	"reduce.1315" [label="reduce.1315 \n f32[16]"];
	"multiply.1331" [label="multiply.1331 \n f32[1,128,16]"];
	"constant.1332" [label="constant.1332 \n f32[] constant(0), metadata="];
	"reduce.1338" [label="reduce.1338 \n f32[16]"];
	"constant.1348" [label="constant.1348 \n f32[] constant(0), metadata="];
	"reduce.1354" [label="reduce.1354 \n f32[16]"];
	"reshape.1364" [label="reshape.1364 \n f32[128,16]"];
	"transpose.1365" [label="transpose.1365 \n f32[16,128]"];
	"dot.7" [label="dot.7 \n f32[16,16]"];
	"broadcast.179" [label="broadcast.179 \n f32[16,16]"];
	"slice.1392" [label="slice.1392 \n f32[1,1,16]"];
	"reshape.261" [label="reshape.261 \n f32[16]"];
	"broadcast.180" [label="broadcast.180 \n f32[16,16]"];
	"multiply.26" [label="multiply.26 \n f32[16,16]"];
	"constant.1404" [label="constant.1404 \n f32[] constant(0), metadata="];
	"reduce.1410" [label="reduce.1410 \n f32[16]"];
	"multiply.1426" [label="multiply.1426 \n f32[1,128,16]"];
	"constant.1427" [label="constant.1427 \n f32[] constant(0), metadata="];
	"reduce.1433" [label="reduce.1433 \n f32[16]"];
	"constant.1443" [label="constant.1443 \n f32[] constant(0), metadata="];
	"reduce.1449" [label="reduce.1449 \n f32[16]"];
	"reshape.1459" [label="reshape.1459 \n f32[128,4096]"];
	"transpose.1460" [label="transpose.1460 \n f32[4096,128]"];
	"dot.10" [label="dot.10 \n f32[16,4096]"];
	"constant.1470" [label="constant.1470 \n f32[] constant(0), metadata="];
	"reduce.1476" [label="reduce.1476 \n f32[4096]"];
	"reshape.1486" [label="reshape.1486 \n f32[128,16]"];
	"transpose.1487" [label="transpose.1487 \n f32[16,128]"];
	"dot.11" [label="dot.11 \n f32[4096,16]"];
	"constant.1497" [label="constant.1497 \n f32[] constant(0), metadata="];
	"reduce.1503" [label="reduce.1503 \n f32[16]"];
	"multiply.1519" [label="multiply.1519 \n f32[1,128,16]"];
	"constant.1520" [label="constant.1520 \n f32[] constant(0), metadata="];
	"reduce.1526" [label="reduce.1526 \n f32[16]"];
	"constant.1536" [label="constant.1536 \n f32[] constant(0), metadata="];
	"reduce.1542" [label="reduce.1542 \n f32[16]"];
	"reshape.1549" [label="reshape.1549 \n f32[128,16]"];
	"transpose.1550" [label="transpose.1550 \n f32[16,128]"];
	"reshape.1545" [label="reshape.1545 \n f32[1,2,128,8]"];
	"transpose.1546" [label="transpose.1546 \n f32[1,128,2,8]"];
	"reshape.1548" [label="reshape.1548 \n f32[128,16]"];
	"dot.1551" [label="dot.1551 \n f32[16,16]"];
	"constant.1555" [label="constant.1555 \n f32[] constant(0), metadata="];
	"reduce.15" [label="reduce.15 \n f32[2,8]"];
	"reshape.1563" [label="reshape.1563 \n f32[16]"];
	"reshape.1565" [label="reshape.1565 \n f32[1,2,128,8]"];
	"transpose.1566" [label="transpose.1566 \n f32[1,128,2,8]"];
	"reshape.1568" [label="reshape.1568 \n f32[128,16]"];
	"transpose.1569" [label="transpose.1569 \n f32[16,128]"];
	"reshape.1564" [label="reshape.1564 \n f32[128,16]"];
	"dot.1570" [label="dot.1570 \n f32[16,16]"];
	"constant.1575" [label="constant.1575 \n f32[] constant(0), metadata="];
	"reduce.16" [label="reduce.16 \n f32[2,8]"];
	"reshape.1583" [label="reshape.1583 \n f32[16]"];
	"reshape.1585" [label="reshape.1585 \n f32[1,2,8,128]"];
	"transpose.1587" [label="transpose.1587 \n f32[1,128,2,8]"];
	"reshape.1589" [label="reshape.1589 \n f32[128,16]"];
	"transpose.1590" [label="transpose.1590 \n f32[16,128]"];
	"reshape.1584" [label="reshape.1584 \n f32[128,16]"];
	"dot.1591" [label="dot.1591 \n f32[16,16]"];
	"constant.1595" [label="constant.1595 \n f32[] constant(0), metadata="];
	"reduce.17" [label="reduce.17 \n f32[2,8]"];
	"reshape.1603" [label="reshape.1603 \n f32[16]"];
	"reshape.1605" [label="reshape.1605 \n f32[1,2,128,8]"];
	"transpose.1606" [label="transpose.1606 \n f32[1,128,2,8]"];
	"reshape.1608" [label="reshape.1608 \n f32[128,16]"];
	"transpose.1609" [label="transpose.1609 \n f32[16,128]"];
	"reshape.1604" [label="reshape.1604 \n f32[128,16]"];
	"dot.1610" [label="dot.1610 \n f32[16,16]"];
	"constant.1611" [label="constant.1611 \n f32[] constant(0), metadata="];
	"reduce.1617" [label="reduce.1617 \n f32[16]"];
	"multiply.1633" [label="multiply.1633 \n f32[1,128,16]"];
	"constant.1634" [label="constant.1634 \n f32[] constant(0), metadata="];
	"reduce.1640" [label="reduce.1640 \n f32[16]"];
	"broadcast.32" [label="broadcast.32 \n f32[512,16]"];
	"slice.1651" [label="slice.1651 \n s64[1,128]"];
	"reshape.10" [label="reshape.10 \n s64[128]"];
	"broadcast.33" [label="broadcast.33 \n s64[128]"];
	"compare.6" [label="compare.6 \n pred[128]"];
	"broadcast.34" [label="broadcast.34 \n s64[128]"];
	"add.2" [label="add.2 \n s64[128]"];
	"select.4" [label="select.4 \n s64[128]"];
	"reshape.11" [label="reshape.11 \n s64[128,1]"];
	"reshape.12" [label="reshape.12 \n f32[128,16]"];
	"scatter.0" [label="scatter.0 \n f32[512,16]"];
	"broadcast.35" [label="broadcast.35 \n f32[2,16]"];
	"reshape.13" [label="reshape.13 \n s64[128]"];
	"broadcast.36" [label="broadcast.36 \n s64[128]"];
	"compare.7" [label="compare.7 \n pred[128]"];
	"broadcast.37" [label="broadcast.37 \n s64[128]"];
	"add.3" [label="add.3 \n s64[128]"];
	"select.5" [label="select.5 \n s64[128]"];
	"reshape.14" [label="reshape.14 \n s64[128,1]"];
	"reshape.15" [label="reshape.15 \n f32[128,16]"];
	"scatter.1" [label="scatter.1 \n f32[2,16]"];
	"tuple.1710" [label="tuple.1710 \n (f32[1]"]; 
 	"constant.7" -> "broadcast.184";
	"p34.675" -> "compare.8";
	"broadcast.184" -> "compare.8";
	"compare.8" -> "reshape.447";
	"p39.773" -> "custom-call.72";
	"custom-call.72" -> "broadcast.786";
	"p33.586" -> "custom-call.55";
	"custom-call.55" -> "broadcast.599";
	"p28.459" -> "custom-call.56";
	"custom-call.56" -> "broadcast.472";
	"p16.235" -> "custom-call.57";
	"custom-call.57" -> "broadcast.248";
	"p15.214" -> "custom-call.58";
	"p14.212" -> "convert.6";
	"convert.6" -> "reshape.304";
	"custom-call.58" -> "gather.223";
	"reshape.304" -> "gather.223";
	"p13.200" -> "custom-call.59";
	"p12.198" -> "convert.5";
	"convert.5" -> "reshape.303";
	"custom-call.59" -> "gather.209";
	"reshape.303" -> "gather.209";
	"gather.223" -> "add.13";
	"gather.209" -> "add.13";
	"p11.181" -> "custom-call.60";
	"p10.177" -> "convert.4";
	"convert.4" -> "slice.0";
	"slice.0" -> "reshape.301";
	"custom-call.60" -> "gather.190";
	"reshape.301" -> "gather.190";
	"add.13" -> "add.16";
	"gather.190" -> "add.16";
	"add.16" -> "reshape.469";
	"constant.167" -> "broadcast.171";
	"constant.162" -> "broadcast.166";
	"reshape.469" -> "batch-norm-training.227";
	"broadcast.171" -> "batch-norm-training.227";
	"broadcast.166" -> "batch-norm-training.227";
	"batch-norm-training.227" -> "get-tuple-element.228";
	"p9.144" -> "custom-call.61";
	"custom-call.61" -> "broadcast.244";
	"get-tuple-element.228" -> "multiply.247";
	"broadcast.244" -> "multiply.247";
	"broadcast.248" -> "add.249";
	"multiply.247" -> "add.249";
	"constant.109" -> "multiply.110";
	"p8.108" -> "multiply.110";
	"multiply.110" -> "add.112";
	"constant.111" -> "add.112";
	"add.112" -> "convert.119";
	"convert.119" -> "reshape.121";
	"reshape.121" -> "concatenate.123";
	"constant.41" -> "concatenate.123";
	"concatenate.123" -> "rng-bit-generator.124";
	"rng-bit-generator.124" -> "get-tuple-element.125";
	"constant.127" -> "broadcast.128";
	"get-tuple-element.125" -> "shift-right-logical.129";
	"broadcast.128" -> "shift-right-logical.129";
	"shift-right-logical.129" -> "convert.130";
	"constant.131" -> "broadcast.132";
	"convert.130" -> "multiply.136";
	"broadcast.132" -> "multiply.136";
	"p7.107" -> "broadcast.116";
	"multiply.136" -> "compare.139";
	"broadcast.116" -> "compare.139";
	"constant.23" -> "divide.4";
	"p7.107" -> "divide.4";
	"divide.4" -> "broadcast.41";
	"constant.34" -> "broadcast.98";
	"compare.139" -> "select.13";
	"broadcast.41" -> "select.13";
	"broadcast.98" -> "select.13";
	"add.249" -> "multiply.251";
	"select.13" -> "multiply.251";
	"multiply.251" -> "reshape.403";
	"p27.401" -> "transpose.402";
	"reshape.403" -> "dot.404";
	"transpose.402" -> "dot.404";
	"dot.404" -> "reshape.405";
	"p26.399" -> "broadcast.406";
	"reshape.405" -> "add.407";
	"broadcast.406" -> "add.407";
	"add.407" -> "reshape.408";
	"reshape.408" -> "transpose.409";
	"transpose.409" -> "reshape.411";
	"multiply.251" -> "reshape.384";
	"p25.382" -> "transpose.383";
	"reshape.384" -> "dot.385";
	"transpose.383" -> "dot.385";
	"dot.385" -> "reshape.386";
	"p24.380" -> "broadcast.387";
	"reshape.386" -> "add.388";
	"broadcast.387" -> "add.388";
	"add.388" -> "reshape.389";
	"reshape.389" -> "transpose.391";
	"transpose.391" -> "reshape.393";
	"reshape.411" -> "dot.412";
	"reshape.393" -> "dot.412";
	"p23.374" -> "broadcast.186";
	"dot.412" -> "divide.8";
	"broadcast.186" -> "divide.8";
	"divide.8" -> "reshape.433";
	"constant.365" -> "broadcast.188";
	"p22.353" -> "convert.2";
	"broadcast.188" -> "subtract.4";
	"convert.2" -> "subtract.4";
	"p21.352" -> "broadcast.194";
	"subtract.4" -> "multiply.31";
	"broadcast.194" -> "multiply.31";
	"multiply.31" -> "reshape.50";
	"reshape.50" -> "broadcast.418";
	"reshape.433" -> "add.419";
	"broadcast.418" -> "add.419";
	"add.419" -> "reduce.425";
	"constant.420" -> "reduce.425";
	"MaxComputation.421" -> "reduce.425";
	"reduce.425" -> "reshape.52";
	"reshape.52" -> "broadcast.426";
	"add.419" -> "subtract.427";
	"broadcast.426" -> "subtract.427";
	"subtract.427" -> "exponential.428";
	"exponential.428" -> "reduce.434";
	"constant.429" -> "reduce.434";
	"AddComputation.430" -> "reduce.434";
	"reduce.434" -> "reshape.53";
	"reshape.53" -> "broadcast.435";
	"exponential.428" -> "divide.436";
	"broadcast.435" -> "divide.436";
	"constant.252" -> "multiply.253";
	"add.112" -> "multiply.253";
	"multiply.253" -> "add.255";
	"constant.254" -> "add.255";
	"add.255" -> "convert.323";
	"convert.323" -> "reshape.325";
	"reshape.325" -> "concatenate.327";
	"constant.42" -> "concatenate.327";
	"concatenate.327" -> "rng-bit-generator.328";
	"rng-bit-generator.328" -> "get-tuple-element.329";
	"constant.331" -> "broadcast.332";
	"get-tuple-element.329" -> "shift-right-logical.333";
	"broadcast.332" -> "shift-right-logical.333";
	"shift-right-logical.333" -> "convert.334";
	"constant.335" -> "broadcast.336";
	"convert.334" -> "multiply.340";
	"broadcast.336" -> "multiply.340";
	"p7.107" -> "broadcast.320";
	"multiply.340" -> "compare.343";
	"broadcast.320" -> "compare.343";
	"constant.24" -> "divide.5";
	"p7.107" -> "divide.5";
	"divide.5" -> "broadcast.49";
	"constant.33" -> "broadcast.92";
	"compare.343" -> "select.12";
	"broadcast.49" -> "select.12";
	"broadcast.92" -> "select.12";
	"divide.436" -> "multiply.437";
	"select.12" -> "multiply.437";
	"multiply.437" -> "reshape.439";
	"multiply.251" -> "reshape.308";
	"p20.306" -> "transpose.307";
	"reshape.308" -> "dot.309";
	"transpose.307" -> "dot.309";
	"dot.309" -> "reshape.310";
	"p19.304" -> "broadcast.311";
	"reshape.310" -> "add.312";
	"broadcast.311" -> "add.312";
	"add.312" -> "reshape.313";
	"reshape.313" -> "transpose.314";
	"transpose.314" -> "reshape.316";
	"reshape.439" -> "dot.440";
	"reshape.316" -> "dot.440";
	"dot.440" -> "reshape.441";
	"reshape.441" -> "transpose.442";
	"transpose.442" -> "reshape.444";
	"p18.297" -> "transpose.298";
	"reshape.444" -> "dot.445";
	"transpose.298" -> "dot.445";
	"dot.445" -> "reshape.446";
	"p17.295" -> "broadcast.447";
	"reshape.446" -> "add.448";
	"broadcast.447" -> "add.448";
	"constant.256" -> "multiply.257";
	"add.255" -> "multiply.257";
	"multiply.257" -> "add.259";
	"constant.258" -> "add.259";
	"add.259" -> "convert.266";
	"convert.266" -> "reshape.268";
	"reshape.268" -> "concatenate.270";
	"constant.43" -> "concatenate.270";
	"concatenate.270" -> "rng-bit-generator.271";
	"rng-bit-generator.271" -> "get-tuple-element.272";
	"constant.274" -> "broadcast.275";
	"get-tuple-element.272" -> "shift-right-logical.276";
	"broadcast.275" -> "shift-right-logical.276";
	"shift-right-logical.276" -> "convert.277";
	"constant.278" -> "broadcast.279";
	"convert.277" -> "multiply.283";
	"broadcast.279" -> "multiply.283";
	"p7.107" -> "broadcast.263";
	"multiply.283" -> "compare.286";
	"broadcast.263" -> "compare.286";
	"constant.25" -> "divide.6";
	"p7.107" -> "divide.6";
	"divide.6" -> "broadcast.53";
	"constant.32" -> "broadcast.88";
	"compare.286" -> "select.11";
	"broadcast.53" -> "select.11";
	"broadcast.88" -> "select.11";
	"add.448" -> "multiply.449";
	"select.11" -> "multiply.449";
	"multiply.449" -> "add.450";
	"multiply.251" -> "add.450";
	"constant.97" -> "broadcast.101";
	"constant.92" -> "broadcast.96";
	"add.450" -> "batch-norm-training.451";
	"broadcast.101" -> "batch-norm-training.451";
	"broadcast.96" -> "batch-norm-training.451";
	"batch-norm-training.451" -> "get-tuple-element.452";
	"p6.74" -> "custom-call.62";
	"custom-call.62" -> "broadcast.468";
	"get-tuple-element.452" -> "multiply.471";
	"broadcast.468" -> "multiply.471";
	"broadcast.472" -> "add.473";
	"multiply.471" -> "add.473";
	"add.473" -> "reshape.555";
	"p32.546" -> "custom-call.63";
	"custom-call.63" -> "transpose.554";
	"reshape.555" -> "dot.556";
	"transpose.554" -> "dot.556";
	"dot.556" -> "reshape.557";
	"p31.537" -> "custom-call.64";
	"custom-call.64" -> "broadcast.558";
	"reshape.557" -> "add.559";
	"broadcast.558" -> "add.559";
	"add.559" -> "custom-call.65";
	"custom-call.65" -> "reshape.569";
	"p30.523" -> "custom-call.66";
	"custom-call.66" -> "transpose.531";
	"reshape.569" -> "dot.570";
	"transpose.531" -> "dot.570";
	"dot.570" -> "reshape.571";
	"p29.514" -> "custom-call.67";
	"custom-call.67" -> "broadcast.572";
	"reshape.571" -> "add.573";
	"broadcast.572" -> "add.573";
	"constant.475" -> "multiply.476";
	"add.259" -> "multiply.476";
	"multiply.476" -> "add.478";
	"constant.477" -> "add.478";
	"add.478" -> "convert.485";
	"convert.485" -> "reshape.487";
	"reshape.487" -> "concatenate.489";
	"constant.45" -> "concatenate.489";
	"concatenate.489" -> "rng-bit-generator.490";
	"rng-bit-generator.490" -> "get-tuple-element.491";
	"constant.493" -> "broadcast.494";
	"get-tuple-element.491" -> "shift-right-logical.495";
	"broadcast.494" -> "shift-right-logical.495";
	"shift-right-logical.495" -> "convert.496";
	"constant.497" -> "broadcast.498";
	"convert.496" -> "multiply.502";
	"broadcast.498" -> "multiply.502";
	"p7.107" -> "broadcast.482";
	"multiply.502" -> "compare.505";
	"broadcast.482" -> "compare.505";
	"constant.26" -> "divide.7";
	"p7.107" -> "divide.7";
	"divide.7" -> "broadcast.58";
	"constant.31" -> "broadcast.85";
	"compare.505" -> "select.10";
	"broadcast.58" -> "select.10";
	"broadcast.85" -> "select.10";
	"add.573" -> "multiply.576";
	"select.10" -> "multiply.576";
	"multiply.576" -> "add.577";
	"add.473" -> "add.577";
	"constant.63" -> "broadcast.67";
	"constant.58" -> "broadcast.62";
	"add.577" -> "batch-norm-training.578";
	"broadcast.67" -> "batch-norm-training.578";
	"broadcast.62" -> "batch-norm-training.578";
	"batch-norm-training.578" -> "get-tuple-element.579";
	"p5.40" -> "custom-call.68";
	"custom-call.68" -> "broadcast.595";
	"get-tuple-element.579" -> "multiply.598";
	"broadcast.595" -> "multiply.598";
	"broadcast.599" -> "add.600";
	"multiply.598" -> "add.600";
	"add.600" -> "reshape.751";
	"p38.742" -> "custom-call.69";
	"custom-call.69" -> "transpose.750";
	"reshape.751" -> "dot.752";
	"transpose.750" -> "dot.752";
	"dot.752" -> "reshape.753";
	"p37.733" -> "custom-call.70";
	"custom-call.70" -> "broadcast.754";
	"reshape.753" -> "add.755";
	"broadcast.754" -> "add.755";
	"add.755" -> "custom-call.71";
	"constant.723" -> "broadcast.727";
	"constant.718" -> "broadcast.722";
	"custom-call.71" -> "batch-norm-training.765";
	"broadcast.727" -> "batch-norm-training.765";
	"broadcast.722" -> "batch-norm-training.765";
	"batch-norm-training.765" -> "get-tuple-element.766";
	"p36.700" -> "custom-call.73";
	"custom-call.73" -> "broadcast.782";
	"get-tuple-element.766" -> "multiply.785";
	"broadcast.782" -> "multiply.785";
	"broadcast.786" -> "add.787";
	"multiply.785" -> "add.787";
	"add.787" -> "reshape.788";
	"p15.214" -> "custom-call.74";
	"custom-call.74" -> "transpose.698";
	"reshape.788" -> "dot.789";
	"transpose.698" -> "dot.789";
	"dot.789" -> "reshape.790";
	"p35.682" -> "custom-call.75";
	"custom-call.75" -> "broadcast.791";
	"reshape.790" -> "add.792";
	"broadcast.791" -> "add.792";
	"add.792" -> "reshape.795";
	"add.792" -> "reduce.0";
	"constant.0" -> "reduce.0";
	"SimpleCrossEntropyLossForwardMax.796" -> "reduce.0";
	"reduce.0" -> "broadcast.0";
	"reshape.795" -> "subtract.0";
	"broadcast.0" -> "subtract.0";
	"subtract.0" -> "exponential.0";
	"exponential.0" -> "reduce.1";
	"constant.4" -> "reduce.1";
	"SimpleCrossEntropyLossForwardAdd.800" -> "reduce.1";
	"reduce.1" -> "log.0";
	"log.0" -> "broadcast.1";
	"subtract.0" -> "subtract.1";
	"broadcast.1" -> "subtract.1";
	"p34.675" -> "reshape.1";
	"reshape.1" -> "broadcast.3";
	"broadcast.3" -> "compare.0";
	"iota.5" -> "compare.0";
	"constant.5" -> "broadcast.6";
	"constant.6" -> "broadcast.7";
	"compare.0" -> "select.0";
	"broadcast.6" -> "select.0";
	"broadcast.7" -> "select.0";
	"subtract.1" -> "multiply.2";
	"select.0" -> "multiply.2";
	"multiply.2" -> "reduce.2";
	"constant.4" -> "reduce.2";
	"SimpleCrossEntropyLossForwardAdd.804" -> "reduce.2";
	"constant.27" -> "broadcast.61";
	"reshape.447" -> "select.6";
	"reduce.2" -> "select.6";
	"broadcast.61" -> "select.6";
	"select.6" -> "reduce.3";
	"constant.4" -> "reduce.3";
	"SimpleCrossEntropyLossForwardAdd.808" -> "reduce.3";
	"reshape.447" -> "convert.0";
	"convert.0" -> "reduce.4";
	"constant.4" -> "reduce.4";
	"SimpleCrossEntropyLossForwardAdd.812" -> "reduce.4";
	"reduce.3" -> "divide.0";
	"reduce.4" -> "divide.0";
	"divide.0" -> "negate.0";
	"p0.4" -> "compare.4";
	"constant.49" -> "compare.4";
	"add.600" -> "slice.602";
	"slice.602" -> "reshape.130";
	"reshape.130" -> "broadcast.198";
	"p4.30" -> "custom-call.78";
	"broadcast.198" -> "multiply.32";
	"custom-call.78" -> "multiply.32";
	"multiply.32" -> "reduce.18";
	"constant.35" -> "reduce.18";
	"scalar_add_computation" -> "reduce.18";
	"p3.22" -> "custom-call.79";
	"reduce.18" -> "add.14";
	"custom-call.79" -> "add.14";
	"add.14" -> "tanh.0";
	"tanh.0" -> "broadcast.200";
	"p2.13" -> "custom-call.80";
	"broadcast.200" -> "multiply.33";
	"custom-call.80" -> "multiply.33";
	"multiply.33" -> "reduce.19";
	"constant.36" -> "reduce.19";
	"scalar_add_computation" -> "reduce.19";
	"p1.5" -> "custom-call.81";
	"reduce.19" -> "add.15";
	"custom-call.81" -> "add.15";
	"add.15" -> "reshape.440";
	"reshape.440" -> "reduce.6";
	"constant.10" -> "reduce.6";
	"SimpleCrossEntropyLossForwardMax.613" -> "reduce.6";
	"reduce.6" -> "reshape.136";
	"reshape.136" -> "broadcast.17";
	"reshape.440" -> "subtract.2";
	"broadcast.17" -> "subtract.2";
	"subtract.2" -> "exponential.2";
	"exponential.2" -> "reduce.7";
	"constant.11" -> "reduce.7";
	"SimpleCrossEntropyLossForwardAdd.617" -> "reduce.7";
	"reduce.7" -> "log.1";
	"log.1" -> "reshape.137";
	"reshape.137" -> "broadcast.18";
	"subtract.2" -> "subtract.3";
	"broadcast.18" -> "subtract.3";
	"p0.4" -> "reshape.140";
	"reshape.140" -> "broadcast.20";
	"broadcast.20" -> "compare.3";
	"iota.2" -> "compare.3";
	"constant.12" -> "broadcast.22";
	"constant.13" -> "broadcast.23";
	"compare.3" -> "select.2";
	"broadcast.22" -> "select.2";
	"broadcast.23" -> "select.2";
	"subtract.3" -> "multiply.7";
	"select.2" -> "multiply.7";
	"multiply.7" -> "reduce.8";
	"constant.11" -> "reduce.8";
	"SimpleCrossEntropyLossForwardAdd.621" -> "reduce.8";
	"compare.4" -> "select.7";
	"reduce.8" -> "select.7";
	"constant.50" -> "select.7";
	"compare.4" -> "convert.1";
	"select.7" -> "divide.9";
	"convert.1" -> "divide.9";
	"divide.9" -> "negate.8";
	"negate.8" -> "reshape.476";
	"negate.0" -> "add.859";
	"reshape.476" -> "add.859";
	"add.859" -> "reshape.145";
	"p40.862" -> "add.864";
	"reshape.145" -> "add.864";
	"subtract.3" -> "exponential.3";
	"constant.59" -> "divide.10";
	"convert.1" -> "divide.10";
	"compare.4" -> "select.8";
	"divide.10" -> "select.8";
	"constant.51" -> "select.8";
	"select.8" -> "reshape.150";
	"reshape.150" -> "broadcast.26";
	"exponential.3" -> "multiply.10";
	"broadcast.26" -> "multiply.10";
	"p0.4" -> "reshape.154";
	"reshape.154" -> "broadcast.28";
	"broadcast.28" -> "compare.5";
	"iota.3" -> "compare.5";
	"divide.10" -> "negate.9";
	"negate.9" -> "reshape.478";
	"reshape.478" -> "broadcast.30";
	"constant.16" -> "broadcast.31";
	"compare.5" -> "select.3";
	"broadcast.30" -> "select.3";
	"broadcast.31" -> "select.3";
	"multiply.10" -> "add.1";
	"select.3" -> "add.1";
	"add.1" -> "reshape.909";
	"reshape.909" -> "custom-call.83";
	"add.1" -> "reshape.166";
	"reshape.166" -> "broadcast.143";
	"tanh.0" -> "broadcast.144";
	"broadcast.143" -> "multiply.22";
	"broadcast.144" -> "multiply.22";
	"multiply.22" -> "custom-call.84";
	"subtract.1" -> "exponential.1";
	"convert.0" -> "reduce.5";
	"constant.8" -> "reduce.5";
	"SimpleCrossEntropyLossBackwardAdd.927" -> "reduce.5";
	"constant.867" -> "divide.1";
	"reduce.5" -> "divide.1";
	"divide.1" -> "broadcast.9";
	"constant.30" -> "broadcast.74";
	"reshape.447" -> "select.9";
	"broadcast.9" -> "select.9";
	"broadcast.74" -> "select.9";
	"select.9" -> "broadcast.10";
	"exponential.1" -> "multiply.5";
	"broadcast.10" -> "multiply.5";
	"p34.675" -> "reshape.4";
	"reshape.4" -> "broadcast.12";
	"broadcast.12" -> "compare.2";
	"iota.7" -> "compare.2";
	"divide.1" -> "negate.1";
	"negate.1" -> "broadcast.15";
	"constant.9" -> "broadcast.16";
	"compare.2" -> "select.1";
	"broadcast.15" -> "select.1";
	"broadcast.16" -> "select.1";
	"multiply.5" -> "add.0";
	"select.1" -> "add.0";
	"add.0" -> "reduce.967";
	"constant.961" -> "reduce.967";
	"AddComputation.963" -> "reduce.967";
	"reduce.967" -> "custom-call.85";
	"add.787" -> "reshape.1297";
	"reshape.1297" -> "transpose.1298";
	"add.0" -> "dot.4";
	"transpose.1298" -> "dot.4";
	"dot.4" -> "custom-call.86";
	"constant.1277" -> "broadcast.1281";
	"p14.212" -> "reshape.1256";
	"constant.1271" -> "broadcast.1272";
	"reshape.1256" -> "compare.1273";
	"broadcast.1272" -> "compare.1273";
	"p41.1265" -> "broadcast.1269";
	"reshape.1256" -> "add.1270";
	"broadcast.1269" -> "add.1270";
	"compare.1273" -> "select.1274";
	"add.1270" -> "select.1274";
	"reshape.1256" -> "select.1274";
	"select.1274" -> "reshape.1275";
	"reshape.1256" -> "convert.1257";
	"constant.1255" -> "broadcast.1258";
	"convert.1257" -> "compare.1259";
	"broadcast.1258" -> "compare.1259";
	"compare.1259" -> "broadcast.1263";
	"constant.987" -> "broadcast.991";
	"batch-norm-training.227" -> "get-tuple-element.229";
	"batch-norm-training.227" -> "get-tuple-element.230";
	"constant.231" -> "broadcast.232";
	"get-tuple-element.230" -> "add.233";
	"broadcast.232" -> "add.233";
	"add.233" -> "sqrt";
	"sqrt" -> "multiply.1247";
	"sqrt" -> "multiply.1247";
	"constant.52" -> "broadcast.75";
	"multiply.1247" -> "add.8";
	"broadcast.75" -> "add.8";
	"constant.1007" -> "broadcast.1011";
	"batch-norm-training.451" -> "get-tuple-element.453";
	"batch-norm-training.451" -> "get-tuple-element.454";
	"constant.455" -> "broadcast.456";
	"get-tuple-element.454" -> "add.457";
	"broadcast.456" -> "add.457";
	"add.457" -> "sqrt.1";
	"sqrt.1" -> "multiply.1168";
	"sqrt.1" -> "multiply.1168";
	"constant.54" -> "broadcast.76";
	"multiply.1168" -> "add.9";
	"broadcast.76" -> "add.9";
	"constant.1027" -> "broadcast.1031";
	"batch-norm-training.578" -> "get-tuple-element.580";
	"batch-norm-training.578" -> "get-tuple-element.581";
	"constant.582" -> "broadcast.583";
	"get-tuple-element.581" -> "add.584";
	"broadcast.583" -> "add.584";
	"add.584" -> "sqrt.2";
	"sqrt.2" -> "multiply.1136";
	"sqrt.2" -> "multiply.1136";
	"constant.55" -> "broadcast.77";
	"multiply.1136" -> "add.10";
	"broadcast.77" -> "add.10";
	"constant.1086" -> "broadcast.1090";
	"batch-norm-training.765" -> "get-tuple-element.767";
	"batch-norm-training.765" -> "get-tuple-element.768";
	"constant.769" -> "broadcast.770";
	"get-tuple-element.768" -> "add.771";
	"broadcast.770" -> "add.771";
	"add.771" -> "sqrt.3";
	"sqrt.3" -> "multiply.1109";
	"sqrt.3" -> "multiply.1109";
	"constant.56" -> "broadcast.78";
	"multiply.1109" -> "add.11";
	"broadcast.78" -> "add.11";
	"add.0" -> "dot.1101";
	"custom-call.74" -> "dot.1101";
	"dot.1101" -> "reshape.1102";
	"custom-call.73" -> "broadcast.1103";
	"reshape.1102" -> "multiply.1104";
	"broadcast.1103" -> "multiply.1104";
	"custom-call.71" -> "batch-norm-grad.1112";
	"broadcast.1090" -> "batch-norm-grad.1112";
	"get-tuple-element.767" -> "batch-norm-grad.1112";
	"add.11" -> "batch-norm-grad.1112";
	"multiply.1104" -> "batch-norm-grad.1112";
	"batch-norm-grad.1112" -> "get-tuple-element.1113";
	"add.755" -> "custom-call.76";
	"get-tuple-element.1113" -> "multiply.6";
	"custom-call.76" -> "multiply.6";
	"multiply.6" -> "reshape.1126";
	"reshape.1126" -> "dot.1127";
	"custom-call.69" -> "dot.1127";
	"dot.1127" -> "reshape.1128";
	"add.1" -> "reshape.202";
	"reshape.202" -> "broadcast.192";
	"broadcast.192" -> "multiply.29";
	"custom-call.80" -> "multiply.29";
	"multiply.29" -> "reduce.20";
	"constant.37" -> "reduce.20";
	"scalar_add_computation" -> "reduce.20";
	"constant.1057" -> "broadcast.202";
	"tanh.0" -> "multiply.34";
	"tanh.0" -> "multiply.34";
	"broadcast.202" -> "subtract.5";
	"multiply.34" -> "subtract.5";
	"reduce.20" -> "multiply.35";
	"subtract.5" -> "multiply.35";
	"multiply.35" -> "broadcast.193";
	"broadcast.193" -> "multiply.30";
	"custom-call.78" -> "multiply.30";
	"multiply.30" -> "reduce.21";
	"constant.38" -> "reduce.21";
	"scalar_add_computation" -> "reduce.21";
	"reduce.21" -> "reshape.1068";
	"reshape.1068" -> "pad";
	"constant.57" -> "pad";
	"reshape.1128" -> "add.1129";
	"pad" -> "add.1129";
	"custom-call.68" -> "broadcast.1130";
	"add.1129" -> "multiply.1131";
	"broadcast.1130" -> "multiply.1131";
	"add.577" -> "batch-norm-grad.1139";
	"broadcast.1031" -> "batch-norm-grad.1139";
	"get-tuple-element.580" -> "batch-norm-grad.1139";
	"add.10" -> "batch-norm-grad.1139";
	"multiply.1131" -> "batch-norm-grad.1139";
	"batch-norm-grad.1139" -> "get-tuple-element.1140";
	"get-tuple-element.1140" -> "multiply.1143";
	"select.10" -> "multiply.1143";
	"multiply.1143" -> "reshape.1144";
	"reshape.1144" -> "dot.1145";
	"custom-call.66" -> "dot.1145";
	"dot.1145" -> "reshape.1146";
	"add.559" -> "custom-call.82";
	"reshape.1146" -> "multiply.11";
	"custom-call.82" -> "multiply.11";
	"multiply.11" -> "reshape.1157";
	"reshape.1157" -> "dot.1158";
	"custom-call.63" -> "dot.1158";
	"dot.1158" -> "reshape.1159";
	"get-tuple-element.1140" -> "add.1161";
	"reshape.1159" -> "add.1161";
	"custom-call.62" -> "broadcast.1162";
	"add.1161" -> "multiply.1163";
	"broadcast.1162" -> "multiply.1163";
	"add.450" -> "batch-norm-grad.1171";
	"broadcast.1011" -> "batch-norm-grad.1171";
	"get-tuple-element.453" -> "batch-norm-grad.1171";
	"add.9" -> "batch-norm-grad.1171";
	"multiply.1163" -> "batch-norm-grad.1171";
	"batch-norm-grad.1171" -> "get-tuple-element.1172";
	"multiply.437" -> "reshape.1227";
	"reshape.1227" -> "transpose.1228";
	"get-tuple-element.1172" -> "multiply.1175";
	"select.11" -> "multiply.1175";
	"multiply.1175" -> "reshape.1176";
	"reshape.1176" -> "dot.1177";
	"p18.297" -> "dot.1177";
	"dot.1177" -> "reshape.1179";
	"reshape.1179" -> "transpose.1180";
	"transpose.1180" -> "reshape.1181";
	"transpose.1228" -> "dot.1229";
	"reshape.1181" -> "dot.1229";
	"dot.1229" -> "reshape.1230";
	"reshape.1230" -> "transpose.1231";
	"transpose.1231" -> "reshape.1233";
	"reshape.1233" -> "dot.1234";
	"p20.306" -> "dot.1234";
	"dot.1234" -> "reshape.1235";
	"get-tuple-element.1172" -> "add.1237";
	"reshape.1235" -> "add.1237";
	"transpose.409" -> "reshape.1211";
	"reshape.1211" -> "transpose.1212";
	"transpose.314" -> "reshape.1005";
	"reshape.1005" -> "transpose.1006";
	"reshape.1181" -> "dot.1182";
	"transpose.1006" -> "dot.1182";
	"dot.1182" -> "reshape.1183";
	"reshape.1183" -> "multiply.1184";
	"select.12" -> "multiply.1184";
	"multiply.1184" -> "multiply.1185";
	"divide.436" -> "multiply.1185";
	"multiply.1185" -> "reduce.1191";
	"constant.1186" -> "reduce.1191";
	"AddComputation.1187" -> "reduce.1191";
	"reduce.1191" -> "reshape.234";
	"reshape.234" -> "broadcast.1192";
	"multiply.1184" -> "subtract.1193";
	"broadcast.1192" -> "subtract.1193";
	"divide.436" -> "multiply.1194";
	"subtract.1193" -> "multiply.1194";
	"p23.374" -> "broadcast.1195";
	"multiply.1194" -> "divide.1196";
	"broadcast.1195" -> "divide.1196";
	"divide.1196" -> "reshape.1197";
	"transpose.1212" -> "dot.1213";
	"reshape.1197" -> "dot.1213";
	"dot.1213" -> "reshape.1214";
	"reshape.1214" -> "transpose.1216";
	"transpose.1216" -> "reshape.1218";
	"reshape.1218" -> "dot.1219";
	"p25.382" -> "dot.1219";
	"dot.1219" -> "reshape.1220";
	"add.1237" -> "add.1238";
	"reshape.1220" -> "add.1238";
	"transpose.391" -> "reshape.1003";
	"reshape.1003" -> "transpose.1004";
	"reshape.1197" -> "dot.1198";
	"transpose.1004" -> "dot.1198";
	"dot.1198" -> "reshape.1199";
	"reshape.1199" -> "transpose.1200";
	"transpose.1200" -> "reshape.1202";
	"reshape.1202" -> "dot.1203";
	"p27.401" -> "dot.1203";
	"dot.1203" -> "reshape.1204";
	"add.1238" -> "add.1239";
	"reshape.1204" -> "add.1239";
	"add.1239" -> "multiply.1240";
	"select.13" -> "multiply.1240";
	"custom-call.61" -> "broadcast.1241";
	"multiply.1240" -> "multiply.1242";
	"broadcast.1241" -> "multiply.1242";
	"reshape.469" -> "batch-norm-grad.1250";
	"broadcast.991" -> "batch-norm-grad.1250";
	"get-tuple-element.229" -> "batch-norm-grad.1250";
	"add.8" -> "batch-norm-grad.1250";
	"multiply.1242" -> "batch-norm-grad.1250";
	"batch-norm-grad.1250" -> "get-tuple-element.1251";
	"get-tuple-element.1251" -> "reshape.1254";
	"constant.982" -> "broadcast.986";
	"broadcast.1263" -> "select.1264";
	"reshape.1254" -> "select.1264";
	"broadcast.986" -> "select.1264";
	"broadcast.1281" -> "scatter.1287";
	"reshape.1275" -> "scatter.1287";
	"select.1264" -> "scatter.1287";
	"ScatterCombiner.1283" -> "scatter.1287";
	"scatter.1287" -> "custom-call.87";
	"custom-call.86" -> "add.1308";
	"custom-call.87" -> "add.1308";
	"dot.1101" -> "reduce.1315";
	"constant.1309" -> "reduce.1315";
	"AddComputation.1311" -> "reduce.1315";
	"reduce.1315" -> "custom-call.88";
	"reshape.1102" -> "multiply.1331";
	"get-tuple-element.766" -> "multiply.1331";
	"multiply.1331" -> "reduce.1338";
	"constant.1332" -> "reduce.1338";
	"AddComputation.1334" -> "reduce.1338";
	"reduce.1338" -> "custom-call.89";
	"multiply.6" -> "reduce.1354";
	"constant.1348" -> "reduce.1354";
	"AddComputation.1350" -> "reduce.1354";
	"reduce.1354" -> "custom-call.90";
	"add.600" -> "reshape.1364";
	"reshape.1364" -> "transpose.1365";
	"reshape.1126" -> "dot.7";
	"transpose.1365" -> "dot.7";
	"dot.7" -> "custom-call.91";
	"multiply.35" -> "custom-call.92";
	"multiply.35" -> "broadcast.179";
	"add.600" -> "slice.1392";
	"slice.1392" -> "reshape.261";
	"reshape.261" -> "broadcast.180";
	"broadcast.179" -> "multiply.26";
	"broadcast.180" -> "multiply.26";
	"multiply.26" -> "custom-call.93";
	"add.1129" -> "reduce.1410";
	"constant.1404" -> "reduce.1410";
	"AddComputation.1406" -> "reduce.1410";
	"reduce.1410" -> "custom-call.94";
	"add.1129" -> "multiply.1426";
	"get-tuple-element.579" -> "multiply.1426";
	"multiply.1426" -> "reduce.1433";
	"constant.1427" -> "reduce.1433";
	"AddComputation.1429" -> "reduce.1433";
	"reduce.1433" -> "custom-call.95";
	"multiply.1143" -> "reduce.1449";
	"constant.1443" -> "reduce.1449";
	"AddComputation.1445" -> "reduce.1449";
	"reduce.1449" -> "custom-call.96";
	"custom-call.65" -> "reshape.1459";
	"reshape.1459" -> "transpose.1460";
	"reshape.1144" -> "dot.10";
	"transpose.1460" -> "dot.10";
	"dot.10" -> "custom-call.97";
	"multiply.11" -> "reduce.1476";
	"constant.1470" -> "reduce.1476";
	"AddComputation.1472" -> "reduce.1476";
	"reduce.1476" -> "custom-call.98";
	"add.473" -> "reshape.1486";
	"reshape.1486" -> "transpose.1487";
	"reshape.1157" -> "dot.11";
	"transpose.1487" -> "dot.11";
	"dot.11" -> "custom-call.99";
	"add.1161" -> "reduce.1503";
	"constant.1497" -> "reduce.1503";
	"AddComputation.1499" -> "reduce.1503";
	"reduce.1503" -> "custom-call.100";
	"add.1161" -> "multiply.1519";
	"get-tuple-element.452" -> "multiply.1519";
	"multiply.1519" -> "reduce.1526";
	"constant.1520" -> "reduce.1526";
	"AddComputation.1522" -> "reduce.1526";
	"reduce.1526" -> "custom-call.101";
	"multiply.1175" -> "reduce.1542";
	"constant.1536" -> "reduce.1542";
	"AddComputation.1538" -> "reduce.1542";
	"multiply.1175" -> "reshape.1549";
	"reshape.1549" -> "transpose.1550";
	"dot.440" -> "reshape.1545";
	"reshape.1545" -> "transpose.1546";
	"transpose.1546" -> "reshape.1548";
	"transpose.1550" -> "dot.1551";
	"reshape.1548" -> "dot.1551";
	"dot.1229" -> "reduce.15";
	"constant.1555" -> "reduce.15";
	"AddComputation.1557" -> "reduce.15";
	"reduce.15" -> "reshape.1563";
	"dot.1229" -> "reshape.1565";
	"reshape.1565" -> "transpose.1566";
	"transpose.1566" -> "reshape.1568";
	"reshape.1568" -> "transpose.1569";
	"multiply.251" -> "reshape.1564";
	"transpose.1569" -> "dot.1570";
	"reshape.1564" -> "dot.1570";
	"dot.1213" -> "reduce.16";
	"constant.1575" -> "reduce.16";
	"AddComputation.1577" -> "reduce.16";
	"reduce.16" -> "reshape.1583";
	"dot.1213" -> "reshape.1585";
	"reshape.1585" -> "transpose.1587";
	"transpose.1587" -> "reshape.1589";
	"reshape.1589" -> "transpose.1590";
	"multiply.251" -> "reshape.1584";
	"transpose.1590" -> "dot.1591";
	"reshape.1584" -> "dot.1591";
	"dot.1198" -> "reduce.17";
	"constant.1595" -> "reduce.17";
	"AddComputation.1597" -> "reduce.17";
	"reduce.17" -> "reshape.1603";
	"dot.1198" -> "reshape.1605";
	"reshape.1605" -> "transpose.1606";
	"transpose.1606" -> "reshape.1608";
	"reshape.1608" -> "transpose.1609";
	"multiply.251" -> "reshape.1604";
	"transpose.1609" -> "dot.1610";
	"reshape.1604" -> "dot.1610";
	"multiply.1240" -> "reduce.1617";
	"constant.1611" -> "reduce.1617";
	"AddComputation.1613" -> "reduce.1617";
	"reduce.1617" -> "custom-call.102";
	"multiply.1240" -> "multiply.1633";
	"get-tuple-element.228" -> "multiply.1633";
	"multiply.1633" -> "reduce.1640";
	"constant.1634" -> "reduce.1640";
	"AddComputation.1636" -> "reduce.1640";
	"reduce.1640" -> "custom-call.103";
	"constant.17" -> "broadcast.32";
	"p10.177" -> "slice.1651";
	"slice.1651" -> "reshape.10";
	"constant.18" -> "broadcast.33";
	"reshape.10" -> "compare.6";
	"broadcast.33" -> "compare.6";
	"constant.19" -> "broadcast.34";
	"reshape.10" -> "add.2";
	"broadcast.34" -> "add.2";
	"compare.6" -> "select.4";
	"reshape.10" -> "select.4";
	"add.2" -> "select.4";
	"select.4" -> "reshape.11";
	"get-tuple-element.1251" -> "reshape.12";
	"broadcast.32" -> "scatter.0";
	"reshape.11" -> "scatter.0";
	"reshape.12" -> "scatter.0";
	"Int32PermissiveEmbeddingScatterCombiner.1652" -> "scatter.0";
	"scatter.0" -> "custom-call.104";
	"constant.20" -> "broadcast.35";
	"p12.198" -> "reshape.13";
	"constant.21" -> "broadcast.36";
	"reshape.13" -> "compare.7";
	"broadcast.36" -> "compare.7";
	"constant.22" -> "broadcast.37";
	"reshape.13" -> "add.3";
	"broadcast.37" -> "add.3";
	"compare.7" -> "select.5";
	"reshape.13" -> "select.5";
	"add.3" -> "select.5";
	"select.5" -> "reshape.14";
	"get-tuple-element.1251" -> "reshape.15";
	"broadcast.35" -> "scatter.1";
	"reshape.14" -> "scatter.1";
	"reshape.15" -> "scatter.1";
	"Int32PermissiveEmbeddingScatterCombiner.1681" -> "scatter.1";
	"scatter.1" -> "custom-call.105";
	"add.864" -> "tuple.1710";
	"add.792" -> "tuple.1710";
	"reshape.440" -> "tuple.1710";
	"add.859" -> "tuple.1710";
	"add.859" -> "tuple.1710";
	"custom-call.83" -> "tuple.1710";
	"custom-call.84" -> "tuple.1710";
	"custom-call.85" -> "tuple.1710";
	"add.1308" -> "tuple.1710";
	"custom-call.88" -> "tuple.1710";
	"custom-call.89" -> "tuple.1710";
	"custom-call.90" -> "tuple.1710";
	"custom-call.91" -> "tuple.1710";
	"custom-call.92" -> "tuple.1710";
	"custom-call.93" -> "tuple.1710";
	"custom-call.94" -> "tuple.1710";
	"custom-call.95" -> "tuple.1710";
	"custom-call.96" -> "tuple.1710";
	"custom-call.97" -> "tuple.1710";
	"custom-call.98" -> "tuple.1710";
	"custom-call.99" -> "tuple.1710";
	"custom-call.100" -> "tuple.1710";
	"custom-call.101" -> "tuple.1710";
	"reduce.1542" -> "tuple.1710";
	"dot.1551" -> "tuple.1710";
	"reshape.1563" -> "tuple.1710";
	"dot.1570" -> "tuple.1710";
	"reshape.1583" -> "tuple.1710";
	"dot.1591" -> "tuple.1710";
	"reshape.1603" -> "tuple.1710";
	"dot.1610" -> "tuple.1710";
	"custom-call.102" -> "tuple.1710";
	"custom-call.103" -> "tuple.1710";
	"custom-call.104" -> "tuple.1710";
	"custom-call.105" -> "tuple.1710";
 }