const text = `
    HloModule FullyUnrolled.147, input_output_alias={ {1}: (4, {}, must-alias), {2}: (5, {}, must-alias) }

%reduce.93.Reducer.98 (p0.95: f32[], p1.96: f32[]) -> f32[] {
  %p0.95 = f32[] parameter(0)
  %p1.96 = f32[] parameter(1)
  ROOT %maximum.97 = f32[] maximum(f32[] %p0.95, f32[] %p1.96)
}

%reduce.104.Reducer.109 (p0.106: f32[], p1.107: f32[]) -> f32[] {
  %p0.106 = f32[] parameter(0)
  %p1.107 = f32[] parameter(1)
  ROOT %add.108 = f32[] add(f32[] %p0.106, f32[] %p1.107)
}

%all-reduce.119.Reducer.124 (p0.121: f32[], p1.122: f32[]) -> f32[] {
  %p0.121 = f32[] parameter(0)
  %p1.122 = f32[] parameter(1)
  ROOT %add.123 = f32[] add(f32[] %p0.121, f32[] %p1.122)
}

ENTRY %FullyUnrolled.147 (p0.1: f32[4096,64,4], p1.2: s32[64], p2.3: s32[4], p3.4: s32[1], p4.5: f32[64,4,2,1024], p5.6: f32[64,4,2,1024], p6.7: f32[4096], p7.8: f32[4096,2048], p8.9: f32[4096,2048], p9.10: f32[4096,2048], p10.11: f32[4096,2048], p11.12: f32[4096], p12.13: f32[4096,5504], p13.14: f32[4096,5504], p14.15: f32[4096,5504], p15.16: f32[4096], p16.17: f32[4096,16000]) -> (f32[16000,1,4], f32[64,4,2,1024], f32[64,4,2,1024]) {
  %p4.5 = f32[64,4,2,1024]{3,2,1,0} parameter(4)
  %custom-call.37 = f32[64,4,2,1024]{3,2,1,0} custom-call(f32[64,4,2,1024]{3,2,1,0} %p4.5), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %p5.6 = f32[64,4,2,1024]{3,2,1,0} parameter(5)
  %custom-call.38 = f32[64,4,2,1024]{3,2,1,0} custom-call(f32[64,4,2,1024]{3,2,1,0} %p5.6), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %p16.17 = f32[4096,16000]{1,0} parameter(16)
  %custom-call.19 = f32[4096,16000]{1,0} custom-call(f32[4096,16000]{1,0} %p16.17), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %iota.27 = s32[64]{0} iota(), iota_dimension=0
  %broadcast.28 = s32[64,64]{1,0} broadcast(s32[64]{0} %iota.27), dimensions={1}
  %p1.2 = s32[64]{0} parameter(1)
  %broadcast.29 = s32[64,64]{1,0} broadcast(s32[64]{0} %p1.2), dimensions={0}
  %compare.30 = pred[64,64]{1,0} compare(s32[64,64]{1,0} %broadcast.28, s32[64,64]{1,0} %broadcast.29), direction=LE
  %broadcast.34 = pred[4,64,64]{2,1,0} broadcast(pred[64,64]{1,0} %compare.30), dimensions={1,2}
  %broadcast.31 = s32[4,64]{1,0} broadcast(s32[64]{0} %iota.27), dimensions={1}
  %p2.3 = s32[4]{0} parameter(2)
  %broadcast.32 = s32[4,64]{1,0} broadcast(s32[4]{0} %p2.3), dimensions={0}
  %compare.33 = pred[4,64]{1,0} compare(s32[4,64]{1,0} %broadcast.31, s32[4,64]{1,0} %broadcast.32), direction=GE
  %broadcast.35 = pred[4,64,64]{2,1,0} broadcast(pred[4,64]{1,0} %compare.33), dimensions={0,2}
  %and.36 = pred[4,64,64]{2,1,0} and(pred[4,64,64]{2,1,0} %broadcast.34, pred[4,64,64]{2,1,0} %broadcast.35)
  %reshape.89 = pred[4,64,64]{2,1,0} reshape(pred[4,64,64]{2,1,0} %and.36)
  %broadcast.90 = pred[4,2,64,64]{3,2,1,0} broadcast(pred[4,64,64]{2,1,0} %reshape.89), dimensions={0,2,3}
  %convert.20 = f32[64]{0} convert(s32[64]{0} %p1.2)
  %reshape.21 = f32[64,1]{1,0} reshape(f32[64]{0} %convert.20)
  %constant.22 = f32[512]{0} constant({1, 0.982171834, 0.964661658, 0.947463512, 0.930572033, 0.913981676, 0.897687137, 0.881683111, 0.865964353, 0.850525856, 0.835362554, 0.820469618, 0.805842221, 0.791475534, 0.777365, 0.763506114, 0.749894202, 0.736525, 0.723394156, 0.710497439, 0.697830558, 0.685389578, 0.673170388, 0.661169052, 0.649381638, 0.637804389, 0.626433551, 0.615265429, 0.604296386, 0.593522906, 0.582941532, 0.572548807, 0.562341332, 0.552315831, 0.542469084, 0.532797873, 0.523299158, 0.51396966, 0.504806578, 0.495806813, 0.486967534, 0.478285819, 0.469758868, 0.461383939, 0.453158349, 0.445079386, 0.437144488, 0.429351032, 0.421696514, 0.414178461, 0.406794429, 0.399542063, 0.392418981, 0.385422885, 0.378551543, 0.371802658, 0.365174145, 0.358663768, 0.352269441, 0.345989168, 0.339820832, 0.333762497, 0.327812135, 0.32196784, 0.316227764, 0.310590029, 0.305052787, 0.29961428, 0.294272721, 0.289026409, 0.283873588, 0.278812647, 0.273841977, 0.26895988, 0.264164835, 0.259455264, 0.254829675, 0.250286549, 0.245824397, 0.241441816, 0.237137362, 0.23290965, 0.228757322, 0.224679008, 0.220673397, 0.216739222, 0.212875158, 0.209080011, 0.2053525, 0.201691449, 0.198095679, 0.194564015, 0.191095293, 0.187688425, 0.18434231, 0.181055814, 0.177827939, 0.174657613, 0.171543792, 0.168485492, 0.165481701, 0.16253148, 0.15963386, 0.156787887, 0.153992653, 0.151247263, 0.148550808, 0.145902425, 0.143301263, 0.140746459, 0.138237223, 0.13577272, 0.133352146, 0.130974725, 0.128639698, 0.12634629, 0.124093771, 0.121881425, 0.119708508, 0.117574319, 0.115478203, 0.113419443, 0.111397386, 0.109411381, 0.107460782, 0.105544962, 0.103663296, 0.101815172, 0.1, 0.0982171819, 0.0964661613, 0.0947463512, 0.0930572, 0.0913981721, 0.0897687078, 0.0881683081, 0.0865964293, 0.0850525796, 0.0835362598, 0.0820469633, 0.0805842131, 0.0791475549, 0.0777365044, 0.076350607, 0.0749894157, 0.0736525, 0.0723394156, 0.0710497424, 0.0697830543, 0.0685389563, 0.0673170388, 0.0661169067, 0.0649381652, 0.0637804419, 0.0626433566, 0.0615265369, 0.0604296438, 0.0593522936, 0.0582941547, 0.0572548769, 0.0562341288, 0.0552315824, 0.0542469062, 0.053279791, 0.0523299128, 0.0513969697, 0.0504806563, 0.0495806821, 0.0486967526, 0.0478285812, 0.0469758846, 0.0461384, 0.0453158356, 0.0445079394, 0.0437144488, 0.0429351032, 0.0421696492, 0.0414178446, 0.0406794436, 0.0399542041, 0.0392419, 0.0385422893, 0.037855152, 0.0371802673, 0.0365174115, 0.035866376, 0.0352269448, 0.0345989168, 0.0339820832, 0.0333762467, 0.0327812098, 0.0321967863, 0.0316227786, 0.0310590025, 0.0305052791, 0.0299614277, 0.0294272732, 0.0289026406, 0.0283873584, 0.0278812684, 0.0273841955, 0.0268959869, 0.0264164843, 0.0259455256, 0.0254829675, 0.0250286553, 0.02458244, 0.024144182, 0.0237137359, 0.0232909676, 0.0228757318, 0.0224679, 0.0220673401, 0.0216739215, 0.0212875176, 0.020908, 0.0205352511, 0.0201691464, 0.0198095683, 0.0194564, 0.0191095304, 0.0187688433, 0.0184342302, 0.0181055833, 0.0177827943, 0.0174657609, 0.0171543788, 0.0168485492, 0.0165481716, 0.0162531473, 0.0159633849, 0.0156787895, 0.0153992651, 0.0151247252, 0.0148550803, 0.0145902429, 0.0143301254, 0.0140746459, 0.0138237225, 0.0135772713, 0.0133352149, 0.0130974725, 0.0128639694, 0.0126346294, 0.0124093769, 0.0121881422, 0.0119708506, 0.0117574325, 0.0115478197, 0.0113419443, 0.0111397384, 0.0109411385, 0.0107460786, 0.0105544962, 0.010366329, 0.0101815173, 0.01, 0.00982171949, 0.00964661594, 0.00947463512, 0.00930572, 0.00913981628, 0.00897687115, 0.00881683081, 0.00865964312, 0.00850525778, 0.00835362542, 0.0082046967, 0.00805842225, 0.00791475549, 0.00777365034, 0.0076350607, 0.00749894232, 0.00736524956, 0.00723394146, 0.00710497424, 0.00697830599, 0.00685389573, 0.00673170388, 0.00661169039, 0.00649381662, 0.00637804391, 0.00626433548, 0.00615265407, 0.00604296429, 0.00593522936, 0.00582941528, 0.0057254876, 0.00562341325, 0.00552315824, 0.0054246909, 0.0053279791, 0.00523299119, 0.00513969688, 0.00504806591, 0.00495806849, 0.00486967526, 0.0047828583, 0.00469758874, 0.00461383956, 0.00453158375, 0.00445079384, 0.00437144469, 0.00429351, 0.00421696482, 0.00414178474, 0.00406794436, 0.00399542041, 0.0039241896, 0.00385422911, 0.00378551544, 0.00371802668, 0.00365174143, 0.00358663779, 0.00352269458, 0.00345989154, 0.00339820841, 0.00333762448, 0.00327812112, 0.0032196783, 0.00316227786, 0.00310590025, 0.003050528, 0.00299614272, 0.00294272718, 0.00289026392, 0.00283873593, 0.0027881267, 0.00273841969, 0.00268959883, 0.00264164829, 0.0025945527, 0.0025482967, 0.00250286539, 0.0024582441, 0.00241441838, 0.00237137382, 0.00232909666, 0.00228757318, 0.00224679, 0.00220673415, 0.00216739206, 0.00212875172, 0.0020908, 0.00205352507, 0.00201691454, 0.00198095664, 0.00194564008, 0.00191095285, 0.00187688426, 0.00184342288, 0.00181055814, 0.00177827943, 0.00174657616, 0.00171543786, 0.00168485485, 0.00165481714, 0.00162531494, 0.00159633858, 0.00156787888, 0.00153992651, 0.00151247263, 0.00148550794, 0.00145902426, 0.00143301266, 0.00140746462, 0.00138237223, 0.0013577271, 0.00133352145, 0.00130974723, 0.00128639687, 0.00126346294, 0.00124093785, 0.00121881417, 0.00119708502, 0.00117574329, 0.00115478202, 0.00113419443, 0.00111397391, 0.0010941138, 0.00107460783, 0.0010554496, 0.00103663292, 0.00101815176, 0.001, 0.000982171856, 0.000964661594, 0.000947463559, 0.000930572103, 0.000913981756, 0.000897687103, 0.000881683, 0.000865964335, 0.000850525801, 0.000835362531, 0.000820469577, 0.000805842225, 0.000791475584, 0.000777365, 0.000763506046, 0.000749894185, 0.000736525, 0.000723394158, 0.000710497377, 0.000697830576, 0.000685389619, 0.000673170376, 0.000661169, 0.000649381662, 0.000637804391, 0.000626433583, 0.000615265395, 0.000604296394, 0.000593522913, 0.000582941517, 0.000572548772, 0.000562341302, 0.000552315847, 0.00054246909, 0.000532797887, 0.000523299095, 0.000513969688, 0.00050480658, 0.000495806802, 0.000486967503, 0.000478285801, 0.000469758874, 0.000461383985, 0.00045315834, 0.000445079408, 0.000437144481, 0.000429351, 0.000421696488, 0.000414178445, 0.000406794425, 0.000399542041, 0.000392419, 0.000385422871, 0.000378551515, 0.000371802656, 0.000365174114, 0.000358663761, 0.000352269446, 0.00034598916, 0.000339820836, 0.000333762466, 0.000327812129, 0.000321967847, 0.000316227786, 0.000310590025, 0.000305052788, 0.000299614272, 0.00029427273, 0.000289026386, 0.000283873611, 0.000278812659, 0.000273841957, 0.000268959877, 0.000264164846, 0.000259455293, 0.000254829676, 0.000250286539, 0.000245824398, 0.000241441812, 0.000237137385, 0.000232909661, 0.000228757315, 0.00022467901, 0.000220673421, 0.000216739209, 0.000212875166, 0.000209080012, 0.000205352495, 0.000201691451, 0.000198095673, 0.000194564011, 0.0001910953, 0.000187688434, 0.000184342294, 0.000181055817, 0.00017782794, 0.000174657602, 0.000171543783, 0.00016848548, 0.000165481717, 0.000162531476, 0.000159633855, 0.000156787879, 0.000153992645, 0.000151247252, 0.000148550811, 0.000145902421, 0.000143301266, 0.000140746473, 0.000138237228, 0.000135772716, 0.00013335215, 0.000130974717, 0.000128639687, 0.000126346291, 0.000124093771, 0.000121881414, 0.000119708508, 0.000117574331, 0.000115478193, 0.000113419439, 0.000111397392, 0.000109411376, 0.000107460779, 0.000105544968, 0.000103663289, 0.000101815174})
  %reshape.23 = f32[1,512]{1,0} reshape(f32[512]{0} %constant.22)
  %dot.24 = f32[64,512]{1,0} dot(f32[64,1]{1,0} %reshape.21, f32[1,512]{1,0} %reshape.23), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %cosine.26 = f32[64,512]{1,0} cosine(f32[64,512]{1,0} %dot.24)
  %reshape.59 = f32[64,512]{1,0} reshape(f32[64,512]{1,0} %cosine.26)
  %broadcast.60 = f32[64,4,2,512]{3,2,1,0} broadcast(f32[64,512]{1,0} %reshape.59), dimensions={0,3}
  %p0.1 = f32[4096,64,4]{2,1,0} parameter(0)
  %p6.7 = f32[4096]{0} parameter(6)
  %custom-call.39 = f32[4096]{0} custom-call(f32[4096]{0} %p6.7), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %constant.48 = f32[] constant(1e-05)
  %custom-call.49 = f32[4096,64,4]{2,1,0} custom-call(f32[4096,64,4]{2,1,0} %p0.1, f32[4096]{0} %custom-call.39, f32[] %constant.48), custom_call_target="AwsNeuronRmsNorm", api_version=API_VERSION_UNSPECIFIED, backend_config="0"
  %reshape.50 = f32[4096,256]{1,0} reshape(f32[4096,64,4]{2,1,0} %custom-call.49)
  %p7.8 = f32[4096,2048]{1,0} parameter(7)
  %custom-call.40 = f32[4096,2048]{1,0} custom-call(f32[4096,2048]{1,0} %p7.8), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %dot.51 = f32[256,2048]{1,0} dot(f32[4096,256]{1,0} %reshape.50, f32[4096,2048]{1,0} %custom-call.40), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  %reshape.54 = f32[64,4,2,1024]{3,2,1,0} reshape(f32[256,2048]{1,0} %dot.51)
  %slice.61 = f32[64,4,2,512]{3,2,1,0} slice(f32[64,4,2,1024]{3,2,1,0} %reshape.54), slice={[0:64], [0:4], [0:2], [0:512]}
  %multiply.63 = f32[64,4,2,512]{3,2,1,0} multiply(f32[64,4,2,512]{3,2,1,0} %broadcast.60, f32[64,4,2,512]{3,2,1,0} %slice.61)
  %sine.25 = f32[64,512]{1,0} sine(f32[64,512]{1,0} %dot.24)
  %reshape.57 = f32[64,512]{1,0} reshape(f32[64,512]{1,0} %sine.25)
  %broadcast.58 = f32[64,4,2,512]{3,2,1,0} broadcast(f32[64,512]{1,0} %reshape.57), dimensions={0,3}
  %slice.62 = f32[64,4,2,512]{3,2,1,0} slice(f32[64,4,2,1024]{3,2,1,0} %reshape.54), slice={[0:64], [0:4], [0:2], [512:1024]}
  %multiply.64 = f32[64,4,2,512]{3,2,1,0} multiply(f32[64,4,2,512]{3,2,1,0} %broadcast.58, f32[64,4,2,512]{3,2,1,0} %slice.62)
  %subtract.65 = f32[64,4,2,512]{3,2,1,0} subtract(f32[64,4,2,512]{3,2,1,0} %multiply.63, f32[64,4,2,512]{3,2,1,0} %multiply.64)
  %multiply.66 = f32[64,4,2,512]{3,2,1,0} multiply(f32[64,4,2,512]{3,2,1,0} %broadcast.60, f32[64,4,2,512]{3,2,1,0} %slice.62)
  %multiply.67 = f32[64,4,2,512]{3,2,1,0} multiply(f32[64,4,2,512]{3,2,1,0} %broadcast.58, f32[64,4,2,512]{3,2,1,0} %slice.61)
  %add.68 = f32[64,4,2,512]{3,2,1,0} add(f32[64,4,2,512]{3,2,1,0} %multiply.66, f32[64,4,2,512]{3,2,1,0} %multiply.67)
  %concatenate.69 = f32[64,4,2,1024]{3,2,1,0} concatenate(f32[64,4,2,512]{3,2,1,0} %subtract.65, f32[64,4,2,512]{3,2,1,0} %add.68), dimensions={3}
  %constant.83 = f32[] constant(32)
  %broadcast.84 = f32[64,4,2,1024]{3,2,1,0} broadcast(f32[] %constant.83), dimensions={}
  %divide.85 = f32[64,4,2,1024]{3,2,1,0} divide(f32[64,4,2,1024]{3,2,1,0} %concatenate.69, f32[64,4,2,1024]{3,2,1,0} %broadcast.84)
  %reshape.72 = f32[64,512]{1,0} reshape(f32[64,512]{1,0} %cosine.26)
  %broadcast.73 = f32[64,4,2,512]{3,2,1,0} broadcast(f32[64,512]{1,0} %reshape.72), dimensions={0,3}
  %p8.9 = f32[4096,2048]{1,0} parameter(8)
  %custom-call.41 = f32[4096,2048]{1,0} custom-call(f32[4096,2048]{1,0} %p8.9), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %dot.52 = f32[256,2048]{1,0} dot(f32[4096,256]{1,0} %reshape.50, f32[4096,2048]{1,0} %custom-call.41), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  %reshape.55 = f32[64,4,2,1024]{3,2,1,0} reshape(f32[256,2048]{1,0} %dot.52)
  %slice.74 = f32[64,4,2,512]{3,2,1,0} slice(f32[64,4,2,1024]{3,2,1,0} %reshape.55), slice={[0:64], [0:4], [0:2], [0:512]}
  %multiply.76 = f32[64,4,2,512]{3,2,1,0} multiply(f32[64,4,2,512]{3,2,1,0} %broadcast.73, f32[64,4,2,512]{3,2,1,0} %slice.74)
  %reshape.70 = f32[64,512]{1,0} reshape(f32[64,512]{1,0} %sine.25)
  %broadcast.71 = f32[64,4,2,512]{3,2,1,0} broadcast(f32[64,512]{1,0} %reshape.70), dimensions={0,3}
  %slice.75 = f32[64,4,2,512]{3,2,1,0} slice(f32[64,4,2,1024]{3,2,1,0} %reshape.55), slice={[0:64], [0:4], [0:2], [512:1024]}
  %multiply.77 = f32[64,4,2,512]{3,2,1,0} multiply(f32[64,4,2,512]{3,2,1,0} %broadcast.71, f32[64,4,2,512]{3,2,1,0} %slice.75)
  %subtract.78 = f32[64,4,2,512]{3,2,1,0} subtract(f32[64,4,2,512]{3,2,1,0} %multiply.76, f32[64,4,2,512]{3,2,1,0} %multiply.77)
  %multiply.79 = f32[64,4,2,512]{3,2,1,0} multiply(f32[64,4,2,512]{3,2,1,0} %broadcast.73, f32[64,4,2,512]{3,2,1,0} %slice.75)
  %multiply.80 = f32[64,4,2,512]{3,2,1,0} multiply(f32[64,4,2,512]{3,2,1,0} %broadcast.71, f32[64,4,2,512]{3,2,1,0} %slice.74)
  %add.81 = f32[64,4,2,512]{3,2,1,0} add(f32[64,4,2,512]{3,2,1,0} %multiply.79, f32[64,4,2,512]{3,2,1,0} %multiply.80)
  %concatenate.82 = f32[64,4,2,1024]{3,2,1,0} concatenate(f32[64,4,2,512]{3,2,1,0} %subtract.78, f32[64,4,2,512]{3,2,1,0} %add.81), dimensions={3}
  %dot.86 = f32[4,2,64,64]{3,2,1,0} dot(f32[64,4,2,1024]{3,2,1,0} %divide.85, f32[64,4,2,1024]{3,2,1,0} %concatenate.82), lhs_batch_dims={1,2}, lhs_contracting_dims={3}, rhs_batch_dims={1,2}, rhs_contracting_dims={3}
  %constant.87 = f32[] constant(-30000)
  %broadcast.88 = f32[4,2,64,64]{3,2,1,0} broadcast(f32[] %constant.87), dimensions={}
  %select.91 = f32[4,2,64,64]{3,2,1,0} select(pred[4,2,64,64]{3,2,1,0} %broadcast.90, f32[4,2,64,64]{3,2,1,0} %dot.86, f32[4,2,64,64]{3,2,1,0} %broadcast.88)
  %constant.92 = f32[] constant(-inf)
  %reduce.93 = f32[4,2,64]{2,1,0} reduce(f32[4,2,64,64]{3,2,1,0} %select.91, f32[] %constant.92), dimensions={3}, to_apply=%reduce.93.Reducer.98
  %reshape.99 = f32[4,2,64]{2,1,0} reshape(f32[4,2,64]{2,1,0} %reduce.93)
  %broadcast.100 = f32[4,2,64,64]{3,2,1,0} broadcast(f32[4,2,64]{2,1,0} %reshape.99), dimensions={0,1,2}
  %subtract.101 = f32[4,2,64,64]{3,2,1,0} subtract(f32[4,2,64,64]{3,2,1,0} %select.91, f32[4,2,64,64]{3,2,1,0} %broadcast.100)
  %exponential.102 = f32[4,2,64,64]{3,2,1,0} exponential(f32[4,2,64,64]{3,2,1,0} %subtract.101)
  %constant.103 = f32[] constant(0)
  %reduce.104 = f32[4,2,64]{2,1,0} reduce(f32[4,2,64,64]{3,2,1,0} %exponential.102, f32[] %constant.103), dimensions={3}, to_apply=%reduce.104.Reducer.109
  %reshape.110 = f32[4,2,64]{2,1,0} reshape(f32[4,2,64]{2,1,0} %reduce.104)
  %broadcast.111 = f32[4,2,64,64]{3,2,1,0} broadcast(f32[4,2,64]{2,1,0} %reshape.110), dimensions={0,1,2}
  %divide.112 = f32[4,2,64,64]{3,2,1,0} divide(f32[4,2,64,64]{3,2,1,0} %exponential.102, f32[4,2,64,64]{3,2,1,0} %broadcast.111)
  %p9.10 = f32[4096,2048]{1,0} parameter(9)
  %custom-call.42 = f32[4096,2048]{1,0} custom-call(f32[4096,2048]{1,0} %p9.10), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %dot.53 = f32[256,2048]{1,0} dot(f32[4096,256]{1,0} %reshape.50, f32[4096,2048]{1,0} %custom-call.42), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  %reshape.56 = f32[64,4,2,1024]{3,2,1,0} reshape(f32[256,2048]{1,0} %dot.53)
  %dot.113 = f32[4,2,64,1024]{3,2,1,0} dot(f32[4,2,64,64]{3,2,1,0} %divide.112, f32[64,4,2,1024]{3,2,1,0} %reshape.56), lhs_batch_dims={0,1}, lhs_contracting_dims={3}, rhs_batch_dims={1,2}, rhs_contracting_dims={0}
  %transpose.114 = f32[64,4,2,1024]{3,2,1,0} transpose(f32[4,2,64,1024]{3,2,1,0} %dot.113), dimensions={2,0,1,3}
  %reshape.115 = f32[256,2048]{1,0} reshape(f32[64,4,2,1024]{3,2,1,0} %transpose.114)
  %p10.11 = f32[4096,2048]{1,0} parameter(10)
  %custom-call.43 = f32[4096,2048]{1,0} custom-call(f32[4096,2048]{1,0} %p10.11), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %dot.116 = f32[256,4096]{1,0} dot(f32[256,2048]{1,0} %reshape.115, f32[4096,2048]{1,0} %custom-call.43), lhs_contracting_dims={1}, rhs_contracting_dims={1}
  %transpose.117 = f32[4096,256]{1,0} transpose(f32[256,4096]{1,0} %dot.116), dimensions={1,0}
  %reshape.118 = f32[4096,64,4]{2,1,0} reshape(f32[4096,256]{1,0} %transpose.117)
  %all-reduce.119 = f32[4096,64,4]{2,1,0} all-reduce(f32[4096,64,4]{2,1,0} %reshape.118), replica_groups={{0,1}}, to_apply=%all-reduce.119.Reducer.124
  %add.125 = f32[4096,64,4]{2,1,0} add(f32[4096,64,4]{2,1,0} %all-reduce.119, f32[4096,64,4]{2,1,0} %p0.1)
  %p11.12 = f32[4096]{0} parameter(11)
  %custom-call.44 = f32[4096]{0} custom-call(f32[4096]{0} %p11.12), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %constant.126 = f32[] constant(1e-05)
  %custom-call.127 = f32[4096,64,4]{2,1,0} custom-call(f32[4096,64,4]{2,1,0} %add.125, f32[4096]{0} %custom-call.44, f32[] %constant.126), custom_call_target="AwsNeuronRmsNorm", api_version=API_VERSION_UNSPECIFIED, backend_config="0"
  %reshape.128 = f32[4096,256]{1,0} reshape(f32[4096,64,4]{2,1,0} %custom-call.127)
  %p12.13 = f32[4096,5504]{1,0} parameter(12)
  %custom-call.45 = f32[4096,5504]{1,0} custom-call(f32[4096,5504]{1,0} %p12.13), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %dot.129 = f32[256,5504]{1,0} dot(f32[4096,256]{1,0} %reshape.128, f32[4096,5504]{1,0} %custom-call.45), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  %logistic.130 = f32[256,5504]{1,0} logistic(f32[256,5504]{1,0} %dot.129)
  %multiply.131 = f32[256,5504]{1,0} multiply(f32[256,5504]{1,0} %dot.129, f32[256,5504]{1,0} %logistic.130)
  %p13.14 = f32[4096,5504]{1,0} parameter(13)
  %custom-call.46 = f32[4096,5504]{1,0} custom-call(f32[4096,5504]{1,0} %p13.14), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %dot.132 = f32[256,5504]{1,0} dot(f32[4096,256]{1,0} %reshape.128, f32[4096,5504]{1,0} %custom-call.46), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  %multiply.133 = f32[256,5504]{1,0} multiply(f32[256,5504]{1,0} %multiply.131, f32[256,5504]{1,0} %dot.132)
  %p14.15 = f32[4096,5504]{1,0} parameter(14)
  %custom-call.47 = f32[4096,5504]{1,0} custom-call(f32[4096,5504]{1,0} %p14.15), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %dot.134 = f32[256,4096]{1,0} dot(f32[256,5504]{1,0} %multiply.133, f32[4096,5504]{1,0} %custom-call.47), lhs_contracting_dims={1}, rhs_contracting_dims={1}
  %transpose.135 = f32[4096,256]{1,0} transpose(f32[256,4096]{1,0} %dot.134), dimensions={1,0}
  %reshape.136 = f32[4096,64,4]{2,1,0} reshape(f32[4096,256]{1,0} %transpose.135)
  %add.137 = f32[4096,64,4]{2,1,0} add(f32[4096,64,4]{2,1,0} %reshape.136, f32[4096,64,4]{2,1,0} %add.125)
  %transpose.138 = f32[64,4096,4]{2,1,0} transpose(f32[4096,64,4]{2,1,0} %add.137), dimensions={1,0,2}
  %p3.4 = s32[1]{0} parameter(3)
  %gather.139 = f32[1,4096,4]{2,1,0} gather(f32[64,4096,4]{2,1,0} %transpose.138, s32[1]{0} %p3.4), offset_dims={1,2}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,4096,4}
  %transpose.140 = f32[4096,1,4]{2,1,0} transpose(f32[1,4096,4]{2,1,0} %gather.139), dimensions={1,0,2}
  %p15.16 = f32[4096]{0} parameter(15)
  %custom-call.18 = f32[4096]{0} custom-call(f32[4096]{0} %p15.16), custom_call_target="AwsNeuronTransferWithStaticRing", api_version=API_VERSION_UNSPECIFIED
  %constant.141 = f32[] constant(1e-05)
  %custom-call.142 = f32[4096,1,4]{2,1,0} custom-call(f32[4096,1,4]{2,1,0} %transpose.140, f32[4096]{0} %custom-call.18, f32[] %constant.141), custom_call_target="AwsNeuronRmsNorm", api_version=API_VERSION_UNSPECIFIED, backend_config="0"
  %reshape.143 = f32[4096,4]{1,0} reshape(f32[4096,1,4]{2,1,0} %custom-call.142)
  %dot.144 = f32[16000,4]{1,0} dot(f32[4096,16000]{1,0} %custom-call.19, f32[4096,4]{1,0} %reshape.143), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  %reshape.145 = f32[16000,1,4]{2,1,0} reshape(f32[16000,4]{1,0} %dot.144)
  ROOT %tuple.146 = (f32[16000,1,4]{2,1,0}, f32[64,4,2,1024]{3,2,1,0}, f32[64,4,2,1024]{3,2,1,0}) tuple(f32[16000,1,4]{2,1,0} %reshape.145, f32[64,4,2,1024]{3,2,1,0} %concatenate.82, f32[64,4,2,1024]{3,2,1,0} %reshape.56)
}
`

export default text;
